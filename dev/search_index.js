var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Constants","page":"API","title":"Constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ssmc\nssmc_dir\nssmc_formats","category":"page"},{"location":"api/#SuiteSparseMatrixCollection.ssmc","page":"API","title":"SuiteSparseMatrixCollection.ssmc","text":"Main SuiteSparseMatrixCollection database.\n\n\n\n\n\n","category":"constant"},{"location":"api/#SuiteSparseMatrixCollection.ssmc_dir","page":"API","title":"SuiteSparseMatrixCollection.ssmc_dir","text":"Folder where matrices are stored.\n\n\n\n\n\n","category":"constant"},{"location":"api/#SuiteSparseMatrixCollection.ssmc_formats","page":"API","title":"SuiteSparseMatrixCollection.ssmc_formats","text":"Formats in which matrices are available.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Utilities","page":"API","title":"Utilities","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"group_paths\nmatrix_paths\nssmc_matrices\nfetch_ssmc","category":"page"},{"location":"api/#SuiteSparseMatrixCollection.group_paths","page":"API","title":"SuiteSparseMatrixCollection.group_paths","text":"group_paths(matrices; format=\"MM\")\n\nReturn the array of paths where matrices's groups will be or were downloaded.\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseMatrixCollection.matrix_paths","page":"API","title":"SuiteSparseMatrixCollection.matrix_paths","text":"matrix_paths(matrices; format=\"MM\")\n\nThe argument matrices should be a DataFrame or DataFrameRow. Return the array of paths where each matrix in matrices will be or was downloaded.\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseMatrixCollection.ssmc_matrices","page":"API","title":"SuiteSparseMatrixCollection.ssmc_matrices","text":"ssmc_matrices(group, name)\n\nReturn an iterable of matrices whose group contains the string group and whose name contains the string name.\n\nssmc_matrices(\"\", name)\n\nReturn an iterable of matrices whose name contains the string name.\n\nssmc_matrices(group, \"\")\n\nReturn an iterable of matrices whose group contains the string group.\n\nExample: ssmc_matrices(\"HB\", \"bcsstk\").\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseMatrixCollection.fetch_ssmc","page":"API","title":"SuiteSparseMatrixCollection.fetch_ssmc","text":"fetch_ssmc(matrices; format=\"MM\")\n\nDownload matrices from the SuiteSparseMatrixCollection. The argument matrices should be a DataFrame or DataFrameRow. Each matrix will be stored in matrix_paths(matrix; format=format).\n\nfetch_ssmc(name; format=\"MM\")\n\nIf name is a string, select matrices whose name contain the string name in the collection, and download them.\n\nfetch_ssmc(group, name; format=\"MM\")\n\nIf group and name are strings, select matrices whose group and name contain the strings group and name, respectively, in the collection, and download them.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"#Home","page":"Home","title":"SuiteSparseMatrixCollection.jl documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A straightforward interface to the SuiteSparse Matrix Collection.","category":"page"},{"location":"#How-to-install","page":"Home","title":"How to install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> Pkg.clone(\"https://github.com/JuliaSmoothOptimizers/SuiteSparseMatrixCollection.jl\")\njulia> Pkg.test(\"SuiteSparseMatrixCollection\")","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using SuiteSparseMatrixCollection  # the database is named ssmc\n\njulia> # fetch symmetric positive definite matrices with ≤ 100 rows and columns\njulia> tiny = filter(p -> p.structure == \"symmetric\" && p.posDef == \"yes\" && p.type == \"real\" && p.rows ≤ 100, ssmc)\njulia> fetch_ssmc(tiny, format=\"MM\")  # download in MatrixMarket format\n\njulia> for matrix in tiny\n         println(matrix_path(matrix, format=\"MM\"))  # matrices are stored here\n       end","category":"page"}]
}
