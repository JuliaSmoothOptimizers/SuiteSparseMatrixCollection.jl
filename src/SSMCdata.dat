1`HB`1138_bus`1138`1138`4054`yes`1138`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Tylavsky`I. Duff, R. Grimes, J. Lewis`1985`power network problem`
2`HB`494_bus`494`494`1666`yes`494`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Tylavsky`I. Duff, R. Grimes, J. Lewis`1985`power network problem`
3`HB`662_bus`662`662`2474`yes`662`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Tylavsky`I. Duff, R. Grimes, J. Lewis`1985`power network problem`
4`HB`685_bus`685`685`3249`yes`685`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Tylavsky`I. Duff, R. Grimes, J. Lewis`1985`power network problem`
5`HB`abb313`313`176`1557`yes`176`1`2`0`0%`0%`binary`rectangular`no`no`M. Abbas`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
6`HB`arc130`130`130`1037`yes`130`55`55`245`76%`0%`real`unsymmetric`no`no`A. Curtis`A. Curtis, I. Duff, J. Reid`1974`materials problem`
7`HB`ash219`219`85`438`yes`85`1`1`0`0%`0%`binary`rectangular`no`no`V. Askenazi`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
8`HB`ash292`292`292`2208`yes`292`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`V. Askenazi`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
9`HB`ash331`331`104`662`yes`104`1`1`0`0%`0%`binary`rectangular`no`no`V. Askenazi`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
10`HB`ash608`608`188`1216`yes`188`1`1`0`0%`0%`binary`rectangular`no`no`V. Askenazi`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
11`HB`ash85`85`85`523`yes`85`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`V. Askenazi`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
12`HB`ash958`958`292`1916`yes`292`1`1`0`0%`0%`binary`rectangular`no`no`V. Askenazi`A. Curtis, I. Duff, J. Reid`1974`least squares problem`
13`HB`bcspwr01`39`39`131`yes`39`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
14`HB`bcspwr02`49`49`167`yes`49`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
15`HB`bcspwr03`118`118`476`yes`118`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
16`HB`bcspwr04`274`274`1612`yes`274`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
17`HB`bcspwr05`443`443`1623`yes`443`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
18`HB`bcspwr06`1454`1454`5300`yes`1454`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
19`HB`bcspwr07`1612`1612`5824`yes`1612`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
20`HB`bcspwr08`1624`1624`6050`yes`1624`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
21`HB`bcspwr09`1723`1723`6511`yes`1723`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
22`HB`bcspwr10`5300`5300`21842`yes`5300`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`B. Dembart, J. Lewis`I. Duff, R. Grimes, J. Lewis`1981`power network problem`
23`HB`bcsstk01`48`48`400`yes`48`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
24`HB`bcsstk02`66`66`4356`yes`66`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
25`HB`bcsstk03`112`112`640`yes`112`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
26`HB`bcsstk04`132`132`3648`yes`132`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
27`HB`bcsstk05`153`153`2423`yes`153`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
28`HB`bcsstk06`420`420`7860`yes`420`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
29`HB`bcsstk07`420`420`7860`yes`420`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`duplicate structural problem`\nduplicate of HB/bcsstk06\n
30`HB`bcsstk08`1074`1074`12960`yes`1074`4`4`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
31`HB`bcsstk09`1083`1083`18437`yes`1083`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
32`HB`bcsstk10`1086`1086`22070`yes`1086`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
33`HB`bcsstk11`1473`1473`34241`yes`1473`9`9`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
34`HB`bcsstk12`1473`1473`34241`yes`1473`9`9`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`duplicate structural problem`\nduplicate of HB/bcsstk11\n
35`HB`bcsstk13`2003`2003`83883`yes`2003`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
36`HB`bcsstk14`1806`1806`63454`yes`1806`41`41`0`symmetric`symmetric`real`symmetric`yes`yes`M. Will`I. Duff, R. Grimes, J. Lewis`1985`structural problem`
37`HB`bcsstk15`3948`3948`117816`yes`3948`7`7`0`symmetric`symmetric`real`symmetric`yes`yes`M. Will`I. Duff, R. Grimes, J. Lewis`1985`structural problem`
38`HB`bcsstk16`4884`4884`290378`yes`4884`75`75`0`symmetric`symmetric`real`symmetric`yes`yes`M. Will`I. Duff, R. Grimes, J. Lewis`1985`structural problem`
39`HB`bcsstk17`10974`10974`428650`yes`10974`519`519`0`symmetric`symmetric`real`symmetric`yes`yes`M. Will`I. Duff, R. Grimes, J. Lewis`1985`structural problem`
40`HB`bcsstk18`11948`11948`149090`yes`11948`792`792`0`symmetric`symmetric`real`symmetric`yes`yes`M. Will`I. Duff, R. Grimes, J. Lewis`1985`structural problem`
41`HB`bcsstk19`817`817`6853`yes`817`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
42`HB`bcsstk20`485`485`3135`yes`485`4`4`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
43`HB`bcsstk21`3600`3600`26600`yes`3600`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
44`HB`bcsstk22`138`138`696`yes`138`4`4`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
45`HB`bcsstk23`3134`3134`45178`yes`3134`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
46`HB`bcsstk24`3562`3562`159910`yes`3562`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
47`HB`bcsstk25`15439`15439`252241`yes`15439`13`13`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
48`HB`bcsstk26`1922`1922`30336`yes`1922`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Mera, R. Cigel, J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
49`HB`bcsstk27`1224`1224`56126`yes`1224`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Mera, R. Cigel, J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
50`HB`bcsstk28`4410`4410`219024`yes`4410`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Mera, R. Cigel, J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
51`HB`bcsstk29`13992`13992`619488`yes`13992`28`28`0`symmetric`symmetric`binary`symmetric`yes`no`R. Cigel, R. Grimes, J. Lewis, E. Meyer`I. Duff, R. Grimes, J. Lewis`1986`structural problem`
52`HB`bcsstk30`28924`28924`2043492`yes`28924`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Cigel, R. Grimes, J. Lewis, E. Meyer`I. Duff, R. Grimes, J. Lewis`1986`structural problem`
53`HB`bcsstk31`35588`35588`1181416`yes`35588`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`R. Cigel, R. Grimes, J. Lewis, E. Meyer`I. Duff, R. Grimes, J. Lewis`1986`structural problem`
54`HB`bcsstk32`44609`44609`2014701`yes`44609`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Cigel, R. Grimes, J. Lewis, E. Meyer`I. Duff, R. Grimes, J. Lewis`1986`structural problem`
55`HB`bcsstk33`8738`8738`591904`yes`8738`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Cigel, R. Grimes, J. Lewis, E. Meyer`I. Duff, R. Grimes, J. Lewis`1986`structural problem`
56`HB`bcsstm01`48`48`24`no`24`26`48`24`symmetric`symmetric`integer`symmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
57`HB`bcsstm02`66`66`66`yes`66`66`66`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
58`HB`bcsstm03`112`112`72`no`72`74`112`40`symmetric`symmetric`real`symmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
59`HB`bcsstm04`132`132`66`no`66`68`132`66`symmetric`symmetric`real`symmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
60`HB`bcsstm05`153`153`153`yes`153`153`153`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
61`HB`bcsstm06`420`420`420`yes`420`420`420`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
62`HB`bcsstm07`420`420`7252`yes`420`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
63`HB`bcsstm08`1074`1074`1074`yes`1074`1074`1074`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
64`HB`bcsstm09`1083`1083`1083`yes`1083`1083`1083`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
65`HB`bcsstm10`1086`1086`22092`yes`1086`2`2`0`symmetric`symmetric`real`symmetric`yes`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
66`HB`bcsstm11`1473`1473`1473`yes`1473`1473`1473`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
67`HB`bcsstm12`1473`1473`19659`yes`1473`10`10`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
68`HB`bcsstm13`2003`2003`21181`no`1241`574`1334`762`symmetric`symmetric`real`symmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
69`HB`bcsstm19`817`817`817`yes`817`817`817`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
70`HB`bcsstm20`485`485`485`yes`485`485`485`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
71`HB`bcsstm21`3600`3600`3600`yes`3600`3600`3600`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
72`HB`bcsstm22`138`138`138`yes`138`138`138`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
73`HB`bcsstm23`3134`3134`3134`yes`3134`3134`3134`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
74`HB`bcsstm24`3562`3562`3562`yes`3562`3562`3562`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
75`HB`bcsstm25`15439`15439`15439`yes`15439`15439`15439`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
76`HB`bcsstm26`1922`1922`1922`yes`1922`1922`1922`0`symmetric`symmetric`real`symmetric`yes`yes`A. Mera, R. Cigel, J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
77`HB`bcsstm27`1224`1224`56126`yes`1224`1`1`0`symmetric`symmetric`real`symmetric`yes`no`A. Mera, R. Cigel, J. Lewis`I. Duff, R. Grimes, J. Lewis`1984`structural problem`
78`HB`beacxc`497`506`50409`no`449`10`66`0`0%`0%`real`rectangular`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
79`HB`beaflw`497`507`53403`no`460`13`13`0`0%`0%`real`rectangular`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
80`HB`beause`497`507`44551`no`459`31`8`0`0%`0%`real`rectangular`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
81`HB`blckhole`2132`2132`14872`yes`2132`12`12`0`symmetric`symmetric`binary`symmetric`yes`no`E. Meyer`I. Duff, R. Grimes, J. Lewis`1983`structural problem`
82`HB`bp_0`822`822`3276`yes`822`822`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`optimization problem sequence`\nnext: HB/bp_200 first: HB/bp_0\n
83`HB`bp_1000`822`822`4661`yes`822`463`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_1200 first: HB/bp_0\n
84`HB`bp_1200`822`822`4726`yes`822`447`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_1400 first: HB/bp_0\n
85`HB`bp_1400`822`822`4790`yes`822`403`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_1600 first: HB/bp_0\n
86`HB`bp_1600`822`822`4841`yes`822`450`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: - first: HB/bp_0\n
87`HB`bp_200`822`822`3802`yes`822`673`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_400 first: HB/bp_0\n
88`HB`bp_400`822`822`4028`yes`822`591`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_600 first: HB/bp_0\n
89`HB`bp_600`822`822`4172`yes`822`537`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_800 first: HB/bp_0\n
90`HB`bp_800`822`822`4534`yes`822`492`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/bp_1000 first: HB/bp_0\n
91`HB`can_1054`1054`1054`12196`yes`1054`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
92`HB`can_1072`1072`1072`12444`yes`1072`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
93`HB`can_144`144`144`1296`yes`144`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
94`HB`can_161`161`161`1377`yes`161`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
95`HB`can_187`187`187`1491`yes`187`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
96`HB`can_229`229`229`1777`yes`229`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
97`HB`can_24`24`24`160`yes`24`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
98`HB`can_256`256`256`2916`yes`256`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
99`HB`can_268`268`268`3082`yes`268`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
100`HB`can_292`292`292`2540`yes`292`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
101`HB`can_445`445`445`3809`yes`445`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
102`HB`can_61`61`61`557`yes`61`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
103`HB`can_62`62`62`218`yes`62`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
104`HB`can_634`634`634`7228`yes`634`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
105`HB`can_715`715`715`6665`yes`715`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
106`HB`can_73`73`73`377`yes`73`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
107`HB`can_838`838`838`10010`yes`838`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
108`HB`can_96`96`96`768`yes`96`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`L. Marro`I. Duff, R. Grimes, J. Lewis`1981`structural problem`
109`HB`curtis54`54`54`291`yes`54`1`1`0`95%`95%`binary`unsymmetric`no`no`A. Curtis`A. Curtis, I. Duff, J. Reid`1971`2D/3D problem`
110`HB`dwt_1005`1005`1005`8621`yes`1005`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
111`HB`dwt_1007`1007`1007`8575`yes`1007`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
112`HB`dwt_1242`1242`1242`10426`yes`1242`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
113`HB`dwt_162`162`162`1182`yes`162`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
114`HB`dwt_193`193`193`3493`yes`193`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
115`HB`dwt_198`198`198`1392`yes`198`6`6`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
116`HB`dwt_209`209`209`1743`yes`209`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
117`HB`dwt_221`221`221`1629`yes`221`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
118`HB`dwt_234`234`234`834`yes`234`7`7`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
119`HB`dwt_245`245`245`1461`yes`245`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
120`HB`dwt_2680`2680`2680`25026`yes`2680`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
121`HB`dwt_307`307`307`2523`yes`307`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
122`HB`dwt_310`310`310`2448`yes`310`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
123`HB`dwt_346`346`346`3226`yes`346`4`4`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
124`HB`dwt_361`361`361`2953`yes`361`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
125`HB`dwt_419`419`419`3563`yes`419`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
126`HB`dwt_492`492`492`3156`yes`492`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
127`HB`dwt_503`503`503`6027`yes`503`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
128`HB`dwt_512`512`512`3502`yes`512`32`32`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
129`HB`dwt_59`59`59`267`yes`59`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
130`HB`dwt_592`592`592`5104`yes`592`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
131`HB`dwt_607`607`607`5131`yes`607`4`4`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
132`HB`dwt_66`66`66`320`yes`66`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
133`HB`dwt_72`72`72`222`yes`72`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
134`HB`dwt_758`758`758`5994`yes`758`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
135`HB`dwt_869`869`869`7285`yes`869`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
136`HB`dwt_87`87`87`541`yes`87`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
137`HB`dwt_878`878`878`7448`yes`878`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
138`HB`dwt_918`918`918`7384`yes`918`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
139`HB`dwt_992`992`992`16744`yes`992`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Everstine, D. Taylor`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
140`HB`eris1176`1176`1176`18552`yes`1176`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Erisman`A. Curtis, I. Duff, J. Reid`1973`power network problem`
141`HB`fs_183_1`183`183`998`yes`183`37`37`71`42%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`2D/3D problem sequence`\nnext: HB/fs_183_3 first: HB/fs_183_1\n
142`HB`fs_183_3`183`183`1069`yes`183`30`30`0`42%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: HB/fs_183_4 first: HB/fs_183_1\n
143`HB`fs_183_4`183`183`1069`yes`183`30`30`0`42%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: HB/fs_183_6 first: HB/fs_183_1\n
144`HB`fs_183_6`183`183`1000`yes`183`37`37`69`42%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: - first: HB/fs_183_1\n
145`HB`fs_541_1`541`541`4282`yes`541`2`2`3`68%`0%`real`unsymmetric`no`no`A. Curtis`A. Curtis, I. Duff, J. Reid`1978`2D/3D problem sequence`\nnext: HB/fs_541_2 first: HB/fs_541_1\n
146`HB`fs_541_2`541`541`4282`yes`541`2`2`3`68%`0%`real`unsymmetric`no`no`A. Curtis`A. Curtis, I. Duff, J. Reid`1978`subsequent 2D/3D problem`\nnext: HB/fs_541_3 first: HB/fs_541_1\n
147`HB`fs_541_3`541`541`4282`yes`541`2`2`3`68%`0%`real`unsymmetric`no`no`A. Curtis`A. Curtis, I. Duff, J. Reid`1978`subsequent 2D/3D problem`\nnext: HB/fs_541_4 first: HB/fs_541_1\n
148`HB`fs_541_4`541`541`4273`yes`541`2`2`12`68%`0%`real`unsymmetric`no`no`A. Curtis`A. Curtis, I. Duff, J. Reid`1978`subsequent 2D/3D problem`\nnext: - first: HB/fs_541_1\n
149`HB`fs_680_1`680`680`2184`yes`680`446`446`462`51%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`2D/3D problem sequence`\nnext: HB/fs_680_2 first: HB/fs_680_1\n
150`HB`fs_680_2`680`680`2424`yes`680`446`446`222`51%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: HB/fs_680_3 first: HB/fs_680_1\n
151`HB`fs_680_3`680`680`2471`yes`680`446`446`175`51%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: - first: HB/fs_680_1\n
152`HB`fs_760_1`760`760`5739`yes`760`17`17`237`65%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`2D/3D problem sequence`\nnext: HB/fs_760_2 first: HB/fs_760_1\n
153`HB`fs_760_2`760`760`5739`yes`760`17`17`237`65%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: HB/fs_760_3 first: HB/fs_760_1\n
154`HB`fs_760_3`760`760`5816`yes`760`17`17`160`65%`0%`real`unsymmetric`no`no`A. Curtis`I. Duff, R. Grimes, J. Lewis`1983`subsequent 2D/3D problem`\nnext: - first: HB/fs_760_1\n
155`HB`gemat1`4929`10595`46591`yes`4929`1`1`778`0%`0%`real`rectangular`no`no`R. Burchett`I. Duff, R. Grimes, J. Lewis`1984`power network problem`
156`HB`gemat11`4929`4929`33108`yes`4929`352`2`77`0%`0%`real`unsymmetric`no`no`R. Burchett`I. Duff, R. Grimes, J. Lewis`1984`power network problem sequence`\nnext: HB/gemat12 first: HB/gemat11\n
157`HB`gemat12`4929`4929`33044`yes`4929`378`2`67`0%`0%`real`unsymmetric`no`no`R. Burchett`I. Duff, R. Grimes, J. Lewis`1984`subsequent power network problem`\nnext: - first: HB/gemat11\n
158`HB`gent113`113`113`655`yes`113`18`18`0`6%`6%`binary`unsymmetric`no`no`W. Gentleman`A. Curtis, I. Duff, J. Reid`1973`statistical/mathematical problem`
159`HB`gr_30_30`900`900`7744`yes`900`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`R. Grimes`I. Duff, R. Grimes, J. Lewis`1983`2D/3D problem`
160`HB`gre_1107`1107`1107`5664`unknown`unknown`unknown`1`0`0%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
161`HB`gre_115`115`115`421`unknown`unknown`unknown`1`0`25%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
162`HB`gre_185`185`185`975`unknown`unknown`unknown`1`30`41%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
163`HB`gre_216a`216`216`812`unknown`unknown`unknown`1`64`0%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
164`HB`gre_216b`216`216`812`unknown`unknown`unknown`1`64`0%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
165`HB`gre_343`343`343`1310`unknown`unknown`unknown`1`125`0%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
166`HB`gre_512`512`512`1976`unknown`unknown`unknown`1`216`0%`0%`real`unsymmetric`no`no`F. Cachard`I. Duff, R. Grimes, J. Lewis`1981`directed weighted graph`
167`HB`hor_131`434`434`4182`unknown`unknown`unknown`1`528`symmetric`37%`real`unsymmetric`no`no`R. Hornby`I. Duff, R. Grimes, J. Lewis`1983`directed weighted graph`
168`HB`ibm32`32`32`126`unknown`unknown`unknown`1`0`9%`9%`binary`unsymmetric`no`no`IBM`A. Curtis, I. Duff, J. Reid`1971`directed graph`
169`HB`illc1033`1033`320`4719`yes`320`15`1`13`0%`0%`real`rectangular`no`no`M. Saunders`I. Duff, R. Grimes, J. Lewis`1979`least squares problem`
170`HB`illc1850`1850`712`8636`yes`712`10`1`122`0%`0%`real`rectangular`no`no`M. Saunders`I. Duff, R. Grimes, J. Lewis`1979`least squares problem`
171`HB`impcol_a`207`207`572`yes`207`164`4`0`2%`1%`real`unsymmetric`no`no`D. Bogle`I. Duff, R. Grimes, J. Lewis`1982`chemical process simulation problem`
172`HB`impcol_b`59`59`271`yes`59`19`1`41`9%`0%`real`unsymmetric`no`no`D. Bogle`I. Duff, R. Grimes, J. Lewis`1982`chemical process simulation problem`
173`HB`impcol_c`137`137`400`yes`137`115`18`11`4%`1%`real`unsymmetric`no`no`D. Bogle`I. Duff, R. Grimes, J. Lewis`1982`chemical process simulation problem`
174`HB`impcol_d`425`425`1255`yes`425`321`3`84`6%`2%`real`unsymmetric`no`no`D. Bogle`I. Duff, R. Grimes, J. Lewis`1982`chemical process simulation problem`
175`HB`impcol_e`225`225`1303`yes`225`151`17`5`10%`0%`real`unsymmetric`no`no`D. Bogle`I. Duff, R. Grimes, J. Lewis`1982`chemical process simulation problem`
176`HB`jagmesh1`936`936`6264`yes`936`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
177`HB`jagmesh2`1009`1009`6865`yes`1009`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
178`HB`jagmesh3`1089`1089`7361`yes`1089`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
179`HB`jagmesh4`1440`1440`9504`yes`1440`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
180`HB`jagmesh5`1180`1180`7750`yes`1180`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
181`HB`jagmesh6`1377`1377`8993`yes`1377`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
182`HB`jagmesh7`1138`1138`7450`yes`1138`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
183`HB`jagmesh8`1141`1141`7465`yes`1141`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
184`HB`jagmesh9`1349`1349`9101`yes`1349`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`2D/3D problem`
185`HB`jgl009`9`9`50`yes`9`1`1`0`48%`48%`binary`unsymmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1983`counter-example problem`
186`HB`jgl011`11`11`76`yes`11`1`1`0`52%`52%`binary`unsymmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1983`counter-example problem`
187`HB`jpwh_991`991`991`6027`yes`991`146`146`0`94%`94%`integer`unsymmetric`no`no`J. Whelan`I. Duff, R. Grimes, J. Lewis`1978`semiconductor device problem`
188`HB`lns_131`131`131`536`yes`131`65`48`0`70%`2%`real`unsymmetric`no`no`I. Jones`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
189`HB`lns_3937`3937`3937`25407`yes`3937`351`290`0`85%`0%`real`unsymmetric`no`no`I. Jones`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
190`HB`lns_511`511`511`2796`yes`511`135`98`0`80%`2%`real`unsymmetric`no`no`I. Jones`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
191`HB`lnsp3937`3937`3937`25407`yes`3937`351`290`0`85%`0%`real`unsymmetric`no`no`I. Jones`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
192`HB`lnsp_131`131`131`536`yes`131`65`48`0`70%`2%`real`unsymmetric`no`no`I. Jones`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
193`HB`lnsp_511`511`511`2796`yes`511`135`98`0`80%`2%`real`unsymmetric`no`no`I. Jones`I. Duff, R. Grimes, J. Lewis`1982`computational fluid dynamics problem`
194`HB`lshp1009`1009`1009`6865`yes`1009`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`duplicate thermal problem`\nduplicate of HB/jagmesh2\n
195`HB`lshp1270`1270`1270`8668`yes`1270`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
196`HB`lshp1561`1561`1561`10681`yes`1561`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
197`HB`lshp1882`1882`1882`12904`yes`1882`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
198`HB`lshp2233`2233`2233`15337`yes`2233`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
199`HB`lshp2614`2614`2614`17980`yes`2614`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
200`HB`lshp3025`3025`3025`20833`yes`3025`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
201`HB`lshp3466`3466`3466`23896`yes`3466`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
202`HB`lshp_265`265`265`1753`yes`265`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
203`HB`lshp_406`406`406`2716`yes`406`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
204`HB`lshp_577`577`577`3889`yes`577`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
205`HB`lshp_778`778`778`5272`yes`778`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. George`I. Duff, R. Grimes, J. Lewis`1978`thermal problem`
206`HB`lund_a`147`147`2449`yes`147`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`T. Johansson`A. Curtis, I. Duff, J. Reid`1974`structural problem`
207`HB`lund_b`147`147`2441`yes`147`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`T. Johansson`A. Curtis, I. Duff, J. Reid`1974`structural problem`
208`HB`mahindas`1258`1258`7682`yes`1258`670`1`0`2%`0%`real`unsymmetric`no`no`K. Pearson`I. Duff, R. Grimes, J. Lewis`1984`economic problem`
209`HB`mbeacxc`496`496`49920`no`448`10`54`0`32%`0%`real`unsymmetric`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
210`HB`mbeaflw`496`496`49920`no`448`10`54`0`32%`0%`real`unsymmetric`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
211`HB`mbeause`496`496`41063`no`447`28`66`0`22%`1%`real`unsymmetric`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
212`HB`mcca`180`180`2659`yes`180`6`6`0`64%`0%`real`unsymmetric`no`no`M. Carlsson`I. Duff, R. Grimes, J. Lewis`1985`2D/3D problem`
213`HB`mcfe`765`765`24382`yes`765`5`5`0`70%`0%`real`unsymmetric`no`no`M. Carlsson`I. Duff, R. Grimes, J. Lewis`1985`2D/3D problem`
214`HB`nnc1374`1374`1374`8588`yes`1374`57`1`18`82%`59%`real`unsymmetric`no`no`National Nuclear Corp.`I. Duff, R. Grimes, J. Lewis`1982`2D/3D problem`
215`HB`nnc261`261`261`1500`yes`261`29`1`0`82%`61%`real`unsymmetric`no`no`National Nuclear Corp.`I. Duff, R. Grimes, J. Lewis`1982`2D/3D problem`
216`HB`nnc666`666`666`4032`yes`666`41`1`12`82%`59%`real`unsymmetric`no`no`National Nuclear Corp.`I. Duff, R. Grimes, J. Lewis`1982`2D/3D problem`
217`HB`nos1`237`237`1017`yes`237`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
218`HB`nos2`957`957`4137`yes`957`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
219`HB`nos3`960`960`15844`yes`960`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
220`HB`nos4`100`100`594`yes`100`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
221`HB`nos5`468`468`5172`yes`468`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`structural problem`
222`HB`nos6`675`675`3255`yes`675`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`2D/3D problem`
223`HB`nos7`729`729`4617`yes`729`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`I. Duff, R. Grimes, J. Lewis`1982`2D/3D problem`
224`HB`orani678`2529`2529`90158`yes`2529`700`1`0`7%`0%`real`unsymmetric`no`no`K. Pearson`I. Duff, R. Grimes, J. Lewis`1984`economic problem`
225`HB`orsirr_1`1030`1030`6858`yes`1030`1`1`0`symmetric`41%`real`unsymmetric`no`no`R. Grimes`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
226`HB`orsirr_2`886`886`5970`yes`886`1`1`0`symmetric`41%`real`unsymmetric`no`no`R. Grimes`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
227`HB`orsreg_1`2205`2205`14133`yes`2205`1`1`0`symmetric`41%`real`unsymmetric`no`no`R. Grimes`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
228`HB`plat1919`1919`1919`32399`yes`1919`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1975`2D/3D problem`
229`HB`plat362`362`362`5786`yes`362`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lewis`I. Duff, R. Grimes, J. Lewis`1975`2D/3D problem`
230`HB`plsk1919`1919`1919`9662`yes`1919`11`1`0`symmetric`0%`real`skew-symmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1975`2D/3D problem`
231`HB`plskz362`362`362`1760`yes`362`3`1`0`symmetric`0%`real`skew-symmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1975`2D/3D problem`
232`HB`pores_1`30`30`180`yes`30`1`1`0`63%`29%`real`unsymmetric`no`no`J. Appleyard`I. Duff, R. Grimes, J. Lewis`1980`computational fluid dynamics problem`
233`HB`pores_2`1224`1224`9613`yes`1224`1`1`0`61%`39%`real`unsymmetric`no`no`J. Appleyard`I. Duff, R. Grimes, J. Lewis`1980`computational fluid dynamics problem`
234`HB`pores_3`532`532`3474`yes`532`2`2`0`74%`31%`real`unsymmetric`no`no`J. Appleyard`I. Duff, R. Grimes, J. Lewis`1980`computational fluid dynamics problem`
235`HB`psmigr_1`3140`3140`543160`yes`3140`1`1`2`48%`1%`integer`unsymmetric`no`no`P. Slater`I. Duff, R. Grimes, J. Lewis`1983`economic problem`
236`HB`psmigr_2`3140`3140`540022`yes`3140`1`1`0`48%`0%`real`unsymmetric`no`no`P. Slater`I. Duff, R. Grimes, J. Lewis`1983`economic problem`
237`HB`psmigr_3`3140`3140`543160`yes`3140`1`1`2`48%`0%`real`unsymmetric`no`no`P. Slater`I. Duff, R. Grimes, J. Lewis`1983`economic problem`
238`HB`rgg010`10`10`76`yes`10`1`1`0`64%`64%`binary`unsymmetric`no`no`J. Lewis`I. Duff, R. Grimes, J. Lewis`1983`counter-example problem`
239`HB`saylr1`238`238`1128`yes`238`1`1`0`symmetric`65%`real`unsymmetric`no`no`R. Kendall, D. Peaceman, H. Stone, W. Watts`P. Saylor`1984`computational fluid dynamics problem`
240`HB`saylr3`1000`1000`3750`yes`1000`318`318`0`symmetric`symmetric`real`symmetric`no`no`R. Kendall, D. Peaceman, H. Stone, W. Watts`P. Saylor`1984`computational fluid dynamics problem`
241`HB`saylr4`3564`3564`22316`yes`3564`1`1`0`symmetric`symmetric`real`symmetric`no`no`R. Kendall, D. Peaceman, H. Stone, W. Watts`P. Saylor`1984`computational fluid dynamics problem`
242`HB`sherman1`1000`1000`3750`yes`1000`318`318`0`symmetric`symmetric`real`symmetric`no`no`A. Sherman`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
243`HB`sherman2`1080`1080`23094`yes`1080`211`211`0`67%`0%`real`unsymmetric`no`no`A. Sherman`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
244`HB`sherman3`5005`5005`20033`yes`5005`2111`2111`0`symmetric`45%`real`unsymmetric`no`no`A. Sherman`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
245`HB`sherman4`1104`1104`3786`yes`1104`559`559`0`symmetric`0%`real`unsymmetric`no`no`A. Sherman`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
246`HB`sherman5`3312`3312`20793`yes`3312`1675`1675`0`74%`15%`real`unsymmetric`no`no`A. Sherman`I. Duff, R. Grimes, J. Lewis`1984`computational fluid dynamics problem`
247`HB`shl_0`663`663`1687`yes`663`663`4`0`0%`0%`integer`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`optimization problem sequence`\nnext: HB/shl_200 first: HB/shl_0\n
248`HB`shl_200`663`663`1726`yes`663`663`4`0`0%`0%`integer`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/shl_400 first: HB/shl_0\n
249`HB`shl_400`663`663`1712`yes`663`663`2`0`0%`0%`integer`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: - first: HB/shl_0\n
250`HB`sstmodel`3345`3345`22749`yes`3345`616`616`0`symmetric`symmetric`binary`symmetric`yes`no`E. Meyer`I. Duff, R. Grimes, J. Lewis`1983`structural problem`
251`HB`steam1`240`240`2248`yes`240`1`1`1514`symmetric`27%`real`unsymmetric`no`no`R. Grimes`I. Duff, R. Grimes, J. Lewis`1983`computational fluid dynamics problem`
252`HB`steam2`600`600`5660`yes`600`151`151`8100`symmetric`19%`real`unsymmetric`no`no`R. Grimes`I. Duff, R. Grimes, J. Lewis`1983`computational fluid dynamics problem`
253`HB`steam3`80`80`314`yes`80`21`21`614`symmetric`32%`real`unsymmetric`no`no`R. Grimes`I. Duff, R. Grimes, J. Lewis`1983`computational fluid dynamics problem`
254`HB`str_0`363`363`2454`yes`363`363`2`0`0%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`optimization problem sequence`\nnext: HB/str_200 first: HB/str_0\n
255`HB`str_200`363`363`3068`yes`363`234`2`0`1%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/str_400 first: HB/str_0\n
256`HB`str_400`363`363`3157`yes`363`203`2`0`2%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: HB/str_600 first: HB/str_0\n
257`HB`str_600`363`363`3279`yes`363`142`2`0`2%`0%`real`unsymmetric`no`no`M. Saunders`A. Curtis, I. Duff, J. Reid`1978`subsequent optimization problem`\nnext: - first: HB/str_0\n
258`HB`watt_1`1856`1856`11360`yes`1856`129`129`0`99%`99%`real`unsymmetric`no`no`J. Somerville`I. Duff, R. Grimes, J. Lewis`1983`computational fluid dynamics problem`
259`HB`watt_2`1856`1856`11550`yes`1856`65`65`0`98%`97%`real`unsymmetric`no`no`J. Somerville`I. Duff, R. Grimes, J. Lewis`1983`computational fluid dynamics problem`
260`HB`well1033`1033`320`4732`yes`320`15`1`0`0%`0%`real`rectangular`no`no`M. Saunders`I. Duff, R. Grimes, J. Lewis`1979`least squares problem`
261`HB`well1850`1850`712`8755`yes`712`10`1`3`0%`0%`real`rectangular`no`no`M. Saunders`I. Duff, R. Grimes, J. Lewis`1979`least squares problem`
262`HB`west0067`67`67`294`yes`67`2`1`0`3%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
263`HB`west0132`132`132`413`yes`132`56`2`1`2%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
264`HB`west0156`156`156`362`yes`156`134`1`9`0%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
265`HB`west0167`167`167`506`yes`167`91`1`1`2%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
266`HB`west0381`381`381`2134`yes`381`6`1`23`1%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
267`HB`west0479`479`479`1888`yes`479`166`2`22`1%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
268`HB`west0497`497`497`1721`yes`497`294`2`6`1%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
269`HB`west0655`655`655`2808`yes`655`198`2`46`1%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
270`HB`west0989`989`989`3518`yes`989`270`2`19`2%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
271`HB`west1505`1505`1505`5414`yes`1505`405`1`31`0%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
272`HB`west2021`2021`2021`7310`yes`2021`522`1`43`0%`0%`real`unsymmetric`no`no`A. Westerberg`I. Duff, R. Grimes, J. Lewis`1983`chemical process simulation problem`
273`HB`will199`199`199`701`yes`199`10`1`0`6%`6%`binary`unsymmetric`no`no`R. Willoughby`I. Duff, R. Grimes, J. Lewis`1979`structural problem`
274`HB`will57`57`57`281`yes`57`1`1`0`87%`87%`binary`unsymmetric`no`no`R. Willoughby`I. Duff, R. Grimes, J. Lewis`1970`semiconductor device problem`
275`HB`wm1`207`277`2909`yes`207`50`29`0`0%`0%`real`rectangular`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
276`HB`wm2`207`260`2942`yes`207`36`4`0`0%`0%`real`rectangular`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
277`HB`wm3`207`260`2948`yes`207`28`4`0`0%`0%`real`rectangular`no`no`D. Szyld`I. Duff, R. Grimes, J. Lewis`1982`economic problem`
278`HB`young1c`841`841`4089`yes`841`1`1`0`symmetric`85%`complex`unsymmetric`no`no`D. Young`I. Duff, R. Grimes, J. Lewis`1984`acoustics problem`\nThe YOUNG*C matrices originally appeared in the Harwell/Boeing     \ncollection as type CSA (complex symmetric).  However, both upper   \nand lower triangular parts are present in the original files       \n(an invalid specification; only the lower part can be present      \nin the file).  If the entries in the upper triangular part are     \nconsidered as part of the matrix, the matrices become unsymmetric. \nThe matrices have been corrected in the UF Sparse Matrix Collection\nby changing their type to CUA so that the entries in the original  \nfiles are not ignored.  In addition, the YOUNG3C matrix has a zero \nimaginary part, and thus appears here as a real matrix.            \n
279`HB`young2c`841`841`4089`yes`841`1`1`0`symmetric`85%`complex`unsymmetric`no`no`D. Young`I. Duff, R. Grimes, J. Lewis`1984`duplicate acoustics problem`\nduplicate of HB/young1c\n
280`HB`young3c`841`841`3988`yes`841`1`1`0`94%`81%`real`unsymmetric`no`no`D. Young`I. Duff, R. Grimes, J. Lewis`1984`acoustics problem`\nThe YOUNG*C matrices originally appeared in the Harwell/Boeing     \ncollection as type CSA (complex symmetric).  However, both upper   \nand lower triangular parts are present in the original files       \n(an invalid specification; only the lower part can be present      \nin the file).  If the entries in the upper triangular part are     \nconsidered as part of the matrix, the matrices become unsymmetric. \nThe matrices have been corrected in the UF Sparse Matrix Collection\nby changing their type to CUA so that the entries in the original  \nfiles are not ignored.  In addition, the YOUNG3C matrix has a zero \nimaginary part, and thus appears here as a real matrix.            \n
281`HB`young4c`841`841`4089`yes`841`1`1`0`symmetric`80%`complex`unsymmetric`no`no`D. Young`I. Duff, R. Grimes, J. Lewis`1984`acoustics problem`\nThe YOUNG*C matrices originally appeared in the Harwell/Boeing     \ncollection as type CSA (complex symmetric).  However, both upper   \nand lower triangular parts are present in the original files       \n(an invalid specification; only the lower part can be present      \nin the file).  If the entries in the upper triangular part are     \nconsidered as part of the matrix, the matrices become unsymmetric. \nThe matrices have been corrected in the UF Sparse Matrix Collection\nby changing their type to CUA so that the entries in the original  \nfiles are not ignored.  In addition, the YOUNG3C matrix has a zero \nimaginary part, and thus appears here as a real matrix.            \n
282`HB`zenios`2873`2873`1314`no`266`84`2650`25877`symmetric`symmetric`real`symmetric`no`no`S. Zenios`I. Duff, R. Grimes, J. Lewis`1985`optimization problem`
283`ATandT`onetone1`36057`36057`335552`yes`36057`3843`203`5536`7%`4%`real`unsymmetric`no`no`R. Melville, D. Long`T. Davis`2001`frequency-domain circuit simulation problem`
284`ATandT`onetone2`36057`36057`222596`yes`36057`3843`203`5032`11%`7%`real`unsymmetric`no`no`R. Melville, D. Long`T. Davis`2001`frequency-domain circuit simulation problem`
285`ATandT`pre2`659033`659033`5834044`yes`659033`29282`391`125238`33%`7%`real`unsymmetric`no`no`R. Melville, D. Long`T. Davis`2001`frequency-domain circuit simulation problem`
286`ATandT`twotone`120750`120750`1206265`yes`120750`13135`5`17959`24%`11%`real`unsymmetric`no`no`R. Melville, D. Long`T. Davis`2001`frequency-domain circuit simulation problem`
287`Averous`epb0`1794`1794`7764`yes`1794`1`1`0`50%`0%`real`unsymmetric`no`no`D. Averous`T. Davis`1998`thermal problem`
288`Averous`epb1`14734`14734`95053`yes`14734`1`1`0`73%`0%`real`unsymmetric`no`no`D. Averous`T. Davis`1998`thermal problem`
289`Averous`epb2`25228`25228`175027`yes`25228`1`1`0`67%`0%`real`unsymmetric`no`no`D. Averous`T. Davis`1998`thermal problem`
290`Averous`epb3`84617`84617`463625`yes`84617`1`1`0`67%`3%`real`unsymmetric`no`no`D. Averous`T. Davis`1998`thermal problem`
291`Bai`af23560`23560`23560`460598`yes`23560`1`1`23658`100%`0%`real`unsymmetric`no`no`A. Mahajan`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`computational fluid dynamics problem`
292`Bai`bfwa398`398`398`3678`yes`398`2`2`0`99%`94%`real`unsymmetric`no`no`B. Schultz, S. Gedney`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
293`Bai`bfwa62`62`62`450`yes`62`2`2`0`97%`81%`real`unsymmetric`no`no`B. Schultz, S. Gedney`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
294`Bai`bfwa782`782`782`7514`yes`782`2`2`0`99%`96%`real`unsymmetric`no`no`B. Schultz, S. Gedney`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
295`Bai`bfwb398`398`398`2910`yes`398`2`2`0`symmetric`symmetric`real`symmetric`no`no`B. Schultz, S. Gedney`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
296`Bai`bfwb62`62`62`342`yes`62`2`2`0`symmetric`symmetric`real`symmetric`no`no`B. Schultz, S. Gedney`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
297`Bai`bfwb782`782`782`5982`yes`782`2`2`0`symmetric`symmetric`real`symmetric`no`no`B. Schultz, S. Gedney`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
298`Bai`bwm200`200`200`796`yes`200`1`1`0`symmetric`66%`real`unsymmetric`no`no`Y. Saad`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`chemical process simulation problem`
299`Bai`bwm2000`2000`2000`7996`yes`2000`1`1`0`symmetric`67%`real`unsymmetric`no`no`Y. Saad`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`chemical process simulation problem`
300`Bai`cdde1`961`961`4681`yes`961`1`1`0`symmetric`0%`real`unsymmetric`no`no`author unknown`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`computational fluid dynamics problem sequence`\nnext: Bai/cdde2 first: Bai/cdde1\n
301`Bai`cdde2`961`961`4681`yes`961`1`1`0`symmetric`0%`real`unsymmetric`no`no`author unknown`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`subsequent computational fluid dynamics problem`\nnext: Bai/cdde3 first: Bai/cdde1\n
302`Bai`cdde3`961`961`4681`yes`961`1`1`0`symmetric`0%`real`unsymmetric`no`no`author unknown`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`subsequent computational fluid dynamics problem`\nnext: Bai/cdde4 first: Bai/cdde1\n
303`Bai`cdde4`961`961`4681`yes`961`1`1`0`symmetric`0%`real`unsymmetric`no`no`author unknown`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`subsequent computational fluid dynamics problem`\nnext: Bai/cdde5 first: Bai/cdde1\n
304`Bai`cdde5`961`961`4681`yes`961`1`1`0`symmetric`0%`real`unsymmetric`no`no`author unknown`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`subsequent computational fluid dynamics problem`\nnext: Bai/cdde6 first: Bai/cdde1\n
305`Bai`cdde6`961`961`4681`yes`961`1`1`0`symmetric`0%`real`unsymmetric`no`no`author unknown`Z. Bai, D. Day, J. Demmel, J. Dongarra`1992`subsequent computational fluid dynamics problem`\nnext: - first: Bai/cdde1\n
306`Bai`ck104`104`104`992`yes`104`2`2`0`symmetric`0%`real`unsymmetric`no`no`J. Cullum`Z. Bai, D. Day, J. Demmel, J. Dongarra`1986`2D/3D problem`
307`Bai`ck400`400`400`2860`yes`400`2`2`0`99%`0%`real`unsymmetric`no`no`J. Cullum`Z. Bai, D. Day, J. Demmel, J. Dongarra`1986`2D/3D problem`
308`Bai`ck656`656`656`3884`yes`656`2`2`0`99%`0%`real`unsymmetric`no`no`J. Cullum`Z. Bai, D. Day, J. Demmel, J. Dongarra`1986`2D/3D problem`
309`Bai`dw1024`2048`2048`10114`yes`2048`1`1`0`98%`95%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
310`Bai`dw256A`512`512`2480`yes`512`1`1`0`98%`91%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
311`Bai`dw256B`512`512`2500`yes`512`1`1`0`97%`88%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
312`Bai`dw4096`8192`8192`41746`yes`8192`1`1`0`96%`92%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
313`Bai`lop163`163`163`935`yes`163`1`1`0`45%`0%`real`unsymmetric`no`no`W. Stewart`Z. Bai, D. Day, J. Demmel, J. Dongarra`1978`statistical/mathematical problem`
314`Bai`mhda416`416`416`8562`yes`416`8`8`0`77%`27%`real`unsymmetric`no`no`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
315`Bai`mhdb416`416`416`2312`yes`416`14`14`0`symmetric`symmetric`real`symmetric`yes`yes`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
316`Bai`odepa400`400`400`1201`yes`400`1`1`0`100%`99%`real`unsymmetric`no`no`G. Stewart`Z. Bai, D. Day, J. Demmel, J. Dongarra`1978`2D/3D problem`
317`Bai`odepb400`400`400`399`no`399`401`400`0`symmetric`symmetric`real`symmetric`no`no`G. Stewart`Z. Bai, D. Day, J. Demmel, J. Dongarra`1978`2D/3D problem`
318`Bai`olm100`100`100`396`yes`100`1`1`0`67%`33%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
319`Bai`olm1000`1000`1000`3996`yes`1000`1`1`0`67%`33%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
320`Bai`olm2000`2000`2000`7996`yes`2000`1`1`0`67%`33%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
321`Bai`olm500`500`500`1996`yes`500`1`1`0`67%`33%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
322`Bai`olm5000`5000`5000`19996`yes`5000`1`1`0`67%`33%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
323`Bai`pde225`225`225`1065`yes`225`1`1`0`symmetric`50%`real`unsymmetric`no`no`H. Elman`Z. Bai, D. Day, J. Demmel, J. Dongarra`1982`2D/3D problem`
324`Bai`pde2961`2961`2961`14585`yes`2961`1`1`0`symmetric`50%`real`unsymmetric`no`no`H. Elman`Z. Bai, D. Day, J. Demmel, J. Dongarra`1982`2D/3D problem`
325`Bai`pde900`900`900`4380`yes`900`1`1`0`symmetric`50%`real`unsymmetric`no`no`H. Elman`Z. Bai, D. Day, J. Demmel, J. Dongarra`1982`2D/3D problem`
326`Bai`qc2534`2534`2534`463360`yes`2534`1`1`0`symmetric`0%`complex`symmetric`no`no`S. Chu`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`electromagnetics problem`
327`Bai`qc324`324`324`26730`yes`324`1`1`0`symmetric`0%`complex`symmetric`no`no`S. Chu`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`electromagnetics problem`
328`Bai`qh882`882`882`3354`yes`882`43`1`0`93%`0%`real`unsymmetric`no`no`D. Ndereyimana`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`power network problem`
329`Bai`rbsa480`480`480`17088`yes`480`1`1`0`7%`0%`integer`unsymmetric`no`no`H. Ren`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`robotics problem`
330`Bai`rbsb480`480`480`17088`yes`480`1`1`0`8%`0%`integer`unsymmetric`no`no`H. Ren`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`robotics problem`
331`Bai`rdb2048`2048`2048`12032`yes`2048`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`\nThis matrix (Bai/rdb2048) is the same as the original NEP RDB2048L\nmatrix (as of Nov 2006).  Either the name changed since 1996 and  \nthe L was added in the NEP collection, or the L was dropped when  \nthe matrix as added to the UF Sparse Matrix Collection in 1996.   \nThe name cannot be corrected here without disrupting the UF Sparse\nMatrix Collection.  To make matters worse, there is now a matrix  \nin the NEP collection with the name RDB2048, as of Nov 2006.  The \nNEP RDB2048 matrix was added to this collection in Nov 2006, as   \nBai/rdb2038_noL matrix.                                           \n
332`Bai`rdb5000`5000`5000`29600`yes`5000`1`1`0`symmetric`80%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
333`Bai`rdb968`968`968`5632`yes`968`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
334`Bai`rw136`136`136`479`yes`136`6`1`0`44%`3%`real`unsymmetric`no`no`G. Stewart`Z. Bai, D. Day, J. Demmel, J. Dongarra`1978`statistical/mathematical problem`
335`Bai`rw496`496`496`1859`yes`496`6`1`0`47%`0%`real`unsymmetric`no`no`G. Stewart`Z. Bai, D. Day, J. Demmel, J. Dongarra`1978`statistical/mathematical problem`
336`Bai`rw5151`5151`5151`20199`yes`5151`6`1`0`49%`0%`real`unsymmetric`no`no`G. Stewart`Z. Bai, D. Day, J. Demmel, J. Dongarra`1978`statistical/mathematical problem`
337`Bai`tub100`100`100`396`yes`100`1`1`0`symmetric`0%`real`unsymmetric`no`no`K. Meerbergen, D. Roose`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
338`Bai`tub1000`1000`1000`3996`yes`1000`1`1`0`symmetric`0%`real`unsymmetric`no`no`K. Meerbergen, D. Roose`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
339`Boeing`bcsstk34`588`588`21418`yes`588`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
340`Boeing`bcsstk35`30237`30237`1450163`yes`30237`1`1`0`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`1995`structural problem`
341`Boeing`bcsstk36`23052`23052`1143140`yes`23052`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
342`Boeing`bcsstk37`25503`25503`1140977`yes`25503`1`1`0`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`1995`structural problem`
343`Boeing`bcsstk38`8032`8032`355460`yes`8032`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
344`Boeing`bcsstm34`588`588`24270`yes`588`1`1`0`symmetric`symmetric`real`symmetric`no`no`R. Grimes`T. Davis`1995`structural problem`
345`Boeing`bcsstm35`30237`30237`20619`no`15803`14796`29228`0`symmetric`symmetric`real`symmetric`no`no`R. Grimes`T. Davis`1995`structural problem`
346`Boeing`bcsstm36`23052`23052`320606`no`12172`3`10881`0`symmetric`symmetric`real`symmetric`no`no`R. Grimes`T. Davis`1995`structural problem`
347`Boeing`bcsstm37`25503`25503`15525`no`14005`13572`25068`0`symmetric`symmetric`real`symmetric`no`no`R. Grimes`T. Davis`1995`structural problem`
348`Boeing`bcsstm38`8032`8032`10485`no`5199`3825`6656`0`symmetric`symmetric`real`symmetric`no`no`R. Grimes`T. Davis`1995`structural problem`
349`Boeing`bcsstm39`46772`46772`46772`yes`46772`46772`46772`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
350`Boeing`crystk01`4875`4875`315891`yes`4875`1`1`0`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`1995`materials problem`
351`Boeing`crystk02`13965`13965`968583`yes`13965`1`1`0`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`1995`materials problem`
352`Boeing`crystk03`24696`24696`1751178`yes`24696`1`1`0`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`1995`materials problem`
353`Boeing`crystm01`4875`4875`105339`yes`4875`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`materials problem`
354`Boeing`crystm02`13965`13965`322905`yes`13965`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`materials problem`
355`Boeing`crystm03`24696`24696`583770`yes`24696`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`materials problem`
356`Boeing`ct20stif`52329`52329`2600295`yes`52329`1`1`98168`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
357`Boeing`msc00726`726`726`34518`yes`726`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
358`Boeing`msc01050`1050`1050`26198`yes`1050`1`1`2958`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
359`Boeing`msc01440`1440`1440`44998`yes`1440`1`1`1272`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
360`Boeing`msc04515`4515`4515`97707`yes`4515`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
361`Boeing`msc10848`10848`10848`1229776`yes`10848`1`1`2`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
362`Boeing`msc23052`23052`23052`1142686`yes`23052`1`1`12128`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
363`Boeing`nasa1824`1824`1824`39208`yes`1824`1`1`0`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`1995`duplicate structural problem`\nLet A1=Nasa/nasa1824 and A2=Boeing/nasa1824.  A1 and A2 have the same \nnonzero pattern.  A1 and A2 differ in value in only 386 entries out of\n39208, and only in 21 columns of the lower triangular part;           \ntril(A(196:321196:216)) and the same rows of the upper triangular    \npart.  The magnitudes of the entries in A2 in this region of the      \nmatrix are all tiny, and have only 9 digits if printed in base-10     \n(unlike the other entries, which have full precision).  I suspect A2  \n(Boeing/nasa1824) is a corrupted version of A1 (Nasa/nasa1824).       \n
364`Boeing`nasa2910`2910`2910`174296`yes`2910`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Grimes`T. Davis`1995`duplicate structural problem`\nBoeing/nasa2910 is the nonzero pattern of Nasa/nasa2910.\n
365`Boeing`nasa4704`4704`4704`104756`yes`4704`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Grimes`T. Davis`1995`duplicate structural problem`\nBoeing/nasa4704 is the nonzero pattern of Nasa/nasa4704.\n
366`Boeing`pcrystk02`13965`13965`968583`yes`13965`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Grimes`T. Davis`1995`duplicate materials problem`\nThis matrix is the nonzero pattern of Boeing/crystk02\n
367`Boeing`pcrystk03`24696`24696`1751178`yes`24696`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Grimes`T. Davis`1995`duplicate materials problem`\nThis matrix is the nonzero pattern of Boeing/crystk03\n
368`Boeing`pct20stif`52329`52329`2698463`yes`52329`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Grimes`T. Davis`1995`structural problem`
369`Boeing`pwtk`217918`217918`11524432`yes`217918`1`1`109992`symmetric`symmetric`real`symmetric`yes`yes`R. Grimes`T. Davis`1995`structural problem`
370`Bomhof`circuit_1`2624`2624`35823`yes`2624`60`6`0`100%`21%`real`unsymmetric`no`no`W. Bomhof`T. Davis`2000`circuit simulation problem`
371`Bomhof`circuit_2`4510`4510`21199`yes`4510`3249`3231`0`81%`42%`real`unsymmetric`no`no`W. Bomhof`T. Davis`2000`circuit simulation problem`
372`Bomhof`circuit_3`12127`12127`48137`yes`12127`4521`4399`0`77%`30%`real`unsymmetric`no`no`W. Bomhof`T. Davis`2000`circuit simulation problem`
373`Bomhof`circuit_4`80209`80209`307604`yes`80209`28005`27923`0`83%`36%`real`unsymmetric`no`no`W. Bomhof`T. Davis`2000`circuit simulation problem`
374`Bova`rma10`46835`46835`2329092`yes`46835`8`8`44909`symmetric`24%`real`unsymmetric`no`no`S. Bova`T. Davis`1997`computational fluid dynamics problem`
375`Brethour`coater1`1348`1348`19457`no`1331`85`262`0`59%`40%`real`unsymmetric`no`no`J. Brethour`T. Davis`1997`computational fluid dynamics problem`
376`Brethour`coater2`9540`9540`207308`no`9434`207`382`0`59%`13%`real`unsymmetric`no`no`J. Brethour`T. Davis`1997`computational fluid dynamics problem`
377`Brunetiere`thermal`3456`3456`66528`yes`3456`1`1`0`symmetric`7%`real`unsymmetric`no`no`N. Brunetiere`T. Davis`2000`thermal problem`
378`Cote`mplate`5962`5962`142190`yes`5962`1`1`0`symmetric`5%`complex`symmetric`no`no`A. Cote`T. Davis`1997`acoustics problem`
379`Cote`vibrobox`12328`12328`301700`yes`12328`1`1`41128`symmetric`symmetric`real`symmetric`yes`no`A. Cote`T. Davis`1997`acoustics problem`
380`DRIVCAV`cavity01`317`317`7280`yes`317`82`82`47`80%`52%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`computational fluid dynamics problem sequence`\nnext: DRIVCAV/cavity02 first: DRIVCAV/cavity01\n
381`DRIVCAV`cavity02`317`317`5923`yes`317`82`82`1404`80%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity03 first: DRIVCAV/cavity01          \npattern is the same as the transpose of DRIVCAV/cavity01\n
382`DRIVCAV`cavity03`317`317`7311`yes`317`82`82`16`80%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity04 first: DRIVCAV/cavity01\npattern is the same as DRIVCAV/cavity01       \n
383`DRIVCAV`cavity04`317`317`5923`yes`317`82`82`1404`80%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: - first: DRIVCAV/cavity01                         \npattern is the same as the transpose of DRIVCAV/cavity01\n
384`DRIVCAV`cavity05`1182`1182`32632`yes`1182`162`162`115`90%`61%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`computational fluid dynamics problem sequence`\nnext: DRIVCAV/cavity06 first: DRIVCAV/cavity05\n
385`DRIVCAV`cavity06`1182`1182`29675`yes`1182`162`162`3072`90%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity07 first: DRIVCAV/cavity05          \npattern is the same as the transpose of DRIVCAV/cavity05\n
386`DRIVCAV`cavity07`1182`1182`32702`yes`1182`162`162`45`90%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity08 first: DRIVCAV/cavity05\npattern is the same as DRIVCAV/cavity05       \n
387`DRIVCAV`cavity08`1182`1182`29675`yes`1182`162`162`3072`90%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity09 first: DRIVCAV/cavity05          \npattern is the same as the transpose of DRIVCAV/cavity05\n
388`DRIVCAV`cavity09`1182`1182`32702`yes`1182`162`162`45`90%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: - first: DRIVCAV/cavity05        \npattern is the same as DRIVCAV/cavity05\n
389`DRIVCAV`cavity10`2597`2597`76171`yes`2597`242`242`196`94%`64%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`computational fluid dynamics problem sequence`\nnext: DRIVCAV/cavity11 first: DRIVCAV/cavity10\n
390`DRIVCAV`cavity11`2597`2597`71601`yes`2597`242`242`4766`94%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity12 first: DRIVCAV/cavity10          \npattern is the same as the transpose of DRIVCAV/cavity10\n
391`DRIVCAV`cavity12`2597`2597`76258`yes`2597`242`242`109`94%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity13 first: DRIVCAV/cavity10\npattern is the same as DRIVCAV/cavity10       \n
392`DRIVCAV`cavity13`2597`2597`71601`yes`2597`242`242`4766`94%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity14 first: DRIVCAV/cavity10          \npattern is the same as the transpose of DRIVCAV/cavity10\n
393`DRIVCAV`cavity14`2597`2597`76258`yes`2597`242`242`109`94%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity15 first: DRIVCAV/cavity10\npattern is the same as DRIVCAV/cavity10       \n
394`DRIVCAV`cavity15`2597`2597`71601`yes`2597`242`242`4766`94%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: - first: DRIVCAV/cavity10                         \npattern is the same as the transpose of DRIVCAV/cavity10\n
395`DRIVCAV`cavity16`4562`4562`137887`yes`4562`322`322`300`95%`65%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`computational fluid dynamics problem sequence`\nnext: DRIVCAV/cavity17 first: DRIVCAV/cavity16\n
396`DRIVCAV`cavity17`4562`4562`131735`yes`4562`322`322`6452`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity18 first: DRIVCAV/cavity16          \npattern is the same as the transpose of DRIVCAV/cavity16\n
397`DRIVCAV`cavity18`4562`4562`138040`yes`4562`322`322`147`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity19 first: DRIVCAV/cavity16\npattern is the same as DRIVCAV/cavity16       \n
398`DRIVCAV`cavity19`4562`4562`131735`yes`4562`322`322`6452`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity20 first: DRIVCAV/cavity16          \npattern is the same as the transpose of DRIVCAV/cavity16\n
399`DRIVCAV`cavity20`4562`4562`138040`yes`4562`322`322`147`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity21 first: DRIVCAV/cavity16\npattern is the same as DRIVCAV/cavity16       \n
400`DRIVCAV`cavity21`4562`4562`131735`yes`4562`322`322`6452`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity22 first: DRIVCAV/cavity16          \npattern is the same as the transpose of DRIVCAV/cavity16\n
401`DRIVCAV`cavity22`4562`4562`138040`yes`4562`322`322`147`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity23 first: DRIVCAV/cavity16\npattern is the same as DRIVCAV/cavity16       \n
402`DRIVCAV`cavity23`4562`4562`131735`yes`4562`322`322`6452`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity24 first: DRIVCAV/cavity16          \npattern is the same as the transpose of DRIVCAV/cavity16\n
403`DRIVCAV`cavity24`4562`4562`138040`yes`4562`322`322`147`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity25 first: DRIVCAV/cavity16\npattern is the same as DRIVCAV/cavity16       \n
404`DRIVCAV`cavity25`4562`4562`131735`yes`4562`322`322`6452`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: DRIVCAV/cavity26 first: DRIVCAV/cavity16          \npattern is the same as the transpose of DRIVCAV/cavity16\n
405`DRIVCAV`cavity26`4562`4562`138040`yes`4562`322`322`147`95%`0%`real`unsymmetric`no`no`A. Chapman`A. Baggag, Y. Saad`1996`subsequent computational fluid dynamics problem`\nnext: - first: DRIVCAV/cavity16        \npattern is the same as DRIVCAV/cavity16\n
406`FIDAP`ex1`216`216`4317`yes`216`1`1`35`symmetric`100%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
407`FIDAP`ex10`2410`2410`54840`yes`2410`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
408`FIDAP`ex10hs`2548`2548`57308`yes`2548`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
409`FIDAP`ex11`16614`16614`1096948`yes`16614`1`1`0`symmetric`100%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
410`FIDAP`ex12`3973`3973`79077`yes`3973`1`1`1134`symmetric`symmetric`real`symmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
411`FIDAP`ex13`2568`2568`75628`yes`2568`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
412`FIDAP`ex14`3251`3251`65875`yes`3251`1`1`900`symmetric`symmetric`real`symmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
413`FIDAP`ex15`6867`6867`98671`yes`6867`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
414`FIDAP`ex18`5773`5773`71701`yes`5773`212`212`104`symmetric`50%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
415`FIDAP`ex19`12005`12005`259577`yes`12005`607`607`302`symmetric`43%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
416`FIDAP`ex2`441`441`26839`yes`441`1`1`0`symmetric`symmetric`real`symmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
417`FIDAP`ex20`2203`2203`67830`yes`2203`1`1`2151`symmetric`97%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
418`FIDAP`ex21`656`656`18964`yes`656`1`1`180`symmetric`94%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
419`FIDAP`ex22`839`839`22460`yes`839`1`1`255`symmetric`89%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
420`FIDAP`ex23`1409`1409`42760`yes`1409`1`1`943`symmetric`94%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
421`FIDAP`ex24`2283`2283`47901`yes`2283`1`1`836`symmetric`86%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
422`FIDAP`ex25`848`848`24369`yes`848`1`1`243`symmetric`98%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
423`FIDAP`ex26`2163`2163`74464`yes`2163`2`2`19569`symmetric`73%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
424`FIDAP`ex27`974`974`37652`yes`974`2`1`3130`symmetric`53%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
425`FIDAP`ex28`2603`2603`77031`yes`2603`1`1`750`symmetric`99%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
426`FIDAP`ex29`2870`2870`23754`yes`2870`180`180`0`symmetric`100%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
427`FIDAP`ex3`1821`1821`52685`yes`1821`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
428`FIDAP`ex31`3909`3909`91223`yes`3909`2`2`24134`symmetric`73%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
429`FIDAP`ex32`1159`1159`11047`yes`1159`2`2`296`symmetric`symmetric`real`symmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
430`FIDAP`ex33`1733`1733`22189`yes`1733`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
431`FIDAP`ex35`19716`19716`227872`yes`19716`342`342`336`symmetric`46%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
432`FIDAP`ex36`3079`3079`53099`yes`3079`3`3`744`symmetric`100%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
433`FIDAP`ex37`3565`3565`67591`yes`3565`1652`1652`0`symmetric`95%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
434`FIDAP`ex4`1601`1601`31849`yes`1601`1`1`450`symmetric`symmetric`real`symmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
435`FIDAP`ex40`7740`7740`456188`yes`7740`1`1`1824`symmetric`77%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
436`FIDAP`ex5`27`27`279`yes`27`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
437`FIDAP`ex6`1651`1651`49062`yes`1651`13`1`471`symmetric`98%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
438`FIDAP`ex7`1633`1633`46626`yes`1633`2`2`7917`symmetric`82%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
439`FIDAP`ex8`3096`3096`90841`yes`3096`2`2`15503`symmetric`43%`real`unsymmetric`no`no`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
440`FIDAP`ex9`3363`3363`99471`yes`3363`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Baggag, Y. Saad`A. Baggag, Y. Saad`1994`computational fluid dynamics problem`
441`Gaertner`big`13209`13209`91465`unknown`unknown`unknown`1`0`symmetric`100%`integer`unsymmetric`no`no`K. Gaertner`F. Grund`2001`directed weighted graph`
442`Gaertner`nopoly`10774`10774`70842`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`yes`no`K. Gaertner`F. Grund`2001`undirected weighted graph`
443`Gaertner`pesa`11738`11738`79566`unknown`unknown`unknown`1`0`symmetric`100%`integer`unsymmetric`no`no`K. Gaertner`F. Grund`2001`directed weighted graph`
444`Garon`garon1`3175`3175`84723`yes`3175`1`1`4204`symmetric`67%`real`unsymmetric`no`no`A. Garon`T. Davis`1996`computational fluid dynamics problem`
445`Garon`garon2`13535`13535`373235`yes`13535`1`1`17372`symmetric`67%`real`unsymmetric`no`no`A. Garon`T. Davis`1996`computational fluid dynamics problem`
446`Goodwin`goodwin`7320`7320`324772`yes`7320`2`2`12`64%`0%`real`unsymmetric`no`no`R. Goodwin`T. Davis`1995`computational fluid dynamics problem`
447`Goodwin`rim`22560`22560`1014951`yes`22560`2`2`0`64%`0%`real`unsymmetric`no`no`R. Goodwin`T. Davis`1995`computational fluid dynamics problem`
448`Graham`graham1`9035`9035`335472`yes`9035`478`474`32`72%`0%`real`unsymmetric`no`no`D. Graham`T. Davis`1998`computational fluid dynamics problem`
449`Grund`b1_ss`7`7`15`yes`7`1`1`0`0%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`chemical process simulation problem`
450`Grund`b2_ss`1089`1089`3895`yes`1089`249`1`333`1%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`chemical process simulation problem`
451`Grund`b_dyn`1089`1089`4144`yes`1089`164`1`120`1%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`chemical process simulation problem`
452`Grund`bayer01`57735`57735`275094`yes`57735`9133`1`2680`0%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
453`Grund`bayer02`13935`13935`63307`yes`13935`2226`1`372`0%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
454`Grund`bayer03`6747`6747`29195`yes`6747`2419`1`27001`0%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
455`Grund`bayer04`20545`20545`85537`yes`20545`8168`6`73545`0%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
456`Grund`bayer05`3268`3268`20712`yes`3268`3037`1`7124`1%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
457`Grund`bayer06`3008`3008`20715`yes`3008`1273`1`6861`1%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
458`Grund`bayer07`3268`3268`20963`yes`3268`3037`1`6873`1%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
459`Grund`bayer08`3008`3008`20698`yes`3008`1273`1`6878`1%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
460`Grund`bayer09`3083`3083`11767`yes`3083`1872`2`9449`2%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
461`Grund`bayer10`13436`13436`71594`yes`13436`2545`1`23332`0%`0%`real`unsymmetric`no`no`Bayer`F. Grund`1997`chemical process simulation problem`
462`Grund`d_dyn`87`87`230`yes`87`19`1`8`8%`2%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`chemical process simulation problem`
463`Grund`d_dyn1`87`87`232`yes`87`17`1`6`8%`2%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`chemical process simulation problem`
464`Grund`d_ss`53`53`144`yes`53`1`1`5`4%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`chemical process simulation problem`
465`Grund`meg1`2904`2904`58142`yes`2904`929`1`0`0%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`circuit simulation problem`
466`Grund`meg4`5860`5860`25258`yes`5860`1412`1318`21584`symmetric`symmetric`real`symmetric`no`no`F. Grund`F. Grund`1997`circuit simulation problem`
467`Grund`poli`4008`4008`8188`yes`4008`3943`3943`0`3%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`economic problem`
468`Grund`poli_large`15575`15575`33033`yes`15575`15466`15466`41`0%`0%`real`unsymmetric`no`no`F. Grund`F. Grund`1997`economic problem`
469`Gset`G1`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
470`Gset`G10`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
471`Gset`G11`800`800`3200`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
472`Gset`G12`800`800`3200`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
473`Gset`G13`800`800`3200`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
474`Gset`G14`800`800`9388`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G18\n
475`Gset`G15`800`800`9322`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G19\n
476`Gset`G16`800`800`9344`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G20\n
477`Gset`G17`800`800`9334`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G21\n
478`Gset`G18`800`800`9388`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
479`Gset`G19`800`800`9322`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
480`Gset`G2`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
481`Gset`G20`800`800`9344`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
482`Gset`G21`800`800`9334`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
483`Gset`G22`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
484`Gset`G23`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
485`Gset`G24`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
486`Gset`G25`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
487`Gset`G26`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
488`Gset`G27`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
489`Gset`G28`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
490`Gset`G29`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
491`Gset`G3`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
492`Gset`G30`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
493`Gset`G31`2000`2000`39980`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
494`Gset`G32`2000`2000`8000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
495`Gset`G33`2000`2000`8000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
496`Gset`G34`2000`2000`8000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
497`Gset`G35`2000`2000`23556`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G39\n
498`Gset`G36`2000`2000`23532`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G40\n
499`Gset`G37`2000`2000`23570`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G41\n
500`Gset`G38`2000`2000`23558`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G42\n
501`Gset`G39`2000`2000`23556`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
502`Gset`G4`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
503`Gset`G40`2000`2000`23532`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
504`Gset`G41`2000`2000`23570`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
505`Gset`G42`2000`2000`23558`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
506`Gset`G43`1000`1000`19980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
507`Gset`G44`1000`1000`19980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
508`Gset`G45`1000`1000`19980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
509`Gset`G46`1000`1000`19980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
510`Gset`G47`1000`1000`19980`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
511`Gset`G48`3000`3000`12000`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
512`Gset`G49`3000`3000`12000`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
513`Gset`G5`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
514`Gset`G50`3000`3000`12000`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
515`Gset`G51`1000`1000`11818`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
516`Gset`G52`1000`1000`11832`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
517`Gset`G53`1000`1000`11828`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
518`Gset`G54`1000`1000`11832`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected random graph`
519`Gset`G55`5000`5000`24996`unknown`unknown`unknown`32`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G56\n
520`Gset`G56`5000`5000`24996`unknown`unknown`unknown`32`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
521`Gset`G57`5000`5000`20000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
522`Gset`G58`5000`5000`59140`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G59\n
523`Gset`G59`5000`5000`59140`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
524`Gset`G6`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
525`Gset`G60`7000`7000`34296`unknown`unknown`unknown`45`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G61\n
526`Gset`G61`7000`7000`34296`unknown`unknown`unknown`45`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
527`Gset`G62`7000`7000`28000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
528`Gset`G63`7000`7000`82918`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Helmberg`Y. Ye`1996`duplicate undirected random graph`\nThis matrix is the nonzero pattern of Gset/G64\n
529`Gset`G64`7000`7000`82918`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
530`Gset`G65`8000`8000`32000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
531`Gset`G66`9000`9000`36000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
532`Gset`G67`10000`10000`40000`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
533`Gset`G7`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
534`Gset`G8`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
535`Gset`G9`800`800`38352`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`C. Helmberg`Y. Ye`1996`undirected weighted random graph`
536`Gupta`gupta1`31802`31802`2164210`yes`31802`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Gupta`T. Davis`1996`optimization problem`
537`Gupta`gupta2`62064`62064`4248286`yes`62064`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Gupta`T. Davis`1996`optimization problem`
538`Gupta`gupta3`16783`16783`9323427`yes`16783`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Gupta`T. Davis`1996`optimization problem`
539`Hamm`add20`2395`2395`13151`yes`2395`1`1`4168`symmetric`53%`real`unsymmetric`no`no`S. Hamm`T. Davis`1991`circuit simulation problem`
540`Hamm`add32`4960`4960`19848`yes`4960`1`1`4036`symmetric`31%`real`unsymmetric`no`no`S. Hamm`T. Davis`1991`circuit simulation problem`
541`Hamm`bcircuit`68902`68902`375558`yes`68902`1`1`0`symmetric`91%`real`unsymmetric`no`no`S. Hamm`T. Davis`2001`circuit simulation problem`
542`Hamm`hcircuit`105676`105676`513072`yes`105676`1420`1359`0`100%`20%`real`unsymmetric`no`no`S. Hamm`T. Davis`2001`circuit simulation problem`
543`Hamm`memplus`17758`17758`99147`yes`17758`23`23`27003`symmetric`50%`real`unsymmetric`no`no`S. Hamm`T. Davis`1991`circuit simulation problem`
544`Hamm`scircuit`170998`170998`958936`yes`170998`153`48`0`100%`80%`real`unsymmetric`no`no`S. Hamm`T. Davis`2001`circuit simulation problem`
545`Hollinger`g7jac010`2880`2880`18229`yes`2880`177`107`1406`7%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
546`Hollinger`g7jac010sc`2880`2880`18229`yes`2880`177`107`1406`7%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
547`Hollinger`g7jac020`5850`5850`42568`yes`5850`317`177`2897`6%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
548`Hollinger`g7jac020sc`5850`5850`42568`yes`5850`317`177`2897`6%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
549`Hollinger`g7jac040`11790`11790`107383`yes`11790`597`317`7288`5%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
550`Hollinger`g7jac040sc`11790`11790`107383`yes`11790`597`317`7288`5%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
551`Hollinger`g7jac050sc`14760`14760`145157`yes`14760`737`387`12833`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
552`Hollinger`g7jac060`17730`17730`183325`yes`17730`877`457`19991`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
553`Hollinger`g7jac060sc`17730`17730`183325`yes`17730`877`457`19991`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
554`Hollinger`g7jac080`23670`23670`259648`yes`23670`1157`597`34328`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
555`Hollinger`g7jac080sc`23670`23670`259648`yes`23670`1157`597`34328`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
556`Hollinger`g7jac100`29610`29610`335972`yes`29610`1437`737`48664`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
557`Hollinger`g7jac100sc`29610`29610`335972`yes`29610`1437`737`48664`4%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
558`Hollinger`g7jac120`35550`35550`412306`yes`35550`1717`877`62990`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
559`Hollinger`g7jac120sc`35550`35550`412306`yes`35550`1717`877`62990`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
560`Hollinger`g7jac140`41490`41490`488633`yes`41490`1997`1017`77323`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
561`Hollinger`g7jac140sc`41490`41490`488633`yes`41490`1997`1017`77323`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
562`Hollinger`g7jac160`47430`47430`564952`yes`47430`2277`1157`91664`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
563`Hollinger`g7jac160sc`47430`47430`564952`yes`47430`2277`1157`91664`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
564`Hollinger`g7jac180`53370`53370`641290`yes`53370`2557`1297`105986`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
565`Hollinger`g7jac180sc`53370`53370`641290`yes`53370`2557`1297`105986`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
566`Hollinger`g7jac200`59310`59310`717620`yes`59310`2837`1437`120316`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
567`Hollinger`g7jac200sc`59310`59310`717620`yes`59310`2837`1437`120316`3%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
568`Hollinger`jan99jac020`6774`6774`33744`yes`6774`1311`1291`4948`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
569`Hollinger`jan99jac020sc`6774`6774`33744`yes`6774`1311`1291`4948`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
570`Hollinger`jan99jac040`13694`13694`72734`yes`13694`1934`1914`10108`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
571`Hollinger`jan99jac040sc`13694`13694`72734`yes`13694`1934`1914`10108`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
572`Hollinger`jan99jac060`20614`20614`111903`yes`20614`2774`2754`15279`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
573`Hollinger`jan99jac060sc`20614`20614`111903`yes`20614`2774`2754`15279`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
574`Hollinger`jan99jac080`27534`27534`151063`yes`27534`3614`3594`20459`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
575`Hollinger`jan99jac080sc`27534`27534`151063`yes`27534`3614`3594`20459`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
576`Hollinger`jan99jac100`34454`34454`190224`yes`34454`4450`4430`25638`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
577`Hollinger`jan99jac100sc`34454`34454`190224`yes`34454`4450`4430`25638`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
578`Hollinger`jan99jac120`41374`41374`229385`yes`41374`5292`5272`30817`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
579`Hollinger`jan99jac120sc`41374`41374`229385`yes`41374`5292`5272`30817`0%`0%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
580`Hollinger`mark3jac020`9129`9129`52883`yes`9129`321`321`3292`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
581`Hollinger`mark3jac020sc`9129`9129`52883`yes`9129`321`321`3292`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
582`Hollinger`mark3jac040`18289`18289`106803`yes`18289`641`641`6632`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
583`Hollinger`mark3jac040sc`18289`18289`106803`yes`18289`641`641`6632`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
584`Hollinger`mark3jac060`27449`27449`160723`yes`27449`961`961`9972`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
585`Hollinger`mark3jac060sc`27449`27449`160723`yes`27449`961`961`9972`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
586`Hollinger`mark3jac080`36609`36609`214643`yes`36609`1281`1281`13312`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
587`Hollinger`mark3jac080sc`36609`36609`214643`yes`36609`1281`1281`13312`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
588`Hollinger`mark3jac100`45769`45769`268563`yes`45769`1601`1601`16652`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
589`Hollinger`mark3jac100sc`45769`45769`268563`yes`45769`1601`1601`16652`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
590`Hollinger`mark3jac120`54929`54929`322483`yes`54929`1921`1921`19992`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
591`Hollinger`mark3jac120sc`54929`54929`322483`yes`54929`1921`1921`19992`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
592`Hollinger`mark3jac140`64089`64089`376395`yes`64089`2241`2241`23340`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
593`Hollinger`mark3jac140sc`64089`64089`376395`yes`64089`2241`2241`23340`7%`1%`real`unsymmetric`no`no`P. Hollinger`T. Davis`2001`economic problem`
594`LPnetlib`lp_25fv47`821`1876`10705`no`820`29`3`0`0%`0%`real`rectangular`no`no`J. Reid`D. Gay`1978`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n                                                                              \n------------------------------------------------------------------------------\nThis LP problem is the source of nine sparse matrices in the Harwell/Boeing   \nsparse matrix collection: BP_0, BP_200, BP_400, BP_600, BP_800, BP_1000,      \nBP_1200, BP_1400, and BP_1600.  Those nine matrices are square, nonsingular   \nbasis matrices that occured during the solution of 25FV47 (also called BP     \nor BP1).                                                                      \n------------------------------------------------------------------------------\n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \n25FV47      822   1571    11127      70477        5.5018458883E+03            \n                                                                              \nFrom John Reid.  Problem 25FV47 is sometimes called BP or BP1.                \n                                                                              \nBob Bixby reports that the CPLEX solver (running on a Sparc station)          \nfinds slightly different optimal values for some of the problems.             \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of             \nDecember 1989) also finds different optimal values for some of the            \nproblems.  The following table shows the values that differ from those        \nshown above.  (Whether CPLEX finds different values on the recently           \nadded problems remains to be seen.)                                           \n                                                                              \nProblem        CPLEX(Sparc)          MINOS(MIPS)                              \n25FV47                            5.5018467791E+03                            \n                                                                              \n
595`LPnetlib`lp_80bau3b`2262`12061`23264`yes`2262`26`154`0`0%`0%`real`rectangular`no`no`W. Kurator, H. Greenberg`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \n80BAU3B    2263   9799    29063     298952  B     9.8723216072E+05        \n                                                                          \n        BOUND-TYPE TABLE                                                  \n80BAU3B    UP LO FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nWhen included in Netlib: Extra free rows omitted.                         \n                                                                          \nSource: W. Kurator and Harvey Greenberg, Energy Information               \nAdministration (Greenberg is now at the Univ. of Colorado - Denver).      \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \n80BAU3B      9.8722419241E+05     9.8722952818E+05                        \n
596`LPnetlib`lp_adlittle`56`138`424`yes`56`2`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nADLITTLE     57     97      465       3690        2.2549496316E+05            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  2. ADLITTLE    57    97    465  2.2549496E+05       123   1.3    98   1.1   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
597`LPnetlib`lp_afiro`27`51`102`yes`27`1`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nAFIRO        28     32       88        794       -4.6475314286E+02            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  1. AFIRO       28    32     88 -4.6475314E+02         6   0.5     6   0.5   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
598`LPnetlib`lp_agg`488`615`2862`yes`488`1`1`0`0%`0%`real`rectangular`no`no`R. Leachman`M. Resende`1988`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nAGG         489    163     2541      21865       -3.5991767287E+07        \n                                                                          \nProvided by Mauricio Resende.  Formulated by R. C. Leachman.              \nAdded to Netlib on 6 May 1988                                             \n                                                                          \n
599`LPnetlib`lp_agg2`516`758`4740`yes`516`1`1`0`0%`0%`real`rectangular`no`no`R. Leachman`M. Resende`1988`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nAGG2        517    302     4515      32552       -2.0239252356E+07        \n                                                                          \nProvided by Mauricio Resende.  Formulated by R. C. Leachman.              \nAdded to Netlib on 6 May 1988                                             \n
600`LPnetlib`lp_agg3`516`758`4756`yes`516`1`1`0`0%`0%`real`rectangular`no`no`R. Leachman`M. Resende`1988`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nAGG3        517    302     4531      32570        1.0312115935E+07        \n                                                                          \nProvided by Mauricio Resende.  Formulated by R. C. Leachman.              \nAdded to Netlib on 6 May 1988                                             \n
601`LPnetlib`lp_bandm`305`472`2494`yes`305`48`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nBANDM       306    472     2659      19460       -1.5862801845E+02            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n 10. BANDM      306   472   2659 -1.5862802E+02       362   7.6   534  10.0   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
602`LPnetlib`lp_beaconfd`173`295`3408`yes`173`34`6`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nBEACONFD    174    262     3476      17475        3.3592485807E+04            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Extra right-hand side vectors omitted.               \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  5. BEACONFD   174   262   3476  3.3592486E+04        38   1.9    39   1.8   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
603`LPnetlib`lp_blend`74`114`522`yes`74`1`1`0`0%`0%`real`rectangular`no`no`N. Gould`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                      \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	 send index from lp                                                        \n	 send readme from lp/data                                                  \n                                                                            \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):  \n                                                                            \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude    \nslack and surplus columns and the right-hand side vector, but include       \nthe cost row.  We have omitted other free rows and all but the first        \nright-hand side vector, as noted below.  The byte count is for the          \nMPS compressed file; it includes a newline character at the end of each     \nline.  These files start with a blank initial line intended to prevent      \nmail programs from discarding any of the data.  The BR column indicates     \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R       \nfor \"has ranges\".                                                           \n                                                                            \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                 \nrunning on a VAX with default options.                                      \n                                                                            \n                       PROBLEM SUMMARY TABLE                                \n                                                                            \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value           \nBLEND        75     83      521       3227       -3.0812149846E+01          \n                                                                            \nNick Gould supplied BLEND from the Harwell collection of LP test problems.  \n                                                                            \nConcerning the problems he supplied, Nick Gould says that BLEND \"is         \na variant of the [oil refinery] problem in Murtagh's book (the              \ncoefficients are different) which I understand John Reid obtained           \nfrom the people at NPL (Gill and Murray?); they were also the original      \nsources for the SC problems\"                                                \n                                                                            \nAdded to Netlib on 6 April 1989                                             \n                                                                            \n
604`LPnetlib`lp_bnl1`643`1586`5532`no`642`12`12`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nBNL1        644   1175     6129      42473        1.9776292856E+03        \n                                                                          \nFrom John Tomlin.                                                         \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nBNL1         1.9776295615E+03     1.9776293385E+03                        \n                                                                          \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     BNL1      1614    169   10.47                                        \n                                                                          \nAdded to Netlib on 30 Oct. 1989                                           \n                                                                          \n
605`LPnetlib`lp_bnl2`2324`4486`14996`yes`2324`60`104`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nBNL2       2325   3489    16124     127145        1.8112365404E+03        \n                                                                          \nFrom John Tomlin.                                                         \n                                                                          \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     BNL2      4914    906   18.44                                        \n                                                                          \nAdded to Netlib on 30 Oct. 1989                                           \n
606`LPnetlib`lp_bore3d`233`334`1448`no`232`42`21`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nBORE3D      234    315     1525      13160  B     1.3730803942E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nBORE3D     UP LO FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: consulting.                                                       \nEmpty RHS section.                                                        \n                                                                          \nWhen included in Netlib: Extra free rows omitted.                         \n                                                                          \n
607`LPnetlib`lp_brandy`220`303`2202`no`193`58`40`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nBRANDY      221    249     2150      14028        1.5185098965E+03            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Extra right-hand side vectors omitted.               \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  7. BRANDY     221   249   2150  1.5185099E+03       292   4.9   377   5.9   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
608`LPnetlib`lp_capri`271`482`1896`yes`271`17`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types           \npresent in those problems that have bounds.                                   \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nCAPRI       272    353     1786      15267  B     2.6900129138E+03            \n                                                                              \n        BOUND-TYPE TABLE                                                      \nCAPRI      UP    FX FR                                                        \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  9. CAPRI      272   353   1786  2.6900129E+03       273   4.4   235   3.9   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
609`LPnetlib`lp_cre_a`3516`7248`18168`no`3428`8`89`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nCRE-A      3517    4067     19054        0    152726    659682   2.3595407e+07\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
610`LPnetlib`lp_cre_b`9648`77137`260785`no`7240`6`2409`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nCRE-B      9649   72447    328542        0   2119719  10478735   2.3129640e+07\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
611`LPnetlib`lp_cre_c`3068`6411`15977`no`2986`17`83`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nCRE-C      3069    3678     16922        0    135315    587817   2.5275116e+07\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
612`LPnetlib`lp_cre_d`8926`73948`246614`no`6476`22`2451`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\n                                                                              \nCRE-A      3517    4067     19054        0    152726    659682   2.3595407e+07\nCRE-B      9649   72447    328542        0   2119719  10478735   2.3129640e+07\nCRE-C      3069    3678     16922        0    135315    587817   2.5275116e+07\nCRE-D      8927   69980    312626        0   2022105   9964196   2.4454970e+07\nKEN-07     2427    3602     11981     7204    150525    718748  -6.7952044e+08\nKEN-11    14695   21349     70354    42698    928171   4167698  -6.9723823e+09\nKEN-13    28633   42659    139834    85318   1836457   8254122  -1.0257395e+10\nKEN-18   105128  154699    512719   309398   7138893  29855000  -5.2217025e+10\nOSA-07     1119   23949    167643        0   1059475   5388666   5.3572252e+05\nOSA-14     2338   52460    367220        0   2359656  11800249   1.1064628e+06\nOSA-30     4351  100024    700160        0   4470876  22495351   2.1421399e+06\nOSA-60    10281  232966   1630758        0  10377094  52402461   4.0440725e+06\nPDS-02     2954    7535     21252     2134    197821    801690   2.8857862e+10\nPDS-06     9882   28655     82269     9240    769564   3124272   2.7761038e+10\nPDS-10    16559   48763    140063    16148   1313834   5331274   2.6727095e+10\nPDS-20    33875  105728    304153    34888   2856653  11550890   2.3821659e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
613`LPnetlib`lp_cycle`1903`3371`21234`no`1875`98`29`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nCYCLE      1904   2857    21322     166648  B    -5.2263930249E+00        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nCYCLE      UP       FR                                                    \n                                                                          \nEmpty RHS section.                                                        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     CYCLE     3156   1485   47.05                                        \n                                                                          \nAdded to Netlib on 27 June 1989                                           \n
614`LPnetlib`lp_czprob`929`3562`10708`yes`929`193`5`0`0%`0%`real`rectangular`no`no`J. Reid`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nCZPROB      930   3523    14173      92202  B     2.1851966989E+06        \n                                                                          \n         BOUND-TYPE TABLE                                                 \nCZPROB           FX                                                       \n                                                                          \nFrom John Reid.  Previously named \"GUB\".                                  \n
615`LPnetlib`lp_d2q06c`2171`5831`33081`yes`2171`11`1`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nD2Q06C     2172   5167    35674     258038        1.2278423615E+05        \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nD2Q06C                            1.2278423521E+05                        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     D2Q06C   42417   4223    9.96                                        \n                                                                          \nAdded to Netlib on  30 Oct. 1989                                          \n
616`LPnetlib`lp_d6cube`415`6184`37704`no`404`3`12`0`0%`0%`integer`rectangular`no`no`R. Hughes`D. Gay`1993`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nD6CUBE      416   6184    43888     167633  B     3.1549166667E+02        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nD6CUBE        LO                                                          \n                                                                          \nSupplied by Robert Hughes.                                                \n                                                                          \nOf D6CUBE, Robert Hughes says, \"Mike Anderson and I are working on the    \nproblem of finding the minimum cardinality of triangulations of the       \n6-dimensional cube.  The optimal objective value of the problem I sent    \nyou provides a lower bound for the cardinalities of all triangulations    \nwhich contain a certain simplex of volume 8/6! and which contains the     \ncentroid of the 6-cube in its interior.  The linear programming           \nproblem is not easily described.\"                                         \n                                                                          \nAdded to Netlib on 26 March 1993                                          \n
617`LPnetlib`lp_degen2`444`757`4201`yes`444`1`1`0`0%`0%`integer`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nDEGEN2      445    534     4449      24657       -1.4351780000E+03        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     DEGEN2    1075    610   56.74                                        \n                                                                          \nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nAdded to Netlib on  30 Oct. 1989                                          \n
618`LPnetlib`lp_degen3`1503`2604`25432`yes`1503`1`1`0`0%`0%`integer`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nDEGEN3     1504   1818    26230     130252       -9.8729400000E+02        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     DEGEN3    6283   3299   52.51                                        \n                                                                          \nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nAdded to Netlib on  30 Oct. 1989                                          \n
619`LPnetlib`lp_dfl001`6071`12230`35632`yes`6071`1`1`0`0%`0%`real`rectangular`no`no`M. Meketon`D. Gay`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nDFL001     6072  12230    41873     353192  B     1.12664E+07 **          \n                                                                          \n        BOUND-TYPE TABLE                                                  \nDFL001     UP                                                             \n                                                                          \nSubmitted by Marc Meketon.                                                \n                                                                          \nDFL001, says Marc Meketon, \"is a 'real-world' airline schedule planning   \n(fleet assignment) problem.  This LP was preprocessed by a modified       \nversion of the KORBX(r) System preprocessor.  The problem reduced in      \nsize (rows, columns, non-zeros) significantly.  The row and columns were  \nrandomly sorted and renamed, and a fixed adjustment to the objective      \nfunction was eliminated.  The name of the problem is derived from the     \ninitials of the person who created it.\"                                   \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nDFL001       1.1266396047E+07            **                               \n                                                                          \nDavid Gay reports:                                                        \n** On an IEEE-arithmetic machine (an SGI 4D/380S), I (dmg) succeeded in   \ngetting MINOS 5.3 to report optimal objective values, 1.1261702419E+07    \nand 1.1249281428E+07, for DFL001 only by starting with LOAD files         \nderived from the solution obtained on the same machine by Bob             \nVanderbei's ALPO (an interior-point code); starting from one of the       \nresulting \"optimal\" bases, MINOS ran 23914 iterations on a VAX before     \nreporting an optimal value of 1.1253287141E+07.  When started from the    \nsame LOAD file used on the SGI machine, MINOS on the VAX reported an      \noptimal value of 1.1255107696E+07.  Changing the FEASIBILITY TOLERANCE    \nto 1.E-10 (from its default of 1.E-6) led MINOS on the SGI machine to     \nreport \"optimal\" values of 1.1266408461E+07 and 1.1266402835E+07.  This   \nclearly is a problem where the FEASIBILITY TOLERANCE, initial basis, and  \nfloating-point arithmetic strongly affect the \"optimal\" solution that     \nMINOS reports.  On the SGI machine, ALPO with SPLIT 3 found               \n primal:  obj value =  1.126639607e+07      FEASIBLE   ( 2.79e-09 )       \n dual:    obj value =  1.126639604e+07      FEASIBLE   ( 1.39e-16 )       \n                                                                          \nBob Bixby reports the following about his experience solving DFL001       \nwith CPLEX:                                                               \n  First, the value for the objective function that I get running          \n  defaults is 1.1266396047e+07, with the following residuals:             \n                                                                          \n  Max. unscaled (scaled) bound        infeas.: 4.61853e-14 (2.30926e-14)  \n  Max. unscaled (scaled) reduced-cost infeas.: 6.40748e-08 (6.40748e-08)  \n  Max. unscaled (scaled) Ax-b          resid.: 4.28546e-14 (4.28546e-14)  \n  Max. unscaled (scaled) c_B-B'pi      resid.: 8.00937e-08 (8.00937e-08)  \n                                                                          \n  The L_infinity condition number of the (scaled) optimal basis is        \n  213737.  I got exactly the same objective value solving the problem in  \n  several different ways.  I played a bit trying to get a better          \n  reduced-cost infeasibility, but that seems hopeless (if not pointless)  \n  given the c-Bpi residuals.                                              \n                                                                          \n  Just as an aside, this problem exhibits very interesting behavior when  \n  solved using a simplex method.  I ran reduced-cost pricing on it in     \n  phase I, with the result that it took 465810 iterations to get          \n  feasible.  Running the default CPLEX pricing scheme, the entire         \n  problem solved in 94337 iterations (33059 in phase I) on a              \n  Sparcstation.  Steepest-edge pricing (and a different scaling) took     \n  25803 iterations.  This is a nasty problem.                             \n                                                                          \n                                                                          \nAdded to Netlib on  11 Oct. 1990                                          \n9 Jan. 1991: Bixby's remarks about DFL001 added to lp/data/readme.        \n                                                                          \n
620`LPnetlib`lp_e226`223`472`2768`yes`223`4`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nE226        224    282     2767      17749       -1.8751929066E+01            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Extra free rows omitted.                             \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  8. E226       226   282   3038 -1.8751929E+01       570   9.4   471   7.5   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
621`LPnetlib`lp_etamacro`400`816`2537`yes`400`1`2`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types           \npresent in those problems that have bounds.                                   \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nETAMACRO    401    688     2489      21915  B    -7.5571521774E+02            \n                                                                              \n        BOUND-TYPE TABLE                                                      \nETAMACRO   UP LO FX                                                           \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Cost coefficients negated.                           \n                                                                              \nBob Bixby reports that the CPLEX solver (running on a Sparc station)          \nfinds slightly different optimal values for some of the problems.             \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of             \nDecember 1989) also finds different optimal values for some of the            \nproblems.  The following table shows the values that differ from those        \nshown above.  (Whether CPLEX finds different values on the recently           \nadded problems remains to be seen.)                                           \n                                                                              \nProblem        CPLEX(Sparc)          MINOS(MIPS)                              \nETAMACRO    -7.5571523337E+02    -7.5571522100E+02                            \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n 12. ETAMACRO   401   689   2489  7.5571521E+02 MAX   904  15.0   927  17.6   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
622`LPnetlib`lp_fffff800`524`1028`6401`yes`524`38`1`0`0%`0%`real`rectangular`no`no`J. Reid`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nFFFFF800    525    854     6235      39637        5.5567961165E+05        \n                                                                          \nFrom John Reid.                                                           \nWhen included in Netlib: Extra right-hand side vectors omitted;           \nextra bound sets omitted.                                                 \nFFFFF800 is sometimes called POWELL.                                      \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nFFFFF800     5.5567956482E+05     5.5567958085E+05                        \n
623`LPnetlib`lp_finnis`497`1064`2760`yes`497`1`1`0`0%`0%`real`rectangular`no`no`N. Gould`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                       \nsend email to netlib@ornl.gov with the message:                              \n                                                                             \n	 send index from lp                                                         \n	 send readme from lp/data                                                   \n                                                                             \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):   \n                                                                             \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude     \nslack and surplus columns and the right-hand side vector, but include        \nthe cost row.  We have omitted other free rows and all but the first         \nright-hand side vector, as noted below.  The byte count is for the           \nMPS compressed file; it includes a newline character at the end of each      \nline.  These files start with a blank initial line intended to prevent       \nmail programs from discarding any of the data.  The BR column indicates      \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R        \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types          \npresent in those problems that have bounds.                                  \n                                                                             \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                  \nrunning on a VAX with default options.                                       \n                                                                             \n                       PROBLEM SUMMARY TABLE                                 \n                                                                             \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value            \nFINNIS      498    614     2714      23847  B     1.7279096547E+05           \n                                                                             \n        BOUND-TYPE TABLE                                                     \nFINNIS     UP LO FX                                                          \n                                                                             \nWhen included in Netlib: Extra free rows omitted.                            \n                                                                             \nNick Gould supplied FINNIS from the Harwell collection of LP test problems.  \nConcerning the problems he supplied, Nick Gould says that FINNIS             \n\"is from Mike Finnis at Harwell, a model for the selection of                \nalternative fuel types.\"                                                     \n                                                                             \nAdded to Netlib on  6 April 1989                                             \n                                                                             \n
624`LPnetlib`lp_fit1d`24`1049`13427`yes`24`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nFIT1D        25   1026    14430      51734  B    -9.1463780924E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nFIT1D      UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nConcerning FIT1D, FIT1P, FIT2D, FIT2P, Bob Fourer says                    \n    The pairs FIT1P/FIT1D and FIT2P/FIT2D are primal and                  \n    dual versions of the same two problems [except that we                \n    have negated the cost coefficients of the dual problems               \n    so all are minimization problems].  They originate from               \n    a model for fitting linear inequalities to data, by                   \n    minimization of a sum of piecewise-linear penalties.                  \n    The FIT1 problems are based on 627 data points and 2-3                \n    pieces per primal pl penalty term.  The FIT2 problems                 \n    are based on 3000 data points (from a different sample                \n    altogether) and 4-5 pieces per pl term.                               \n                                                                          \nAdded to Netlib on  31 Jan. 1990                                          \n                                                                          \n
625`LPnetlib`lp_fit1p`627`1677`9868`yes`627`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nFIT1P       628   1677    10894      65116  B     9.1463780924E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nFIT1P      UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nConcerning FIT1D, FIT1P, FIT2D, FIT2P, Bob Fourer says                    \n    The pairs FIT1P/FIT1D and FIT2P/FIT2D are primal and                  \n    dual versions of the same two problems [except that we                \n    have negated the cost coefficients of the dual problems               \n    so all are minimization problems].  They originate from               \n    a model for fitting linear inequalities to data, by                   \n    minimization of a sum of piecewise-linear penalties.                  \n    The FIT1 problems are based on 627 data points and 2-3                \n    pieces per primal pl penalty term.  The FIT2 problems                 \n    are based on 3000 data points (from a different sample                \n    altogether) and 4-5 pieces per pl term.                               \n                                                                          \nAdded to Netlib on  31 Jan. 1990                                          \n                                                                          \n
626`LPnetlib`lp_fit2d`25`10524`129042`yes`25`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nFIT2D        26  10500   138018     482330  B    -6.8464293294E+04        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nFIT2D      UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nConcerning FIT1D, FIT1P, FIT2D, FIT2P, Bob Fourer says                    \n    The pairs FIT1P/FIT1D and FIT2P/FIT2D are primal and                  \n    dual versions of the same two problems [except that we                \n    have negated the cost coefficients of the dual problems               \n    so all are minimization problems].  They originate from               \n    a model for fitting linear inequalities to data, by                   \n    minimization of a sum of piecewise-linear penalties.                  \n    The FIT1 problems are based on 627 data points and 2-3                \n    pieces per primal pl penalty term.  The FIT2 problems                 \n    are based on 3000 data points (from a different sample                \n    altogether) and 4-5 pieces per pl term.                               \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nFIT2D                            -6.8464293232E+04                        \n                                                                          \nAdded to Netlib on  31 Jan. 1990                                          \n
627`LPnetlib`lp_fit2p`3000`13525`50284`yes`3000`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nFIT2P      3001  13525    60784     439794  B     6.8464293232E+04        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nFIT2P      UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nConcerning FIT1D, FIT1P, FIT2D, FIT2P, Bob Fourer says                    \n    The pairs FIT1P/FIT1D and FIT2P/FIT2D are primal and                  \n    dual versions of the same two problems [except that we                \n    have negated the cost coefficients of the dual problems               \n    so all are minimization problems].  They originate from               \n    a model for fitting linear inequalities to data, by                   \n    minimization of a sum of piecewise-linear penalties.                  \n    The FIT1 problems are based on 627 data points and 2-3                \n    pieces per primal pl penalty term.  The FIT2 problems                 \n    are based on 3000 data points (from a different sample                \n    altogether) and 4-5 pieces per pl term.                               \n                                                                          \nAdded to Netlib on  31 Jan. 1990                                          \n                                                                          \n
628`LPnetlib`lp_ganges`1309`1706`6937`yes`1309`185`1`0`0%`0%`real`rectangular`no`no`L. Schrage`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGANGES     1310   1681     7021      60191  B    -1.0958636356E+05        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGANGES     UP LO                                                          \n                                                                          \nSubmitted by Linus Schrage.                                               \nWhen included in Netlib: Extra free rows omitted;                         \nCost coefficients negated.                                                \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nGANGES      -1.0958573613E+05    -1.0958577038E+05                        \n
629`LPnetlib`lp_gfrd_pnc`616`1160`2445`yes`616`27`1`0`0%`0%`real`rectangular`no`no`R. Helgason, J. Kennington, P. Wong`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGFRD-PNC    617   1092     3467      24476  B     6.9022359995E+06        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGFRD-PNC   UP LO                                                          \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nSource: GFRD-PNC, SIERRA: R. Helgason, J. Kennington, and P. Wong,        \n\"An Application of Network Programming for National Forest Planning\",     \nTechnical Report OR 81006, Dept. of Operations Research, Southern         \nMethodist University.                                                     \n                                                                          \n
630`LPnetlib`lp_greenbea`2392`5598`31070`no`2389`75`9`0`0%`0%`real`rectangular`no`no`K. Palmer`R. Fourer`1984`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGREENBEA   2393   5405    31499     235711  B    -7.2462405908E+07        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGREENBEA   UP LO FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra bound sets omitted; Extra free rows        \nomitted.                                                                  \nEmpty RHS section.                                                        \nProblems GREENBEA and GREENBEB differ only in their BOUNDS sections.      \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nGREENBEA    -7.2555248130E+07                                             \n                                                                          \nSource:  GREENBEA, GREENBEB: a large refinery model; see the book         \n\"A Model-Management Framework for Mathematical Programming\" by Kenneth    \nH. Palmer et al. (John Wiley & Sons, New York, 1984).                     \n                                                                          \nAdded to Netlib on  6 May 1988                                            \n                                                                          \n
631`LPnetlib`lp_greenbeb`2392`5598`31070`no`2389`75`9`0`0%`0%`real`rectangular`no`no`K. Palmer`R. Fourer`1984`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGREENBEB   2393   5405    31499     235739  B    -4.3021476065E+06        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGREENBEB   UP LO FX FR                                                    \n                                                                          \nSupplied by Bob Fourer.                                                   \nEmpty RHS section.                                                        \nWhen included in Netlib: Extra bound sets omitted,  extra free            \nrows omitted.                                                             \nProblems GREENBEA and GREENBEB differ only in their BOUNDS sections.      \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nGREENBEB    -4.3022602612E+06    -4.3021537702E+06                        \n                                                                          \nSource:   GREENBEA, GREENBEB: a large refinery model; see the book        \n\"A Model-Management Framework for Mathematical Programming\" by Kenneth    \nH. Palmer et al. (John Wiley & Sons, New York, 1984).                     \n                                                                          \nAdded to Netlib on  6 May 1988                                            \n
632`LPnetlib`lp_grow15`300`645`5620`yes`300`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1983`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGROW15      301    645     5665      35041  B    -1.0687094129E+08        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGROW15     UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra bound sets omitted; explicit zeros         \nomitted; Cost coefficients negated.                                       \n                                                                          \nSource:   GROW15, GROW22, GROW7: R. Fourer, \"Solving Staircase Linear     \nPrograms by the Simplex Method, 2: Pricing\", Math. Prog. 25 (1983),       \npp. 251-292.                                                              \n                                                                          \n
633`LPnetlib`lp_grow22`440`946`8252`yes`440`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1983`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGROW22      441    946     8318      50789  B    -1.6083433648E+08        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGROW22     UP                                                             \n                                                                          \nFrom Bob Fourer.                                                          \nWhen included in Netlib: Extra bound sets omitted; explicit zeros         \nomitted; cost coefficients negated.                                       \n                                                                          \nSource:   GROW15, GROW22, GROW7: R. Fourer, \"Solving Staircase Linear     \nPrograms by the Simplex Method, 2: Pricing\", Math. Prog. 25 (1983),       \npp. 251-292.                                                              \n                                                                          \n
634`LPnetlib`lp_grow7`140`301`2612`yes`140`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1983`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGROW7       141    301     2633      17043  B    -4.7787811815E+07        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGROW7      UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra bound sets omitted; explicit zeros         \nomitted; cost coefficients negated.                                       \n                                                                          \nSource:   GROW15, GROW22, GROW7: R. Fourer, \"Solving Staircase Linear     \nPrograms by the Simplex Method, 2: Pricing\", Math. Prog. 25 (1983),       \npp. 251-292.                                                              \n
635`LPnetlib`lp_israel`174`316`2443`yes`174`1`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nISRAEL      175    142     2358      12109       -8.9664482186E+05            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Extra right-hand side vectors omitted.               \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  6. ISRAEL     175   142   2358 -8.9664482E+05       345   5.0   231   3.7   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
636`LPnetlib`lp_kb2`43`68`313`yes`43`1`1`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nKB2          44     41      291       2526  B    -1.7499001299E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nKB2        UP                                                             \n                                                                          \nEmpty RHS section.                                                        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     KB2         82     29   35.37                                        \n                                                                          \nAdded to Netlib on  27 June 1989                                          \n
637`LPnetlib`lp_ken_07`2426`3602`8404`yes`2426`990`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`D. Gay`1991`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nKEN-07     2427    3602     11981     7204    150525    718748  -6.7952044e+08\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
638`LPnetlib`lp_ken_11`14694`21349`49058`yes`14694`4610`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`D. Gay`1991`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nKEN-11    14695   21349     70354    42698    928171   4167698  -6.9723823e+09\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
639`LPnetlib`lp_ken_13`28632`42659`97246`yes`28632`6099`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`D. Gay`1991`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nKEN-13    28633   42659    139834    85318   1836457   8254122  -1.0257395e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
640`LPnetlib`lp_ken_18`105127`154699`358171`yes`105127`26266`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`D. Gay`1991`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nKEN-18   105128  154699    512719   309398   7138893  29855000  -5.2217025e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
641`LPnetlib`lp_lotfi`153`366`1136`yes`153`9`1`0`0%`0%`real`rectangular`no`no`V. Lofti`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nLOTFI       154    308     1086       6718       -2.5264706062E+01        \n                                                                          \nFrom Vahid Lotfi.                                                         \nWhen included in Netlib: cost coefficients negated.                       \n                                                                          \nLOTFI, says Vahid Lotfi, \"involves audit staff scheduling.  This problem  \nis semi real world and we have used it in a study, the results of which   \nare to appear in Decision Sciences (Fall 1990).  The detailed             \ndescription of the problem is also in the paper.  The problem is          \nactually an MOLP with seven objectives, the first is maximization and     \nthe other six are minimization.  The version that I am sending has the    \naggregated objective (i.e., z1-z2-z3-z4-z5-z6-z7).\"                       \n                                                                          \nAdded to Netlib on 27 June 1989                                           \n
642`LPnetlib`lp_maros`846`1966`10137`yes`846`3`3`0`0%`0%`real`rectangular`no`no`I. Maros`D. Gay`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nMAROS       847   1443    10006      65906  B    -5.8063743701E+04        \n                                                                          \nFrom Istvan Maros.                                                        \nWhen included in Netlib: extra free rows omitted;                         \ncost coefficients negated.                                                \n                                                                          \nConcerning the problems he submitted, Istvan Maros says that MAROS is     \nan industrial production/allocation model about which \"the customer does  \nnot want to reveal the exact meaning\".                                    \n                                                                          \nAdded to Netlib on  15 June 1990                                          \n
643`LPnetlib`lp_maros_r7`3136`9408`144848`yes`3136`1`1`0`0%`0%`real`rectangular`no`no`I. Maros`D. Gay`1994`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nMAROS-R7   3137   9408   151120    4812587        1.4971851665E+06        \n                                                                          \nFrom Istvan Maros.                                                        \n                                                                          \nConcerning the problems he submitted, Istvan Maros says that              \nMAROS-R7 is \"an interesting                                               \nreal-life LP problem which appeared hard to some solvers.\"  It \"is an     \nimage restoration problem done via a goal programming approach.  It is    \nstructured, namely, its first section is a band matrix with the           \ndominating number of nonzeros, while the second section is also a band    \nmatrix with bandwidth equals 2 and coefficients +1, -1.  The problem is   \na representative of a family of problems in which the number of rows and  \nthe bandwidth of the first section can vary.  This one is a medium size   \nproblem from the family.  MAROS-R7 became available in cooperation with   \nRoni Levkovitz and Carison Tong.\"                                         \n                                                                          \nAdded to Netlib on  17 Jan. 1994                                          \n                                                                          \n
644`LPnetlib`lp_modszk1`687`1620`3168`no`686`3`3`0`0%`0%`real`rectangular`no`no`I. Maros`D. Gay`1994`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nMODSZK1     688   1620     4158      40908  B     3.2061972906E+02        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nMODSZK1             FR                                                    \n                                                                          \nFrom Istvan Maros.                                                        \nConcerning the problems he submitted, Istvan Maros says that              \nMODSZK1 is a \"real-life problem\" that                                     \nis \"very degenerate\" and on which a dual simplex algorithm \"may require   \nup to 10 times\" fewer iterations than a primal simplex algorithm.  It     \n\"is a multi-sector economic planning model (a kind of an input/output     \nmodel in economy)\" and \"is an old problem of mine and it is not easy to   \nrecall more.\"                                                             \n                                                                          \nAdded to Netlib on  17 Jan. 1994                                          \n                                                                          \n
645`LPnetlib`lp_osa_07`1118`25067`144812`yes`1118`1`1`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nOSA-07     1119   23949    167643        0   1059475   5388666   5.3572252e+05\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
646`LPnetlib`lp_osa_14`2337`54797`317097`yes`2337`1`1`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nOSA-14     2338   52460    367220        0   2359656  11800249   1.1064628e+06\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
647`LPnetlib`lp_osa_30`4350`104374`604488`yes`4350`1`1`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nOSA-30     4351  100024    700160        0   4470876  22495351   2.1421399e+06\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
648`LPnetlib`lp_osa_60`10280`243246`1408073`yes`10280`1`1`0`0%`0%`real`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nOSA-60    10281  232966   1630758        0  10377094  52402461   4.0440725e+06\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
649`LPnetlib`lp_pds_02`2953`7716`16571`yes`2953`300`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nPDS-02     2954    7535     21252     2134    197821    801690   2.8857862e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
650`LPnetlib`lp_pds_06`9881`29351`63220`yes`9881`516`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nPDS-06     9882   28655     82269     9240    769564   3124272   2.7761038e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
651`LPnetlib`lp_pds_10`16558`49932`107605`yes`16558`581`1`0`0%`0%`integer`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nPDS-10    16559   48763    140063    16148   1313834   5331274   2.6727095e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
652`LPnetlib`lp_pds_20`33874`108175`232647`no`33798`853`77`0`0%`0%`integer`rectangular`no`no`J. Kennington`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data/kennington.  For more information             \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send readme from lp/data/kennington                                         \n                                                                              \nThe following are relevant excerpts from lp/data/kennington/readme:           \n                                                                              \nThe \"Kennington\" problems: sixteen problems described in \"An Empirical        \nEvaluation of the KORBX Algorithms for Military Airlift Applications\"         \nby W. J. Carolan, J. E. Hill, J. L. Kennington, S. Niemi, S. J.               \nWichmann (Operations Research vol. 38, no. 2 (1990), pp. 240-248).            \n                                                                              \nThe following table gives some statistics for the \"Kennington\"                \nproblems.  The number of columns excludes slacks and surpluses.               \nThe bounds column tells how many entries appear in the BOUNDS                 \nsection of the MPS file.  The mpc column shows the bytes in                   \nthe problem after \"uncompress\" and before \"emps\"; MPS shows                   \nthe bytes after \"emps\".  The optimal values were computed by                  \nVanderbei's ALPO, running on an SGI computer (with binary IEEE                \narithmetic).                                                                  \n                                                                              \nName       rows  columns  nonzeros  bounds      mpc      MPS     optimal value\nPDS-20    33875  105728    304153    34888   2856653  11550890   2.3821659e+10\n                                                                              \nSubmitted to Netlib by Irv Lustig.                                            \n                                                                              \n
653`LPnetlib`lp_perold`625`1506`6148`yes`625`3`1`0`0%`0%`real`rectangular`no`no`N. Gould`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types           \npresent in those problems that have bounds.                                   \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nPEROLD      626   1376     6026      47486  B    -9.3807580773E+03            \n                                                                              \n        BOUND-TYPE TABLE                                                      \nPEROLD     UP LO FX FR                                                        \n                                                                              \nNick Gould supplied PEROLD, from the Harwell collection of LP test problems.  \n                                                                              \nBob Bixby reports that the CPLEX solver (running on a Sparc station)          \nfinds slightly different optimal values for some of the problems.             \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of             \nDecember 1989) also finds different optimal values for some of the            \nproblems.  The following table shows the values that differ from those        \nshown above.  (Whether CPLEX finds different values on the recently           \nadded problems remains to be seen.)                                           \n                                                                              \nProblem        CPLEX(Sparc)          MINOS(MIPS)                              \nPEROLD      -9.3807552782E+03    -9.3807553661E+03                            \n                                                                              \nConcerning the problems he supplied, Nick Gould says that  PEROLD \"is         \nanother Pilot model (Pilot1)\".                                                \n                                                                              \nAdded to Netlib on  6 April 1989                                              \n                                                                              \n
654`LPnetlib`lp_pilot`1441`4860`44375`yes`1441`2`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types           \npresent in those problems that have bounds.                                   \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nPILOT      1442   3652    43220     278593  B    -5.5740430007E+02            \n                                                                              \n        BOUND-TYPE TABLE                                                      \nPILOT      UP LO FX                                                           \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Extra bound sets omitted;                            \ncost coefficients negated.                                                    \n                                                                              \nBob Bixby reports that the CPLEX solver (running on a Sparc station)          \nfinds slightly different optimal values for some of the problems.             \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of             \nDecember 1989) also finds different optimal values for some of the            \nproblems.  The following table shows the values that differ from those        \nshown above.  (Whether CPLEX finds different values on the recently           \nadded problems remains to be seen.)                                           \n                                                                              \nProblem        CPLEX(Sparc)          MINOS(MIPS)                              \nPILOT       -5.5748972928E+02    -5.5741215293E+02                            \n                                                                              \nConcerning PILOT87, Irv Lustig says, \"PILOT87 is considered (by John          \nStone, at least) to be harder than PILOT because of the bad scaling in        \nthe numerics.\"                                                                \n                                                                              \nModified on Oct. 1991 (minor cleanup): removed 8 duplicate right-hand         \nside values for row BTRB01.                                                   \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n 13. PILOT     1460  3652  43645  5.5742994E+02 MAX    ?     ?  20000* 2hrs*  \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n* PILOT      is a linearized form of a quadratic program.  The first 45       \n             objective elements are the optimal gradients of the quadratic    \n             terms in the objective of the QP.  PILOT is normally solved      \n             from an advanced basis, with scaling.  The Itns and Time shown   \n             above are estimates.                                             \n                                                                              \n
655`LPnetlib`lp_pilot4`410`1123`5264`yes`410`9`1`0`0%`0%`real`rectangular`no`no`Stanford`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nPILOT4      411   1000     5145      40936  B    -2.5811392641E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nPILOT4     UP    FX FR PL                                                 \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Cost coefficients unchanged (PILOT4 appeared     \nto be a minimization problem already).                                    \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nPILOT4      -2.5811392589E+03    -2.5811392624E+03                        \n                                                                          \nSource for PILOT.JA, PILOT.WE, PILOT4, PILOTNOV: Systems Optimization     \nLaboratory, Stanford University.                                          \n
656`LPnetlib`lp_pilot87`2030`6680`74949`yes`2030`2`2`0`0%`0%`real`rectangular`no`no`J. Stone`I. Lustig`1990`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                     \nsend email to netlib@ornl.gov with the message:                            \n                                                                           \n	 send index from lp                                                       \n	 send readme from lp/data                                                 \n                                                                           \nThe following are relevant excerpts from lp/data/readme (by David M. Gay): \n                                                                           \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude   \nslack and surplus columns and the right-hand side vector, but include      \nthe cost row.  We have omitted other free rows and all but the first       \nright-hand side vector, as noted below.  The byte count is for the         \nMPS compressed file; it includes a newline character at the end of each    \nline.  These files start with a blank initial line intended to prevent     \nmail programs from discarding any of the data.  The BR column indicates    \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R      \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types        \npresent in those problems that have bounds.                                \n                                                                           \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                \nrunning on a VAX with default options.                                     \n                                                                           \n                       PROBLEM SUMMARY TABLE                               \n                                                                           \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value          \nPILOT87    2031   4883    73804     514192  B     3.0171072827E+02         \n                                                                           \nSupplied by Irv Lustig, which he obtained from John Stone.                 \nWhen included in Netlib: Extra free rows omitted.                          \n                                                                           \nBob Bixby reports that the CPLEX solver (running on a Sparc station)       \nfinds slightly different optimal values for some of the problems.          \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of          \nDecember 1989) also finds different optimal values for some of the         \nproblems.  The following table shows the values that differ from those     \nshown above.  (Whether CPLEX finds different values on the recently        \nadded problems remains to be seen.)                                        \n                                                                           \nProblem        CPLEX(Sparc)          MINOS(MIPS)                           \nPILOT87                           3.0171074161E+02                         \n                                                                           \nAdded to Netlib on  15 June 1990.                                          \nModified, in Netlib, on  21 Oct. 1991 (minor cleanups): removed lower bound\nof 49.5 on U[OG]ST0[12], which are subsequently fixed at 99 (UOST[12]) or  \n65.4.                                                                      \n                                                                           \n
657`LPnetlib`lp_pilot_ja`940`2267`14977`yes`940`3`1`0`0%`0%`real`rectangular`no`no`Stanford`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nPILOT.JA    941   1988    14706      97258  B    -6.1131344111E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nPILOT.JA   UP LO FX FR                                                    \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nPILOT.JA    -6.1131364656E+03    -6.1131349867E+03                        \n                                                                          \nSource for PILOT.JA, PILOT.WE, PILOT4, PILOTNOV: Systems Optimization     \nLaboratory, Stanford University.                                          \n                                                                          \n
658`LPnetlib`lp_pilot_we`722`2928`9265`yes`722`1`1`0`0%`0%`real`rectangular`no`no`Stanford`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nPILOT.WE    723   2789     9218      79972  B    -2.7201027439E+06        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nPILOT.WE   UP LO FX FR                                                    \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nPILOT.WE    -2.7201075328E+06    -2.7201042967E+06                        \n                                                                          \nSource for PILOT.JA, PILOT.WE, PILOT4, PILOTNOV: Systems Optimization     \nLaboratory, Stanford University.                                          \n
659`LPnetlib`lp_pilotnov`975`2446`13331`yes`975`3`1`0`0%`0%`real`rectangular`no`no`Stanford`R. Fourer`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nPILOTNOV    976   2172    13129      89779  B    -4.4972761882E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nPILOTNOV   UP    FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Cost coefficients negated.                       \nPrior to 29 April 1987, the lp/data/readme file gave the optimal value    \nfrom maximizing rather than minimizing PILOTNOV.                          \n                                                                          \nSource for PILOT.JA, PILOT.WE, PILOT4, PILOTNOV: Systems Optimization     \nLaboratory, Stanford University.                                          \n                                                                          \n
660`LPnetlib`lp_qap12`3192`8856`38304`yes`3192`1`1`0`0%`0%`integer`rectangular`no`no`T. Johnson`R. Bixby, M. Saltzman, T. Johnson`1999`linear programming problem`\nA Netlib LP problem, in lp/generators/qap.  For more information          \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n	 send readme from lp/generators/qap                                      \n                                                                          \nThis copy of QAP12 was created by the QAP generator program,              \non an Sun UltraSparc, on May 15, 1997.                                    \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nQAP12      3193   8856    44244 (see NOTES)       5.2289435056E+02        \n                                                                          \nProblems QAP8, QAP12, and QAP15 are from a generator by Terri             \nJohnson (communicated by a combination of Bob Bixby, Matt Saltzman, and   \nTerri Johnson).                                                           \n                                                                          \nSource for Terri Johnson's generator and input data                       \nfor producing MPS files for QAP8, QAP12, and QAP15 appear in directory    \nlp/generators/qap.                                                        \n                                                                          \nAdded to Netlib on 12 April 1996.                                         \n                                                                          \nThe following are relevant excerpts from lp/generators/qap/readme         \n(by Terri Johnson):                                                       \n                                                                          \n        The Quadratic Assignment Problem (Problem QAP) is a specially-    \nstructured zero-one quadratic programming problem.  While having          \nreceived considerable attention since its introduction into the           \nliterature over 30 years ago, and while many applications exist in        \nvarious disciplines, this problem has resisted exact solution             \nprocedures.  Only for smaller-size problems can optimal solutions be      \nobtained and verified.  The solution strategies for Problem QAP           \ndeveloped by Johnson (Ph.D.  dissertation, Clemson University, 1992)      \nand Adams and Johnson (Improved Linear Programming-based Lower Bounds     \nfor the Quadratic Assignment Problem, DIMACS:  Quadratic Assignment       \nand Related Problems, Vol. 16 (1994), 43-75) are based on a new,          \nequivalent, mixed- integer linear reformulation, Problem LP.              \n        The traditional , nonlinear formulation of Problem QAP has a      \nquadratic objective function, 2m constraints and m^2 binary variables.    \nThe linearized version of concern, Problem LP, on the other hand, has     \n2m^2(m-1) + m^2(m-1)^2/2 + 2m constraints, in addition to non-            \nnegativity restrictions on all the variables, and m^2 binary variables    \nand m^2(m-1)^2 continuous variables.  The continuous relaxation of        \nProblem LP, obtained by omitting the x binary restrictions, possesses     \na special block diagonal structure which readily lends itself to          \ndecomposition techniques.  However, the inherent degeneracy makes this    \na formidable program for problems as small in size as m=15 to 20.  A      \nsmaller reformulation, which reduces the number of constraints and        \nvariables each by m^2(m-1)^2/2, can be obtained via an appropriate        \nsubstitution of variables, but such a substitution forfeits the           \nproblem structure.  It has been amply demonstrated that this              \nformulation serves as a unifying and dominating entity with respect to    \nthe different linear reformulations of Problem QAP, as well as with       \nrespect to a variety of bounding procedures.  Consequently, the           \nability to quickly solve this linear formulation holds the promise of     \nbeing able to solve larger-sized QAP's.                                   \n        Provided here is Fortran source, newlp.f, for a program that      \ngenerates MPS files for the linearized QAP with the substitution of       \nvariables.  Under the assumption that the test problem is symmetric,      \nthe generator reads the problem size, m, and an mxm matrix with the       \noriginal distances in the upper half of the matrix and the original       \nflows in the lower half of the matrix.  All diagonal entries are 0.       \nUsing this input, the generator program computes the objective            \nfunction coefficients for the quadratic terms, and automatically          \ncomputes the constraints.  The objective function is assumed to           \ncontain no linear terms since such values can be easily incorporated      \ninto the quadratic terms.                                                 \n        Input files qap8.dat, qap12.dat, and qap15.dat cause the          \ngenerator program to emit MPS files for well-known test problems of       \nNugent, C.E., T.E. Vollmann, and J. Ruml, An Experimental Comparison      \nof Techniques for the Assignment of Facilities to Locations,              \nOperations Research, Vol. 16, No. 1 (1968), 150-173, of sizes m=8, 12,    \nand 15 for the linearization.                                             \n                                                                          \n                                                                          \nPROBLEM:  M = 12		No. of Variables	No. of Constraints                     \n                                                                          \n	QAP				144			  24                                                        \n	LP (with substitution)	       8856			3192                                \n	Optimal value: 5.2289435056e+2                                           \n                                                                          \nFor more information, please contact Terri Johnson at:                    \n	johnsont@numen.elon.edu                                                  \n
661`LPnetlib`lp_qap15`6330`22275`94950`yes`6330`1`1`0`0%`0%`integer`rectangular`no`no`T. Johnson`R. Bixby, M. Saltzman, T. Johnson`1999`linear programming problem`\nA Netlib LP problem, in lp/generators/qap.  For more information          \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n	 send readme from lp/generators/qap                                      \n                                                                          \nThis copy of QAP15 was created by the QAP generator program,              \non an Sun UltraSparc, on May 15, 1997.                                    \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nQAP15      6331  22275   110700 (see NOTES)       1.0409940410E+03        \n                                                                          \nProblems QAP8, QAP12, and QAP15 are from a generator by Terri             \nJohnson (communicated by a combination of Bob Bixby, Matt Saltzman, and   \nTerri Johnson).                                                           \n                                                                          \nSource for Terri Johnson's generator and input data                       \nfor producing MPS files for QAP8, QAP12, and QAP15 appear in directory    \nlp/generators/qap.                                                        \n                                                                          \nAdded to Netlib on 12 April 1996.                                         \n                                                                          \nThe following are relevant excerpts from lp/generators/qap/readme         \n(by Terri Johnson):                                                       \n                                                                          \n        The Quadratic Assignment Problem (Problem QAP) is a specially-    \nstructured zero-one quadratic programming problem.  While having          \nreceived considerable attention since its introduction into the           \nliterature over 30 years ago, and while many applications exist in        \nvarious disciplines, this problem has resisted exact solution             \nprocedures.  Only for smaller-size problems can optimal solutions be      \nobtained and verified.  The solution strategies for Problem QAP           \ndeveloped by Johnson (Ph.D.  dissertation, Clemson University, 1992)      \nand Adams and Johnson (Improved Linear Programming-based Lower Bounds     \nfor the Quadratic Assignment Problem, DIMACS:  Quadratic Assignment       \nand Related Problems, Vol. 16 (1994), 43-75) are based on a new,          \nequivalent, mixed- integer linear reformulation, Problem LP.              \n        The traditional , nonlinear formulation of Problem QAP has a      \nquadratic objective function, 2m constraints and m^2 binary variables.    \nThe linearized version of concern, Problem LP, on the other hand, has     \n2m^2(m-1) + m^2(m-1)^2/2 + 2m constraints, in addition to non-            \nnegativity restrictions on all the variables, and m^2 binary variables    \nand m^2(m-1)^2 continuous variables.  The continuous relaxation of        \nProblem LP, obtained by omitting the x binary restrictions, possesses     \na special block diagonal structure which readily lends itself to          \ndecomposition techniques.  However, the inherent degeneracy makes this    \na formidable program for problems as small in size as m=15 to 20.  A      \nsmaller reformulation, which reduces the number of constraints and        \nvariables each by m^2(m-1)^2/2, can be obtained via an appropriate        \nsubstitution of variables, but such a substitution forfeits the           \nproblem structure.  It has been amply demonstrated that this              \nformulation serves as a unifying and dominating entity with respect to    \nthe different linear reformulations of Problem QAP, as well as with       \nrespect to a variety of bounding procedures.  Consequently, the           \nability to quickly solve this linear formulation holds the promise of     \nbeing able to solve larger-sized QAP's.                                   \n        Provided here is Fortran source, newlp.f, for a program that      \ngenerates MPS files for the linearized QAP with the substitution of       \nvariables.  Under the assumption that the test problem is symmetric,      \nthe generator reads the problem size, m, and an mxm matrix with the       \noriginal distances in the upper half of the matrix and the original       \nflows in the lower half of the matrix.  All diagonal entries are 0.       \nUsing this input, the generator program computes the objective            \nfunction coefficients for the quadratic terms, and automatically          \ncomputes the constraints.  The objective function is assumed to           \ncontain no linear terms since such values can be easily incorporated      \ninto the quadratic terms.                                                 \n        Input files qap8.dat, qap12.dat, and qap15.dat cause the          \ngenerator program to emit MPS files for well-known test problems of       \nNugent, C.E., T.E. Vollmann, and J. Ruml, An Experimental Comparison      \nof Techniques for the Assignment of Facilities to Locations,              \nOperations Research, Vol. 16, No. 1 (1968), 150-173, of sizes m=8, 12,    \nand 15 for the linearization.                                             \n                                                                          \n                                                                          \nPROBLEM:  M = 15		No. of Variables	No. of Constraints                     \n                                                                          \n	QAP				225			  30                                                        \n	LP (with substitution)	      22275			6330                                \n	Optimal value: 1.0409940410e+3                                           \n                                                                          \nFor more information, please contact Terri Johnson at:                    \n	johnsont@numen.elon.edu                                                  \n
662`LPnetlib`lp_qap8`912`1632`7296`yes`912`1`1`0`0%`0%`integer`rectangular`no`no`T. Johnson`R. Bixby, M. Saltzman, T. Johnson`1999`linear programming problem`\nA Netlib LP problem, in lp/generators/qap.  For more information          \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n	 send readme from lp/generators/qap                                      \n                                                                          \nThis copy of QAP8 was created by the QAP generator program,               \non an Sun UltraSparc, on May 15, 1997.                                    \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nQAP8        913   1632     8304 (see NOTES)       2.0350000000E+02        \n                                                                          \nProblems QAP8, QAP12, and QAP15 are from a generator by Terri             \nJohnson (communicated by a combination of Bob Bixby, Matt Saltzman, and   \nTerri Johnson).                                                           \n                                                                          \nSource for Terri Johnson's generator and input data                       \nfor producing MPS files for QAP8, QAP12, and QAP15 appear in directory    \nlp/generators/qap.                                                        \n                                                                          \nAdded to Netlib on 12 April 1996.                                         \n                                                                          \nThe following are relevant excerpts from lp/generators/qap/readme         \n(by Terri Johnson):                                                       \n                                                                          \n        The Quadratic Assignment Problem (Problem QAP) is a specially-    \nstructured zero-one quadratic programming problem.  While having          \nreceived considerable attention since its introduction into the           \nliterature over 30 years ago, and while many applications exist in        \nvarious disciplines, this problem has resisted exact solution             \nprocedures.  Only for smaller-size problems can optimal solutions be      \nobtained and verified.  The solution strategies for Problem QAP           \ndeveloped by Johnson (Ph.D.  dissertation, Clemson University, 1992)      \nand Adams and Johnson (Improved Linear Programming-based Lower Bounds     \nfor the Quadratic Assignment Problem, DIMACS:  Quadratic Assignment       \nand Related Problems, Vol. 16 (1994), 43-75) are based on a new,          \nequivalent, mixed- integer linear reformulation, Problem LP.              \n        The traditional , nonlinear formulation of Problem QAP has a      \nquadratic objective function, 2m constraints and m^2 binary variables.    \nThe linearized version of concern, Problem LP, on the other hand, has     \n2m^2(m-1) + m^2(m-1)^2/2 + 2m constraints, in addition to non-            \nnegativity restrictions on all the variables, and m^2 binary variables    \nand m^2(m-1)^2 continuous variables.  The continuous relaxation of        \nProblem LP, obtained by omitting the x binary restrictions, possesses     \na special block diagonal structure which readily lends itself to          \ndecomposition techniques.  However, the inherent degeneracy makes this    \na formidable program for problems as small in size as m=15 to 20.  A      \nsmaller reformulation, which reduces the number of constraints and        \nvariables each by m^2(m-1)^2/2, can be obtained via an appropriate        \nsubstitution of variables, but such a substitution forfeits the           \nproblem structure.  It has been amply demonstrated that this              \nformulation serves as a unifying and dominating entity with respect to    \nthe different linear reformulations of Problem QAP, as well as with       \nrespect to a variety of bounding procedures.  Consequently, the           \nability to quickly solve this linear formulation holds the promise of     \nbeing able to solve larger-sized QAP's.                                   \n        Provided here is Fortran source, newlp.f, for a program that      \ngenerates MPS files for the linearized QAP with the substitution of       \nvariables.  Under the assumption that the test problem is symmetric,      \nthe generator reads the problem size, m, and an mxm matrix with the       \noriginal distances in the upper half of the matrix and the original       \nflows in the lower half of the matrix.  All diagonal entries are 0.       \nUsing this input, the generator program computes the objective            \nfunction coefficients for the quadratic terms, and automatically          \ncomputes the constraints.  The objective function is assumed to           \ncontain no linear terms since such values can be easily incorporated      \ninto the quadratic terms.                                                 \n        Input files qap8.dat, qap12.dat, and qap15.dat cause the          \ngenerator program to emit MPS files for well-known test problems of       \nNugent, C.E., T.E. Vollmann, and J. Ruml, An Experimental Comparison      \nof Techniques for the Assignment of Facilities to Locations,              \nOperations Research, Vol. 16, No. 1 (1968), 150-173, of sizes m=8, 12,    \nand 15 for the linearization.                                             \n                                                                          \n                                                                          \nPROBLEM:  M = 8			No. of Variables	No. of Constraints                     \n                                                                          \n	QAP			 	 64			  16                                                       \n	LP (with substitution)	       1632			 912                                \n	Optimal value:  2.035e+2                                                 \n                                                                          \n                                                                          \nFor more information, please contact Terri Johnson at:                    \n	johnsont@numen.elon.edu                                                  \n
663`LPnetlib`lp_recipe`91`204`687`yes`91`1`12`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nRECIPE       92    180      752       6210  B    -2.6661600000E+02        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nRECIPE     UP LO FX                                                       \n                                                                          \nEmpty RHS section.                                                        \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra bound sets omitted;                        \nextra free rows omitted.                                                  \n                                                                          \nSource: consulting.                                                       \n                                                                          \n
664`LPnetlib`lp_sc105`105`163`340`yes`105`2`2`0`0%`0%`real`rectangular`no`no`N. Gould`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSC105       106    103      281       3307       -5.2202061212E+01        \n                                                                          \nNick Gould supplied SC105 from the Harwell collection of LP test problems.\nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nAdded to Netlib on  6 April 1989                                          \n
665`LPnetlib`lp_sc205`205`317`665`yes`205`3`3`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSC205       206    203      552       6380       -5.2202061212E+01        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n
666`LPnetlib`lp_sc50a`50`78`160`yes`50`2`2`0`0%`0%`real`rectangular`no`no`N. Gould`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSC50A        51     48      131       1615       -6.4575077059E+01        \n                                                                          \nNick Gould supplied SC50A from the Harwell collection of LP test problems.\nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nAdded to Netlib on  6 April 1989                                          \n
667`LPnetlib`lp_sc50b`50`78`148`yes`50`3`3`0`0%`0%`real`rectangular`no`no`N. Gould`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSC50B        51     48      119       1567       -7.0000000000E+01        \n                                                                          \nNick Gould supplied SC50A from the Harwell collection of LP test problems.\nWhen included in Netlib: Cost coefficients negated.                       \n                                                                          \nAdded to Netlib on  6 April 1989                                          \n
668`LPnetlib`lp_scagr25`471`671`1725`yes`471`2`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCAGR25     472    500     2029      17406       -1.4753433061E+07        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n
669`LPnetlib`lp_scagr7`129`185`465`yes`129`2`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCAGR7      130    140      553       4953       -2.3313892548E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nSCAGR7      -2.3313898243E+06    -2.3313897524E+06                        \n                                                                          \n
670`LPnetlib`lp_scfxm1`330`600`2732`yes`330`9`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCFXM1      331    457     2612      19078        1.8416759028E+04        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n
671`LPnetlib`lp_scfxm2`660`1200`5469`yes`660`17`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCFXM2      661    914     5229      37079        3.6660261565E+04        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
672`LPnetlib`lp_scfxm3`990`1800`8206`yes`990`25`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCFXM3      991   1371     7846      53828        5.4901254550E+04        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
673`LPnetlib`lp_scorpion`388`466`1534`yes`388`110`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCORPION    389    358     1708      12186        1.8781248227E+03        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \n                                                                          \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
674`LPnetlib`lp_scrs8`490`1275`3288`yes`490`26`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCRS8       491   1169     4029      36760        9.0429998619E+02        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \n                                                                          \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nSCRS8        9.0429695380E+02     9.0429695380E+02                        \n                                                                          \n
675`LPnetlib`lp_scsd1`77`760`2388`yes`77`1`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCSD1        78    760     3148      17852        8.6666666743E+00        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
676`LPnetlib`lp_scsd6`147`1350`4316`yes`147`1`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCSD6       148   1350     5666      32161        5.0500000078E+01        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nSCSD6        5.0500000077E+01                                             \n                                                                          \n
677`LPnetlib`lp_scsd8`397`2750`8584`yes`397`1`1`0`0%`0%`real`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCSD8       398   2750    11334      65888        9.0499999993E+02        \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
678`LPnetlib`lp_sctap1`300`660`1872`yes`300`1`1`0`0%`0%`integer`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCTAP1      301    480     2052      14970        1.4122500000E+03        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
679`LPnetlib`lp_sctap2`1090`2500`7334`yes`1090`1`1`0`0%`0%`integer`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCTAP2     1091   1880     8124      57479        1.7248071429E+03        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
680`LPnetlib`lp_sctap3`1480`3340`9734`yes`1480`1`1`0`0%`0%`integer`rectangular`no`no`J. Ho, E. Loute`R. Fourer`1981`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSCTAP3     1481   2480    10734      78688        1.4240000000E+03        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: J.K. Ho and E. Loute, \"A Set of Staircase Linear Programming      \nTest Problems\", Math. Prog. 20 (1981), pp. 245-250.                       \n                                                                          \n
681`LPnetlib`lp_share1b`117`253`1179`yes`117`6`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nSHARE1B     118    225     1182       8380       -7.6589318579E+04            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\n                                                                              \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  4. SHARE1B    118   225   1182 -7.6589319E+04       296   3.4   260   2.8   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
682`LPnetlib`lp_share2b`96`162`777`yes`96`1`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nSHARE2B      97     79      730       4795       -4.1573224074E+02            \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Extra free rows omitted.                             \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n  3. SHARE2B     99    79    802 -4.1573224E+02        91   1.3   121   1.4   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
683`LPnetlib`lp_shell`536`1777`3558`yes`536`1`1`0`0%`0%`integer`rectangular`no`no`J. Reid`D. Gay`1978`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n                                                                              \n------------------------------------------------------------------------------\nThis LP problem is the source of three sparse matrices in the Harwell/Boeing  \nsparse matrix collection: SHL_0, SHL_200, and SHL_400.  Those three matrices  \nare square, nonsingular basis matrices that occured during the solution of    \nSHELL.                                                                        \n------------------------------------------------------------------------------\n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types           \npresent in those problems that have bounds.                                   \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nSHELL       537   1775     4900      38049  B     1.2088253460E+09            \n                                                                              \n        BOUND-TYPE TABLE                                                      \nSHELL      UP LO FX                                                           \n                                                                              \nFrom John Reid.                                                               \n                                                                              \n
684`LPnetlib`lp_ship04l`402`2166`6380`no`360`6`43`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSHIP04L     403   2118     8450      57203        1.7933245380E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: consulting.                                                       \n                                                                          \n
685`LPnetlib`lp_ship04s`402`1506`4400`no`360`94`43`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSHIP04S     403   1458     5810      41257        1.7987147004E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: consulting.                                                       \n                                                                          \n
686`LPnetlib`lp_ship08l`778`4363`12882`no`712`26`67`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSHIP08L     779   4283    17085     117083        1.9090552114E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: consulting.                                                       \n                                                                          \n
687`LPnetlib`lp_ship08s`778`2467`7194`no`712`298`67`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSHIP08S     779   2387     9501      70093        1.9200982105E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: consulting.                                                       \n                                                                          \n
688`LPnetlib`lp_ship12l`1151`5533`16276`no`1042`206`110`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSHIP12L    1152   5427    21597     146753        1.4701879193E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: consulting.                                                       \n                                                                          \n
689`LPnetlib`lp_ship12s`1151`2869`8284`no`1042`578`110`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSHIP12S    1152   2763    10941      82527        1.4892361344E+06        \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra free rows omitted.                         \nSource: consulting.                                                       \n                                                                          \n
690`LPnetlib`lp_sierra`1227`2735`8001`yes`1227`1`1`0`0%`0%`integer`rectangular`no`no`R. Helgason, J. Kennington, P. Wong`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSIERRA     1228   2036     9252      76627  B     1.5394362184E+07        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nSIERRA     UP                                                             \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Explicit zeros omitted.                          \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nSIERRA                            1.5394364186E+07                        \n                                                                          \nSource: GFRD-PNC, SIERRA: R. Helgason, J. Kennington, and P. Wong,        \n\"An Application of Network Programming for National Forest Planning\",     \nTechnical Report OR 81006, Dept. of Operations Research, Southern         \nMethodist University.                                                     \n                                                                          \n
691`LPnetlib`lp_stair`356`614`4003`yes`356`1`1`0`0%`0%`real`rectangular`no`no`M. Saunders`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                        \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n	 send minos from lp/data                                                     \n                                                                              \n------------------------------------------------------------------------------\nThis LP problem is the source of four sparse matrices in the Harwell/Boeing   \nsparse matrix collection: STR_0, STR_200, STR_400, and STR_600.  Those four   \nmatrices are square, nonsingular basis matrices that occured during the       \nsolution of STAIR.                                                            \n------------------------------------------------------------------------------\n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types           \npresent in those problems that have bounds.                                   \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nSTAIR       357    467     3857      27405  B    -2.5126695119E+02            \n                                                                              \n        BOUND-TYPE TABLE                                                      \nSTAIR      UP    FX FR                                                        \n                                                                              \nFrom Michael Saunders, Systems Optimization Laboratory at Stanford University.\nWhen included in Netlib: Explicit zeros omitted;                              \ncost coefficients negated.                                                    \n                                                                              \nThe following are relevant excerts from lp/data/minos (by Michael Saunders),  \nregarding experience with MINOS 5.0 on the problems he provided:              \n                                                                              \n                                                     (unscaled)   (scaled)    \nFile   Name    Rows  Cols  Elems  Optimal Objective  Itns  Time  Itns  Time   \n---- --------  ----  ----  -----  -----------------  ----  ----  ----  ----   \n 11. STAIR      357   467   3867  2.5126695E+02 MAX   519  15.7   389  13.1   \n                                                                              \n* Objective  is the first row of type N.  It is minimized except as shown.    \n                                                                              \n* Itns       is the number of iterations required to solve the problem        \n             by the primal simplex method, as implemented in the Fortran      \n             code MINOS 5.0 (May 1985), using default values for all          \n             parameters.  (The initial basis is triangular.)                  \n                                                                              \n* Time       is the processor time required on an IBM 3081K.  The MINOS       \n             source code was compiled with the IBM Fortran 77 compiler        \n             VS FORTRAN, using the options NOSDUMP, NOSYM and OPT(3).         \n                                                                              \n
692`LPnetlib`lp_standata`359`1274`3230`yes`359`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSTANDATA    360   1075     3038      26135  B     1.2576995000E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nSTANDATA   UP    FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nSTANDGUB includes GUB markers; with these lines removed (lines in         \nthe expanded MPS file that contain primes, i.e., that mention the rows    \n'EGROUP' and 'ENDX'), STANDGUB becomes the same as problem STANDATA;      \nMINOS does not understand the GUB markers, so we cannot report an         \noptimal value from MINOS for STANDGUB.  STANDMPS amounts to STANDGUB      \nwith the GUB constraints as explicit constraints.                         \n                                                                          \nSource: consulting.                                                       \n                                                                          \n
693`LPnetlib`lp_standgub`361`1383`3338`no`360`2`4`1`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSTANDGUB    362   1184     3147      27836  B     (see NOTES)             \n                                                                          \n        BOUND-TYPE TABLE                                                  \nSTANDGUB   UP    FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nSTANDGUB includes GUB markers; with these lines removed (lines in         \nthe expanded MPS file that contain primes, i.e., that mention the rows    \n'EGROUP' and 'ENDX'), STANDGUB becomes the same as problem STANDATA;      \nMINOS does not understand the GUB markers, so we cannot report an         \noptimal value from MINOS for STANDGUB.  STANDMPS amounts to STANDGUB      \nwith the GUB constraints as explicit constraints.                         \n                                                                          \nSource: consulting.                                                       \n
694`LPnetlib`lp_standmps`467`1274`3878`yes`467`1`1`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSTANDMPS    468   1075     3686      29839  B     1.4060175000E+03        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nSTANDMPS   UP    FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \n                                                                          \nSTANDGUB includes GUB markers; with these lines removed (lines in         \nthe expanded MPS file that contain primes, i.e., that mention the rows    \n'EGROUP' and 'ENDX'), STANDGUB becomes the same as problem STANDATA;      \nMINOS does not understand the GUB markers, so we cannot report an         \noptimal value from MINOS for STANDGUB.  STANDMPS amounts to STANDGUB      \nwith the GUB constraints as explicit constraints.                         \n                                                                          \nSource: consulting.                                                       \n                                                                          \n
695`LPnetlib`lp_stocfor1`117`165`501`yes`117`12`1`0`0%`0%`real`rectangular`no`no`G. Gassmann`D. Gay`1988`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSTOCFOR1    118    111      474       4247       -4.1131976219E+04        \n                                                                          \nSTOCFOR12,3 are stochastic forestry problems from Gus Gassmann.  To      \nquote Gus, \"All of them are seven-period descriptions of a forestry       \nproblem with a random occurrence of forest fires, and the size varies     \naccording to the number of realizations you use in each period.\"          \nSTOCFOR1 \"is the deterministic version, STOCFOR2 has 2 realizations       \neach in periods 2 to 7, and the monster STOCFOR3 has 44,42,2, and 2     \nrealizations, respectively.\"   The compressed form of STOCFOR3 would be   \n652846 bytes long, so requesting STOCFOR3 will instead get you a bundle   \nof about 174 kilobytes that includes source for Gus's program, the        \ndata files for generating STOCFOR3 and a summary of \"A Standard           \nInput Format for Multistage Stochastic Linear Programs\" by J.R. Birge,    \nM.A.H. Dempster, H.I. Gassmann, E.A. Gunn, A.J. King, and S.W. Wallace    \n[COAL Newsletter No. 17 (Dec. 1987), pp. 1-19].  Data files are also      \nincluded for generating versions of STOCFOR12 that have more decimal     \nplaces than the versions in lp/data.                                      \n                                                                          \nAdded to Netlib on  25 June 1988                                          \n                                                                          \n
696`LPnetlib`lp_stocfor2`2157`3045`9357`yes`2157`17`1`0`0%`0%`real`rectangular`no`no`G. Gassmann`D. Gay`1988`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSTOCFOR2   2158   2031     9492      79845       -3.9024408538E+04        \n                                                                          \nSTOCFOR12,3 are stochastic forestry problems from Gus Gassmann.  To      \nquote Gus, \"All of them are seven-period descriptions of a forestry       \nproblem with a random occurrence of forest fires, and the size varies     \naccording to the number of realizations you use in each period.\"          \nSTOCFOR1 \"is the deterministic version, STOCFOR2 has 2 realizations       \neach in periods 2 to 7, and the monster STOCFOR3 has 44,42,2, and 2     \nrealizations, respectively.\"   The compressed form of STOCFOR3 would be   \n652846 bytes long, so requesting STOCFOR3 will instead get you a bundle   \nof about 174 kilobytes that includes source for Gus's program, the        \ndata files for generating STOCFOR3 and a summary of \"A Standard           \nInput Format for Multistage Stochastic Linear Programs\" by J.R. Birge,    \nM.A.H. Dempster, H.I. Gassmann, E.A. Gunn, A.J. King, and S.W. Wallace    \n[COAL Newsletter No. 17 (Dec. 1987), pp. 1-19].  Data files are also      \nincluded for generating versions of STOCFOR12 that have more decimal     \nplaces than the versions in lp/data.                                      \n                                                                          \nAdded to Netlib on  25 June 1988                                          \n                                                                          \n
697`LPnetlib`lp_stocfor3`16675`23541`72721`yes`16675`33`1`3752`0%`0%`real`rectangular`no`no`G. Gassmann`D. Gay`1989`linear programming problem`\nA Netlib LP problem, from a generator in lp/data.  For more information   \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThis copy of STOCFOR3 was created by the STOCFOR generator program,       \non an Sun UltraSparc, on May 15, 1997.                                    \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nSTOCFOR3  16676  15695    74004 (see NOTES)      -3.9976661576E+04        \n                                                                          \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nSTOCFOR3    -3.9976785944E+04    -3.9976776417E+04                        \n                                                                          \nSTOCFOR12,3 are stochastic forestry problems from Gus Gassmann.  To      \nquote Gus, \"All of them are seven-period descriptions of a forestry       \nproblem with a random occurrence of forest fires, and the size varies     \naccording to the number of realizations you use in each period.\"          \nSTOCFOR1 \"is the deterministic version, STOCFOR2 has 2 realizations       \neach in periods 2 to 7, and the monster STOCFOR3 has 44,42,2, and 2     \nrealizations, respectively.\"   The compressed form of STOCFOR3 would be   \n652846 bytes long, so requesting STOCFOR3 will instead get you a bundle   \nof about 174 kilobytes that includes source for Gus's program, the        \ndata files for generating STOCFOR3 and a summary of \"A Standard           \nInput Format for Multistage Stochastic Linear Programs\" by J.R. Birge,    \nM.A.H. Dempster, H.I. Gassmann, E.A. Gunn, A.J. King, and S.W. Wallace    \n[COAL Newsletter No. 17 (Dec. 1987), pp. 1-19].  Data files are also      \nincluded for generating versions of STOCFOR12 that have more decimal     \nplaces than the versions in lp/data.                                      \n                                                                          \nAdded to Netlib on 16 Jan. 1989; bound and range information added to     \nindex file; MINOS 5.3 optimal values inserted.                            \n                                                                          \nUpdated, in Netlib, on   4 Feb. 1993.  STOCFOR3 and the other problems    \nyou can generate with the data in the stocfor3 bundle are the same        \nnumerically as before (but with different row and column labels).         \nThe update (courtesy of Gus Gassmann) fixes some bugs in other uses       \nof the generator and expands your options in using the generator.         \n                                                                          \n
698`LPnetlib`lp_truss`1000`8806`27836`yes`1000`1`1`0`0%`0%`real`rectangular`no`no`M. Ferris`D. Gay`1990`linear programming problem`\nA Netlib LP problem, from a generator in lp/data.  For more information       \nsend email to netlib@ornl.gov with the message:                               \n                                                                              \n	 send index from lp                                                          \n	 send readme from lp/data                                                    \n                                                                              \nThis copy of TRUSS was created by the TRUSS generator program,                \non an Sun UltraSparc, on May 15, 1997.                                        \n                                                                              \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):    \n                                                                              \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude      \nslack and surplus columns and the right-hand side vector, but include         \nthe cost row.  We have omitted other free rows and all but the first          \nright-hand side vector, as noted below.  The byte count is for the            \nMPS compressed file; it includes a newline character at the end of each       \nline.  These files start with a blank initial line intended to prevent        \nmail programs from discarding any of the data.  The BR column indicates       \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R         \nfor \"has ranges\".                                                             \n                                                                              \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)                   \nrunning on a VAX with default options.                                        \n                                                                              \n                       PROBLEM SUMMARY TABLE                                  \n                                                                              \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value             \nTRUSS      1001   8806    36642 (see NOTES)       4.5881584719E+05            \n                                                                              \nSource:  At the request of Olvi Mangasarian, Rudy Setiono supplied the        \ngenerator and description (both written by Michael Ferris) and data for TRUSS.\n                                                                              \nRequesting TRUSS will get you a bundle of Fortran source and data for         \ngenerating an MPS file for TRUSS, a problem of minimizing the weight          \nof a certain structure.  The bundle also includes a description of the        \nproblem.                                                                      \n                                                                              \nAdded to Netlib on  26 Feb. 1990                                              \n                                                                              \n
699`LPnetlib`lp_tuff`333`628`4561`no`302`12`41`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nTUFF        334    587     4523      29439  B     2.9214776509E-01        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nTUFF       UP LO FX FR                                                    \n                                                                          \nEmpty RHS section.                                                        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     TUFF       745    345   46.31                                        \n                                                                          \nAdded to Netlib on  27 June 1989.                                         \n
700`LPnetlib`lp_vtp_base`198`346`1051`yes`198`3`3`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nVTP.BASE    199    203      914       8175  B     1.2983146246E+05        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nVTP.BASE   UP LO FX FR                                                    \n                                                                          \nSupplied by Bob Fourer.                                                   \nSource: consulting.                                                       \n                                                                          \n
701`LPnetlib`lp_wood1p`244`2595`70216`yes`244`1`1`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1989`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nWOOD1P      245   2594    70216     328905        1.4429024116E+00        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     WOOD1P    1059    471   44.48                                        \n                                                                          \nAdded to Netlib on  27 June 1989                                          \n                                                                          \n
702`LPnetlib`lp_woodw`1098`8418`37487`yes`1098`1`1`0`0%`0%`real`rectangular`no`no`J. Tomlin`D. Gay`1999`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".                                                         \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nWOODW      1099   8405    37478     240063        1.3044763331E+00        \n                                                                          \nFrom John Tomlin.                                                         \nOn the problems supplied by John Tomlin, MINOS 5.3 reports that about     \n10% to 57% of its steps are degenerate:                                   \n     Name     Steps  Degen  Percent                                       \n     WOODW     4147   1604   38.68                                        \n                                                                          \nAdded to Netlib on  27 June 1989                                          \n                                                                          \n
703`LPnetlib`lpi_bgdbg1`348`629`1662`yes`348`1`5`0`0%`0%`real`rectangular`no`no`L. Schrage`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBGDBG1 is a medium problem that was originally an integer program for a     \nplant operation model.  Infeasibility is original.                          \nContributor:  Linus Schrage, University of Chicago and LINDO Systems Inc.   \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nbgdbg1      349    407     1485   B                                         \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
704`LPnetlib`lpi_bgetam`400`816`2537`yes`400`1`2`0`0%`0%`real`rectangular`no`no`L. Schrage`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/data                                                   \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBGETAM is a medium model that is a version of the ETAMACRO test problem     \n(in lp/data) in which one right hand side has been altered to make it       \ninfeasible.                                                                 \nContributor:  Linus Schrage, University of Chicago and LINDO Systems Inc.   \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nbgetam      401    688     2489   B                                         \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
705`LPnetlib`lpi_bgindy`2671`10880`66266`yes`2671`15`1`0`0%`0%`real`rectangular`no`no`L. Schrage`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBGINDY is a large problem that was originally an integer program of unknown \norigin.  Infeasibility is original.                                         \nContributor:  Linus Schrage, University of Chicago and LINDO Systems Inc.   \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nbgindy     2672  10116    75019                                             \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
706`LPnetlib`lpi_bgprtr`20`40`70`yes`20`1`1`0`0%`0%`integer`rectangular`no`no`L. Schrage`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBGPRTR is a small model for a multiproduct, multiperiod production          \nscheduling model.  One right hand side has been altered to make it          \ninfeasible.                                                                 \nContributor:  Linus Schrage, University of Chicago and LINDO Systems Inc.   \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nbgprtr       21     34       90                                             \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
707`LPnetlib`lpi_box1`231`261`651`yes`231`1`1`0`0%`0%`integer`rectangular`no`no`Z. You`J. Chinneck`1992`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBOX1, EX72A, EX73A:  medium problems derived from research on using the     \ninfeasibility version of viability analysis [Chinneck 1992] to analyze      \npetri net models.  All three problems are volatile, showing IISs of         \nwidely differing size depending on the algorithm applied.  Contributor:     \nZhengping You, Carleton University.                                         \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nbox1        232    261      912   B            all cols are LO bounded      \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1992).  \"Viability Analysis:  A Formulation Aid for All     \nClasses of Network Models\", Naval Research Logistics, Vol.  39, pp.         \n531-543.                                                                    \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
708`LPnetlib`lpi_ceria3d`3576`4400`21178`yes`3576`1`1`0`0%`0%`integer`rectangular`no`no`E. Klotz`J. Chinneck`1999`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCERIA3D:  large problem which has some peculiarities.  There are no         \ncolumn bounds, and it is highly degenerate.  Contributor:  Ed Klotz,        \nCPLEX Optimization Inc.                                                     \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nceria3d    3577    824    17604   B FR         dense col (> 967)            \n                                                                            \n
709`LPnetlib`lpi_chemcom`288`744`1590`yes`288`1`1`0`0%`0%`real`rectangular`no`no`T. Baker`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCHEMCOM, QUAL, REFINERY, REACTOR, VOL1:  medium size problems derived       \nfrom a petrochemical plant model.  Doctored to generate infeasibility       \ndue to inability to meet volume or quality restrictions.  With the          \nexception of REACTOR, these are highly volatile problems, yielding IISs     \nof varying sizes when different IIS isolation algorithms are applied.       \nSee Chinneck [1993] for further discussion.  Contributor:  Tom Baker,       \nChesapeake Decision Sciences.                                               \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nchemcom     289    720     2190   B                                         \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
710`LPnetlib`lpi_cplex1`3005`5224`10947`yes`3005`1`1`0`0%`0%`real`rectangular`no`no`E. Klotz`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCPLEX1, CPLEX2:  medium and large problems respectively.  CPLEX1            \nreferred to as CPLEX problem in Chinneck [1993], and is remarkably          \nnon-volatile, showing a single small IIS regardless of the IIS algorithm    \napplied.  CPLEX2 is an almost-feasible problem. Contributor:  Ed Klotz,     \nCPLEX Optimization Inc.                                                     \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \ncplex1     3006   3221    10664   B            dense col (> 1500)           \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
711`LPnetlib`lpi_cplex2`224`378`1215`yes`224`1`1`0`0%`0%`real`rectangular`no`no`E. Klotz`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCPLEX1, CPLEX2:  medium and large problems respectively.  CPLEX1            \nreferred to as CPLEX problem in Chinneck [1993], and is remarkably          \nnon-volatile, showing a single small IIS regardless of the IIS algorithm    \napplied.  CPLEX2 is an almost-feasible problem. Contributor:  Ed Klotz,     \nCPLEX Optimization Inc.                                                     \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \ncplex2      225    221     1059   B                                         \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
712`LPnetlib`lpi_ex72a`197`215`467`yes`197`1`1`0`0%`0%`integer`rectangular`no`no`Z. You`J. Chinneck`1992`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBOX1, EX72A, EX73A:  medium problems derived from research on using the     \ninfeasibility version of viability analysis [Chinneck 1992] to analyze      \npetri net models.  All three problems are volatile, showing IISs of         \nwidely differing size depending on the algorithm applied.  Contributor:     \nZhengping You, Carleton University.                                         \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nex72a       198    215      682   B            all cols are LO bounded      \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1992).  \"Viability Analysis:  A Formulation Aid for All     \nClasses of Network Models\", Naval Research Logistics, Vol.  39, pp.         \n531-543.                                                                    \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
713`LPnetlib`lpi_ex73a`193`211`457`yes`193`1`1`0`0%`0%`integer`rectangular`no`no`Z. You`J. Chinneck`1992`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nBOX1, EX72A, EX73A:  medium problems derived from research on using the     \ninfeasibility version of viability analysis [Chinneck 1992] to analyze      \npetri net models.  All three problems are volatile, showing IISs of         \nwidely differing size depending on the algorithm applied.  Contributor:     \nZhengping You, Carleton University.                                         \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nex73a       194    211      668   B            all cols are LO bounded      \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1992).  \"Viability Analysis:  A Formulation Aid for All     \nClasses of Network Models\", Naval Research Logistics, Vol.  39, pp.         \n531-543.                                                                    \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
714`LPnetlib`lpi_forest6`66`131`246`yes`66`1`1`0`0%`0%`real`rectangular`no`no`H. Greenberg`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nFOREST6, WOODINFE:  very small problems derived from network-based          \nforestry models.  The IIS in FOREST6 includes most of the rows.             \nWOODINFE is the example problem discussed in detail in Greenberg [1993],    \nand has a very small IIS.  Contributor:  H.J.  Greenberg, University of     \nColorado at Denver.                                                         \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nforest6      67     95      270   B                                         \n                                                                            \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nH.J.  Greenberg (1993).  \"A Computer-Assisted Analysis System for           \nMathematical Programming Models and Solutions:  A User's Guide for          \nANALYZE\", Kluwer Academic Publishers, Boston.                               \n                                                                            \n
715`LPnetlib`lpi_galenet`8`14`22`yes`8`1`1`0`0%`0%`integer`rectangular`no`no`H. Greenberg`J. Chinneck`1999`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nGALENET:  a very small network problem.  Contributor:  H.J.  Greenberg,     \nUniversity of Colorado at Denver.                                           \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \ngalenet       9      8       16   B                                         \n                                                                            \n
716`LPnetlib`lpi_gosh`3792`13455`99953`no`3790`130`105`0`0%`0%`real`rectangular`no`no`R. Main`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nGOSH, GRAN, PANG:  these very large, large, and medium size models,         \nrespectively, problems arose from British Petroleum operations models.      \nContributor:  Roger Main, BP Oil.                                           \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \ngosh       3793  10733    97257   B FR         242 free cols                \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
717`LPnetlib`lpi_gran`2658`2525`20111`no`2311`1267`1243`0`0%`0%`real`rectangular`no`no`R. Main`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nGOSH, GRAN, PANG:  these very large, large, and medium size models,         \nrespectively, problems arose from British Petroleum operations models.      \nContributor:  Roger Main, BP Oil.                                           \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \ngran       2569   2520    20151   B    FX                                   \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
718`LPnetlib`lpi_greenbea`2393`5596`31074`no`2390`75`9`0`0%`0%`real`rectangular`no`no`R. Fourer`R. Fourer`1988`linear programming problem`\nA Netlib LP problem, in lp/data.  For more information                    \nsend email to netlib@ornl.gov with the message:                           \n                                                                          \n	 send index from lp                                                      \n	 send readme from lp/data                                                \n                                                                          \nThe following are relevant excerpts from lp/data/readme (by David M. Gay):\n                                                                          \nThe column and nonzero counts in the PROBLEM SUMMARY TABLE below exclude  \nslack and surplus columns and the right-hand side vector, but include     \nthe cost row.  We have omitted other free rows and all but the first      \nright-hand side vector, as noted below.  The byte count is for the        \nMPS compressed file; it includes a newline character at the end of each   \nline.  These files start with a blank initial line intended to prevent    \nmail programs from discarding any of the data.  The BR column indicates   \nwhether a problem has bounds or ranges:  B stands for \"has bounds\", R     \nfor \"has ranges\".  The BOUND-TYPE TABLE below shows the bound types       \npresent in those problems that have bounds.                               \n                                                                          \nThe optimal value is from MINOS version 5.3 (of Sept. 1988)               \nrunning on a VAX with default options.                                    \n                                                                          \n                       PROBLEM SUMMARY TABLE                              \n                                                                          \nName       Rows   Cols   Nonzeros    Bytes  BR      Optimal Value         \nGREENBEA   2393   5405    31499     235711  B    -7.2462405908E+07        \n                                                                          \n        BOUND-TYPE TABLE                                                  \nGREENBEA   UP LO FX                                                       \n                                                                          \nSupplied by Bob Fourer.                                                   \nWhen included in Netlib: Extra bound sets omitted; Extra free rows        \nomitted.                                                                  \nEmpty RHS section.                                                        \nProblems GREENBEA and GREENBEB differ only in their BOUNDS sections.      \n                                                                          \nBob Bixby reports that the CPLEX solver (running on a Sparc station)      \nfinds slightly different optimal values for some of the problems.         \nOn a MIPS processor, MINOS version 5.3 (with crash and scaling of         \nDecember 1989) also finds different optimal values for some of the        \nproblems.  The following table shows the values that differ from those    \nshown above.  (Whether CPLEX finds different values on the recently       \nadded problems remains to be seen.)                                       \n                                                                          \nProblem        CPLEX(Sparc)          MINOS(MIPS)                          \nGREENBEA    -7.2555248130E+07                                             \n                                                                          \nSource:  GREENBEA, GREENBEB: a large refinery model; see the book         \n\"A Model-Management Framework for Mathematical Programming\" by Kenneth    \nH. Palmer et al. (John Wiley & Sons, New York, 1984).                     \n                                                                          \nAdded to Netlib on  6 May 1988                                            \n                                                                          \n
719`LPnetlib`lpi_itest2`9`13`26`yes`9`1`1`0`0%`0%`real`rectangular`no`no`J. Chinneck, E. Dravnieks`J. Chinneck`1991`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nITEST6, ITEST2:  very small problems having numerous clustered IISs.        \nThese match problems 1 and 2, respectively, in Chinneck and Dravnieks       \n[1991].  Contributors:  J.W.  Chinneck and E.W.  Dravnieks, Carleton        \nUniversity.                                                                 \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nitest2       10      4       17                                             \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck and E.W.  Dravnieks (1991).  \"Locating Minimal Infeasible    \nConstraint Sets in Linear Programs\", ORSA Journal on Computing, Volume      \n3, No. 2.                                                                   \n                                                                            \n
720`LPnetlib`lpi_itest6`11`17`29`yes`11`1`3`0`0%`0%`real`rectangular`no`no`J. Chinneck, E. Dravnieks`J. Chinneck`1991`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nITEST6, ITEST2:  very small problems having numerous clustered IISs.        \nThese match problems 1 and 2, respectively, in Chinneck and Dravnieks       \n[1991].  Contributors:  J.W.  Chinneck and E.W.  Dravnieks, Carleton        \nUniversity.                                                                 \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nitest6       12      8       23                                             \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck and E.W.  Dravnieks (1991).  \"Locating Minimal Infeasible    \nConstraint Sets in Linear Programs\", ORSA Journal on Computing, Volume      \n3, No. 2.                                                                   \n                                                                            \n
721`LPnetlib`lpi_klein1`54`108`750`yes`54`1`1`0`0%`0%`integer`rectangular`no`no`E. Klotz`J. Chinneck`1999`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nKLEIN1, KLEIN2, KLEIN3:  related small and medium size problems.            \nContributor:  Ed Klotz, CPLEX Optimization Inc.                             \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nklein1       55     54      696                                             \n                                                                            \n
722`LPnetlib`lpi_klein2`477`531`5062`yes`477`1`1`0`0%`0%`integer`rectangular`no`no`E. Klotz`J. Chinneck`1999`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nKLEIN1, KLEIN2, KLEIN3:  related small and medium size problems.            \nContributor:  Ed Klotz, CPLEX Optimization Inc.                             \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nklein2      478     54     4585                                             \n                                                                            \n
723`LPnetlib`lpi_klein3`994`1082`13101`yes`994`1`1`0`0%`0%`integer`rectangular`no`no`E. Klotz`J. Chinneck`1999`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nKLEIN1, KLEIN2, KLEIN3:  related small and medium size problems.            \nContributor:  Ed Klotz, CPLEX Optimization Inc.                             \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nklein3      995     88    12107                                             \n                                                                            \n
724`LPnetlib`lpi_mondou2`312`604`1208`yes`312`10`1`0`0%`0%`integer`rectangular`no`no`J. Mondou`J. Chinneck`1999`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nMONDOU2:  medium size problem generated as a subproblem to a larger         \nfacility sizing algorithm used by Hydro-Quebec.  The diagnosis of the       \ninfeasibility in the subproblem is useful to the larger algorithm.          \nContributor:  J.-F.  Mondou, Hydro-Quebec.                                  \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nmondou2     313    604     1623   B                                         \n                                                                            \n
725`LPnetlib`lpi_pang`361`741`2933`yes`361`5`6`0`0%`0%`real`rectangular`no`no`R. Main`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nGOSH, GRAN, PANG:  these very large, large, and medium size models,         \nrespectively, problems arose from British Petroleum operations models.      \nContributor:  Roger Main, BP Oil.                                           \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \npang        362    460     2666   B FR FX                                   \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
726`LPnetlib`lpi_pilot4i`410`1123`5264`yes`410`9`1`0`0%`0%`real`rectangular`no`no`J. Stone`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/data                                                   \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nPILOT4I:  medium size problem generated by doctoring the original NETLIB    \nPILOT4 model.  Contributor:  John Stone, Ketron Management Science.         \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \npilot4i     411   1000     5145   B FR FX                                   \n                                                                            \nAdded to Netlib on Sept. 19, 1993                                           \n                                                                            \n
727`LPnetlib`lpi_qual`323`464`1646`yes`323`13`1`0`0%`0%`real`rectangular`no`no`T. Baker`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCHEMCOM, QUAL, REFINERY, REACTOR, VOL1:  medium size problems derived       \nfrom a petrochemical plant model.  Doctored to generate infeasibility       \ndue to inability to meet volume or quality restrictions.  With the          \nexception of REACTOR, these are highly volatile problems, yielding IISs     \nof varying sizes when different IIS isolation algorithms are applied.       \nSee Chinneck [1993] for further discussion.  Contributor:  Tom Baker,       \nChesapeake Decision Sciences.                                               \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nqual        324    464     1714   B    FX                                   \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
728`LPnetlib`lpi_reactor`318`808`2591`yes`318`1`1`0`0%`0%`real`rectangular`no`no`T. Baker`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCHEMCOM, QUAL, REFINERY, REACTOR, VOL1:  medium size problems derived       \nfrom a petrochemical plant model.  Doctored to generate infeasibility       \ndue to inability to meet volume or quality restrictions.  With the          \nexception of REACTOR, these are highly volatile problems, yielding IISs     \nof varying sizes when different IIS isolation algorithms are applied.       \nSee Chinneck [1993] for further discussion.  Contributor:  Tom Baker,       \nChesapeake Decision Sciences.                                               \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nreactor     319    637     2995   B    FX                                   \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
729`LPnetlib`lpi_refinery`323`464`1626`yes`323`13`2`0`0%`0%`real`rectangular`no`no`T. Baker`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCHEMCOM, QUAL, REFINERY, REACTOR, VOL1:  medium size problems derived       \nfrom a petrochemical plant model.  Doctored to generate infeasibility       \ndue to inability to meet volume or quality restrictions.  With the          \nexception of REACTOR, these are highly volatile problems, yielding IISs     \nof varying sizes when different IIS isolation algorithms are applied.       \nSee Chinneck [1993] for further discussion.  Contributor:  Tom Baker,       \nChesapeake Decision Sciences.                                               \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nrefinery    324    464     1694   B    FX                                   \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
730`LPnetlib`lpi_vol1`323`464`1646`yes`323`13`1`0`0%`0%`real`rectangular`no`no`T. Baker`J. Chinneck`1993`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nCHEMCOM, QUAL, REFINERY, REACTOR, VOL1:  medium size problems derived       \nfrom a petrochemical plant model.  Doctored to generate infeasibility       \ndue to inability to meet volume or quality restrictions.  With the          \nexception of REACTOR, these are highly volatile problems, yielding IISs     \nof varying sizes when different IIS isolation algorithms are applied.       \nSee Chinneck [1993] for further discussion.  Contributor:  Tom Baker,       \nChesapeake Decision Sciences.                                               \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nvol1        324    464     1714   B    FX                                   \n                                                                            \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nJ.W.  Chinneck (1993).  \"Finding the Most Useful Subset of Constraints      \nfor Analysis in an Infeasible Linear Program\", technical report             \nSCE-93-07, Systems and Computer Engineering, Carleton University,           \nOttawa, Canada.                                                             \n                                                                            \n
731`LPnetlib`lpi_woodinfe`35`89`140`yes`35`3`6`0`0%`0%`integer`rectangular`no`no`H. Greenberg`J. Chinneck`1989`linear programming problem`\nAn infeasible Netlib LP problem, in lp/infeas.  For more information        \nsend email to netlib@ornl.gov with the message:                             \n                                                                            \n	send index from lp                                                         \n	send readme from lp/infeas                                                 \n                                                                            \nThe lp/infeas directory contains infeasible linear programming test problems\ncollected by John W. Chinneck, Carleton Univ, Ontario Canada.  The following\nare relevant excerpts from lp/infeas/readme (by John W. Chinneck):          \n                                                                            \nIn the following, IIS stands for Irreducible Infeasible Subsystem, a set    \nof constraints which is itself infeasible, but becomes feasible when any    \none member is removed.  Isolating an IIS from within the larger set of      \nconstraints defining the model is one analysis approach.                    \n                                                                            \nPROBLEM DESCRIPTION                                                         \n-------------------                                                         \n                                                                            \nFOREST6, WOODINFE:  very small problems derived from network-based          \nforestry models.  The IIS in FOREST6 includes most of the rows.             \nWOODINFE is the example problem discussed in detail in Greenberg [1993],    \nand has a very small IIS.  Contributor:  H.J.  Greenberg, University of     \nColorado at Denver.                                                         \n                                                                            \nName       Rows   Cols   Nonzeros Bounds      Notes                         \nwoodinfe     36     89      209   B                                         \n                                                                            \n                                                                            \nREFERENCES                                                                  \n----------                                                                  \n                                                                            \nH.J.  Greenberg (1993).  \"A Computer-Assisted Analysis System for           \nMathematical Programming Models and Solutions:  A User's Guide for          \nANALYZE\", Kluwer Academic Publishers, Boston.                               \n                                                                            \n
732`Li`li`22695`22695`1215181`yes`22695`4`4`135128`symmetric`87%`real`unsymmetric`no`no`B. Li`T. Davis`1999`electromagnetics problem`
733`Li`pli`22695`22695`1350309`yes`22695`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`B. Li`T. Davis`1999`duplicate electromagnetics problem`\nnonzero pattern of Li/li\n
734`Mallya`lhr01`1477`1477`18427`yes`1477`298`21`165`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
735`Mallya`lhr02`2954`2954`36875`yes`2954`596`42`331`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
736`Mallya`lhr04`4101`4101`81057`yes`4101`443`31`1625`2%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
737`Mallya`lhr04c`4101`4101`82682`yes`4101`439`31`0`2%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
738`Mallya`lhr07`7337`7337`154660`yes`7337`676`31`1848`2%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
739`Mallya`lhr07c`7337`7337`156508`yes`7337`672`31`0`2%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
740`Mallya`lhr10`10672`10672`228395`yes`10672`912`31`4238`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
741`Mallya`lhr10c`10672`10672`232633`yes`10672`908`31`0`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
742`Mallya`lhr11`10964`10964`231806`yes`10964`1200`31`1935`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
743`Mallya`lhr11c`10964`10964`233741`yes`10964`1192`31`0`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
744`Mallya`lhr14`14270`14270`305750`yes`14270`1564`31`2108`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
745`Mallya`lhr14c`14270`14270`307858`yes`14270`1556`31`0`1%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
746`Mallya`lhr17`17576`17576`379761`yes`17576`1807`31`2214`0%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
747`Mallya`lhr17c`17576`17576`381975`yes`17576`1798`31`0`0%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
748`Mallya`lhr34`35152`35152`746972`yes`35152`7985`61`17042`0%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
749`Mallya`lhr34c`35152`35152`764014`yes`35152`3533`61`0`0%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
750`Mallya`lhr71`70304`70304`1494006`yes`70304`15970`121`34086`0%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1994`chemical process simulation problem`
751`Mallya`lhr71c`70304`70304`1528092`yes`70304`7066`121`0`0%`0%`real`unsymmetric`no`no`J. Mallya`T. Davis`1997`chemical process simulation problem`
752`Mulvey`finan512`74752`74752`596992`yes`74752`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Berger, J. Mulvey, E. Rothberg, R. Vanderbei`E. Rothberg`1997`economic problem`
753`Mulvey`pfinan512`74752`74752`596992`yes`74752`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Berger, J. Mulvey, E. Rothberg, R. Vanderbei`E. Rothberg`1997`duplicate economic problem`\nThis matrix is the nonzero pattern of Mulvey/finan512\n
754`Nasa`barth`6691`6691`26439`yes`6691`981`981`0`0%`0%`binary`unsymmetric`no`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nLet A=Nasa/barth, then Pothen/barth = spones(A+A') with xyz coord.\n
755`Nasa`barth4`6019`6019`23492`yes`6019`33`33`0`0%`0%`binary`unsymmetric`no`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nLet A=Nasa/barth4, then Pothen/barth4 = spones(A+A') with xyz coord.\n
756`Nasa`barth5`15606`15606`61484`yes`15606`1155`1155`0`0%`0%`binary`unsymmetric`no`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nLet A=Nasa/barth5, then Pothen/barth5 = spones(A+A') with xyz coord.\n
757`Nasa`nasa1824`1824`1824`39208`yes`1824`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`1995`structural problem`
758`Nasa`nasa2146`2146`2146`72250`yes`2146`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`1995`structural problem`
759`Nasa`nasa2910`2910`2910`174296`yes`2910`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`1995`structural problem`
760`Nasa`nasa4704`4704`4704`104756`yes`4704`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`1995`structural problem`
761`Nasa`nasasrb`54870`54870`2677324`yes`54870`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`1995`structural problem`
762`Nasa`pwt`36519`36519`326107`yes`36519`57`57`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nNasa/pwt, GHS_psdef/pwt and Pothen/pwt are identical; Pothen/ has xyz coord.\n
763`Nasa`shuttle_eddy`10429`10429`103599`yes`10429`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nIdentical to Pothen/shuttle_eddy; the latter has xyz coordinates.\n
764`Nasa`skirt`12598`12598`196520`yes`12598`7`7`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nIdentical to Pothen/skirt; the latter has xyz coordinates.\n
765`Nemeth`nemeth01`9506`9506`725054`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`theoretical/quantum chemistry problem sequence`\nnext: Nemeth/nemeth02 first: Nemeth/nemeth01\n
766`Nemeth`nemeth02`9506`9506`394808`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth03 first: Nemeth/nemeth01\n
767`Nemeth`nemeth03`9506`9506`394808`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth04 first: Nemeth/nemeth01\n
768`Nemeth`nemeth04`9506`9506`394808`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth05 first: Nemeth/nemeth01\n
769`Nemeth`nemeth05`9506`9506`394808`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth06 first: Nemeth/nemeth01\n
770`Nemeth`nemeth06`9506`9506`394808`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth07 first: Nemeth/nemeth01\n
771`Nemeth`nemeth07`9506`9506`394812`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth08 first: Nemeth/nemeth01\n
772`Nemeth`nemeth08`9506`9506`394816`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth09 first: Nemeth/nemeth01\n
773`Nemeth`nemeth09`9506`9506`395506`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth10 first: Nemeth/nemeth01\n
774`Nemeth`nemeth10`9506`9506`401448`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth11 first: Nemeth/nemeth01\n
775`Nemeth`nemeth11`9506`9506`408264`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth12 first: Nemeth/nemeth01\n
776`Nemeth`nemeth12`9506`9506`446818`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth13 first: Nemeth/nemeth01\n
777`Nemeth`nemeth13`9506`9506`474472`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth14 first: Nemeth/nemeth01\n
778`Nemeth`nemeth14`9506`9506`496144`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth15 first: Nemeth/nemeth01\n
779`Nemeth`nemeth15`9506`9506`539802`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth16 first: Nemeth/nemeth01\n
780`Nemeth`nemeth16`9506`9506`587012`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth17 first: Nemeth/nemeth01\n
781`Nemeth`nemeth17`9506`9506`629620`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth18 first: Nemeth/nemeth01\n
782`Nemeth`nemeth18`9506`9506`695234`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth19 first: Nemeth/nemeth01\n
783`Nemeth`nemeth19`9506`9506`818302`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth20 first: Nemeth/nemeth01\n
784`Nemeth`nemeth20`9506`9506`971870`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth21 first: Nemeth/nemeth01\n
785`Nemeth`nemeth21`9506`9506`1173746`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth22 first: Nemeth/nemeth01\n
786`Nemeth`nemeth22`9506`9506`1358832`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth23 first: Nemeth/nemeth01\n
787`Nemeth`nemeth23`9506`9506`1506810`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth24 first: Nemeth/nemeth01\n
788`Nemeth`nemeth24`9506`9506`1506550`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth25 first: Nemeth/nemeth01\n
789`Nemeth`nemeth25`9506`9506`1511758`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: Nemeth/nemeth26 first: Nemeth/nemeth01\n
790`Nemeth`nemeth26`9506`9506`1511760`yes`9506`1`1`0`symmetric`symmetric`real`symmetric`no`no`K. Nemeth`T. Davis`1999`subsequent theoretical/quantum chemistry problem`\nnext: - first: Nemeth/nemeth01\n
791`Okunbor`aft01`8205`8205`125567`yes`8205`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`W. Eversman, D. Okunbor`T. Davis`2001`acoustics problem`
792`Okunbor`aft02`8184`8184`127762`yes`8184`1`1`0`symmetric`100%`complex`unsymmetric`no`no`W. Eversman, D. Okunbor`T. Davis`2001`acoustics problem`
793`Qaplib`lp_nug05`210`225`1050`yes`210`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
794`Qaplib`lp_nug06`372`486`2232`yes`372`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
795`Qaplib`lp_nug07`602`931`4214`yes`602`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
796`Qaplib`lp_nug08`912`1632`7296`yes`912`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
797`Qaplib`lp_nug12`3192`8856`38304`yes`3192`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
798`Qaplib`lp_nug15`6330`22275`94950`yes`6330`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
799`Qaplib`lp_nug20`15240`72600`304800`yes`15240`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
800`Qaplib`lp_nug30`52260`379350`1567800`yes`52260`1`1`0`0%`0%`integer`rectangular`no`no`M. Resende`M. Resende`1995`linear programming problem`
801`Ronis`xenon1`48600`48600`1181120`yes`48600`31`31`0`symmetric`78%`real`unsymmetric`no`no`D. Ronis`T. Davis`2001`materials problem`
802`Ronis`xenon2`157464`157464`3866688`yes`157464`55`55`0`symmetric`78%`real`unsymmetric`no`no`D. Ronis`T. Davis`2001`materials problem`
803`Rothberg`3dtube`45330`45330`3213618`yes`45330`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`E. Rothberg`T. Davis`1997`computational fluid dynamics problem`
804`Rothberg`cfd1`70656`70656`1825580`yes`70656`1`1`2784`symmetric`symmetric`real`symmetric`yes`yes`E. Rothberg`T. Davis`1997`computational fluid dynamics problem`
805`Rothberg`cfd2`123440`123440`3085406`yes`123440`1`1`2492`symmetric`symmetric`real`symmetric`yes`yes`E. Rothberg`T. Davis`1997`computational fluid dynamics problem`
806`Rothberg`gearbox`153746`153746`9080404`yes`153746`6`6`0`symmetric`symmetric`binary`symmetric`yes`no`E. Rothberg`T. Davis`1997`structural problem`
807`Rothberg`struct3`53570`53570`1173694`yes`53570`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`E. Rothberg`T. Davis`1997`structural problem`
808`Rothberg`struct4`4350`4350`237798`yes`4350`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`E. Rothberg`T. Davis`1997`structural problem`
809`Shyy`shyy161`76480`76480`329762`yes`76480`25761`321`0`73%`18%`real`unsymmetric`no`no`W. Shyy`T. Davis`1994`computational fluid dynamics problem`
810`Shyy`shyy41`4720`4720`20042`yes`4720`1641`81`0`72%`18%`real`unsymmetric`no`no`W. Shyy`T. Davis`1994`computational fluid dynamics problem`
811`Simon`appu`14000`14000`1853104`unknown`unknown`unknown`1`0`symmetric`94%`real`unsymmetric`no`no`H. Simon`H. Simon`1993`directed weighted random graph`
812`Simon`bbmat`38744`38744`1771722`yes`38744`1`1`0`53%`0%`real`unsymmetric`no`no`H. Simon`H. Simon`1993`computational fluid dynamics problem`
813`Simon`olafu`16146`16146`1015156`yes`16146`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`H. Simon`H. Simon`1993`structural problem`
814`Simon`raefsky1`3242`3242`293409`yes`3242`1`1`867`symmetric`9%`real`unsymmetric`no`no`A. Raefsky`H. Simon`1993`computational fluid dynamics problem sequence`\nnext: Simon/raefsky2 first: Simon/raefsky1\n
815`Simon`raefsky2`3242`3242`293551`yes`3242`1`1`725`symmetric`10%`real`unsymmetric`no`no`A. Raefsky`H. Simon`1993`subsequent computational fluid dynamics problem`\nnext: - first: Simon/raefsky1\n
816`Simon`raefsky3`21200`21200`1488768`yes`21200`1`1`0`symmetric`48%`real`unsymmetric`no`no`A. Raefsky`H. Simon`1993`computational fluid dynamics problem`
817`Simon`raefsky4`19779`19779`1316789`yes`19779`1`1`11822`symmetric`symmetric`real`symmetric`yes`yes`A. Raefsky`H. Simon`1993`structural problem`
818`Simon`raefsky5`6316`6316`167178`yes`6316`6316`6316`1480`0%`0%`real`unsymmetric`no`no`A. Raefsky`H. Simon`1993`structural problem`
819`Simon`raefsky6`3402`3402`130371`yes`3402`3402`3402`7474`0%`0%`real`unsymmetric`no`no`A. Raefsky`H. Simon`1993`structural problem`
820`Simon`venkat01`62424`62424`1717792`yes`62424`1`1`0`symmetric`6%`real`unsymmetric`no`no`V. Venkatakrishnan`H. Simon`1993`computational fluid dynamics problem sequence`\nnext: Simon/venkat25 first: Simon/venkat01\n
821`Simon`venkat25`62424`62424`1717763`yes`62424`1`1`29`symmetric`6%`real`unsymmetric`no`no`V. Venkatakrishnan`H. Simon`1993`subsequent computational fluid dynamics problem`\nnext: Simon/venkat50 first: Simon/venkat01\n
822`Simon`venkat50`62424`62424`1717777`yes`62424`1`1`15`symmetric`6%`real`unsymmetric`no`no`V. Venkatakrishnan`H. Simon`1993`subsequent computational fluid dynamics problem`\nnext: - first: Simon/venkat01\n
823`TOKAMAK`utm1700b`1700`1700`21509`yes`1700`83`83`0`52%`0%`real`unsymmetric`no`no`Y. Saad`Y. Saad`1996`electromagnetics problem`
824`TOKAMAK`utm300`300`300`3155`yes`300`31`31`0`47%`0%`real`unsymmetric`no`no`Y. Saad`Y. Saad`1996`electromagnetics problem`
825`TOKAMAK`utm3060`3060`3060`42211`yes`3060`83`83`0`52%`0%`real`unsymmetric`no`no`Y. Saad`Y. Saad`1996`electromagnetics problem`
826`TOKAMAK`utm5940`5940`5940`83842`yes`5940`147`147`0`53%`0%`real`unsymmetric`no`no`Y. Saad`Y. Saad`1996`electromagnetics problem`
827`Vavasis`av41092`41092`41092`1683902`yes`41092`4`4`0`0%`0%`real`unsymmetric`no`no`S. Vavasis`S. Li`1994`2D/3D problem`
828`Wang`swang1`3169`3169`20841`yes`3169`1`1`0`symmetric`0%`real`unsymmetric`no`no`S. Wang`T. Davis`1994`semiconductor device problem sequence`\nnext: Wang/swang2 first: Wang/swang1\n
829`Wang`swang2`3169`3169`20841`yes`3169`1`1`0`symmetric`0%`real`unsymmetric`no`no`S. Wang`T. Davis`1994`subsequent semiconductor device problem`\nnext: - first: Wang/swang1\n
830`Wang`wang1`2903`2903`19093`yes`2903`1`1`0`symmetric`81%`real`unsymmetric`no`no`S. Wang`T. Davis`1994`semiconductor device problem sequence`\nnext: Wang/wang2 first: Wang/wang1\n
831`Wang`wang2`2903`2903`19093`yes`2903`1`1`0`symmetric`81%`real`unsymmetric`no`no`S. Wang`T. Davis`1994`subsequent semiconductor device problem`\nnext: - first: Wang/wang1\n
832`Wang`wang3`26064`26064`177168`yes`26064`1`1`0`symmetric`98%`real`unsymmetric`no`no`S. Wang`T. Davis`1994`semiconductor device problem`
833`Wang`wang4`26068`26068`177196`yes`26068`1`1`0`symmetric`5%`real`unsymmetric`no`no`S. Wang`T. Davis`1994`semiconductor device problem`
834`Zhao`Zhao1`33861`33861`166453`yes`33861`1`1`0`92%`0%`real`unsymmetric`no`no`L. Zhao`T. Davis`2001`electromagnetics problem`
835`Zhao`Zhao2`33861`33861`166453`yes`33861`1`1`0`92%`0%`real`unsymmetric`no`no`L. Zhao`T. Davis`2001`electromagnetics problem`
836`Zitney`extr1`2837`2837`10967`yes`2837`880`1`440`0%`0%`real`unsymmetric`no`no`S. Zitney`T. Davis`1997`chemical process simulation problem`
837`Zitney`hydr1`5308`5308`22680`yes`5308`1076`1`1072`0%`0%`real`unsymmetric`no`no`S. Zitney`T. Davis`1997`chemical process simulation problem`
838`Zitney`radfr1`1048`1048`13299`yes`1048`98`2`0`5%`0%`real`unsymmetric`no`no`S. Zitney`T. Davis`1997`chemical process simulation problem`
839`Zitney`rdist1`4134`4134`94408`yes`4134`199`2`0`6%`0%`real`unsymmetric`no`no`S. Zitney`T. Davis`1992`chemical process simulation problem`
840`Zitney`rdist2`3198`3198`56834`yes`3198`199`2`100`5%`0%`real`unsymmetric`no`no`S. Zitney`T. Davis`1992`chemical process simulation problem`
841`Zitney`rdist3a`2398`2398`61896`yes`2398`99`2`0`14%`0%`real`unsymmetric`no`no`S. Zitney`T. Davis`1992`chemical process simulation problem`
842`Cunningham`k3plates`11107`11107`378927`yes`11107`1`1`0`symmetric`100%`real`unsymmetric`no`no`A. Cunningham`T. Davis`2002`acoustics problem`
843`Cunningham`m3plates`11107`11107`6639`no`6639`6641`11107`0`symmetric`symmetric`real`symmetric`no`no`A. Cunningham`T. Davis`2002`acoustics problem`
844`Cunningham`qa8fk`66127`66127`1660579`yes`66127`1`1`0`symmetric`symmetric`real`symmetric`yes`no`A. Cunningham`T. Davis`2002`acoustics problem`
845`Cunningham`qa8fm`66127`66127`1660579`yes`66127`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Cunningham`T. Davis`2002`acoustics problem`
846`Boeing`bcsstk39`46772`46772`2060662`yes`46772`1`1`28632`symmetric`symmetric`real`symmetric`yes`no`R. Grimes`T. Davis`2002`structural problem`
847`Chen`pkustk01`22044`22044`979380`yes`22044`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
848`Chen`pkustk02`10800`10800`810000`yes`10800`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
849`Chen`pkustk03`63336`63336`3130416`yes`63336`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
850`Chen`pkustk04`55590`55590`4218660`yes`55590`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
851`Chen`pkustk05`37164`37164`2205144`yes`37164`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
852`Chen`pkustk06`43164`43164`2571768`yes`43164`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
853`Chen`pkustk07`16860`16860`2418804`yes`16860`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
854`Chen`pkustk08`22209`22209`3226671`yes`22209`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
855`Chen`pkustk09`33960`33960`1583640`yes`33960`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
856`Chen`pkustk10`80676`80676`4308984`yes`80676`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
857`Chen`pkustk11`87804`87804`5217912`yes`87804`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
858`Chen`pkustk12`94653`94653`7512317`yes`94653`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
859`Chen`pkustk13`94893`94893`6616827`yes`94893`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
860`Chen`pkustk14`151926`151926`14836504`yes`151926`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`P. Chen`T. Davis`2002`structural problem`
861`MathWorks`pivtol`102`102`306`yes`102`1`1`0`99%`0%`real`unsymmetric`no`no`B. Cheng`T. Davis`2002`statistical/mathematical problem`
862`Kim`kim1`38415`38415`933195`yes`38415`1`1`0`99%`0%`complex`unsymmetric`no`no`W. Kim`T. Davis`2002`2D/3D problem`
863`Kim`kim2`456976`456976`11330020`yes`456976`1`1`0`100%`0%`complex`unsymmetric`no`no`W. Kim`T. Davis`2002`2D/3D problem`
864`Langemyr`comsol`1500`1500`97645`yes`1500`1`1`0`100%`0%`real`unsymmetric`no`no`L. Langemyr`T. Davis`2002`structural problem`
865`Pothen`barth`6691`6691`46187`yes`6691`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
866`Pothen`barth4`6019`6019`40965`yes`6019`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
867`Pothen`barth5`15606`15606`107362`yes`15606`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
868`Pothen`bodyy4`17546`17546`121550`yes`17546`1`1`388`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
869`Pothen`bodyy5`18589`18589`128853`yes`18589`1`1`428`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
870`Pothen`bodyy6`19366`19366`134208`yes`19366`1`1`540`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
871`Pothen`commanche_dual`7920`7920`31680`yes`7920`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
872`Pothen`mesh1e1`48`48`306`yes`48`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
873`Pothen`mesh1em1`48`48`306`yes`48`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
874`Pothen`mesh1em6`48`48`306`yes`48`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
875`Pothen`mesh2e1`306`306`2018`yes`306`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
876`Pothen`mesh2em5`306`306`2018`yes`306`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
877`Pothen`mesh3e1`289`289`1377`yes`289`1`1`512`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
878`Pothen`mesh3em5`289`289`1377`yes`289`1`1`512`symmetric`symmetric`real`symmetric`yes`yes`NASA`G. Kumfert, A. Pothen`2003`structural problem`
879`Pothen`onera_dual`85567`85567`419201`yes`85567`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
880`Pothen`pwt`36519`36519`326107`yes`36519`57`57`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
881`Pothen`shuttle_eddy`10429`10429`103599`yes`10429`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
882`Pothen`skirt`12598`12598`196520`yes`12598`7`7`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
883`Pothen`sphere2`66`66`450`yes`66`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
884`Pothen`sphere3`258`258`1794`yes`258`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
885`Pothen`tandem_dual`94069`94069`460493`yes`94069`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
886`Pothen`tandem_vtx`18454`18454`253350`yes`18454`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`2003`structural problem`
887`Norris`fv1`9604`9604`85264`yes`9604`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. Norris`T. Davis`2003`2D/3D problem`
888`Norris`fv2`9801`9801`87025`yes`9801`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. Norris`T. Davis`2003`2D/3D problem`
889`Norris`fv3`9801`9801`87025`yes`9801`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. Norris`T. Davis`2003`2D/3D problem`
890`Norris`heart1`3557`3557`1385317`yes`3557`1`1`2456`symmetric`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
891`Norris`heart2`2339`2339`680341`yes`2339`1`1`2456`symmetric`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
892`Norris`heart3`2339`2339`680341`yes`2339`1`1`2456`symmetric`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
893`Norris`lung1`1650`1650`7419`yes`1650`2`2`0`57%`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`computational fluid dynamics problem`
894`Norris`lung2`109460`109460`492564`yes`109460`2`2`0`57%`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`computational fluid dynamics problem`
895`Norris`stomach`213360`213360`3021648`yes`213360`1`1`0`85%`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
896`Norris`torso1`116158`116158`8516500`yes`116158`1`1`0`42%`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
897`Norris`torso2`115967`115967`1033473`yes`115967`1`1`0`99%`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
898`Norris`torso3`259156`259156`4429042`yes`259156`1`1`0`95%`0%`real`unsymmetric`no`no`S. Norris`T. Davis`2003`2D/3D problem`
899`Shen`e40r0100`17281`17281`553562`yes`17281`1`1`0`31%`0%`real`unsymmetric`no`no`K. Shen`T. Davis`2003`2D/3D problem`
900`Shen`shermanACa`3432`3432`25220`yes`3432`59`59`0`16%`2%`real`unsymmetric`no`no`K. Shen`T. Davis`2003`2D/3D problem`
901`Shen`shermanACb`18510`18510`145149`yes`18510`851`851`0`15%`3%`real`unsymmetric`no`no`K. Shen`T. Davis`2003`2D/3D problem`
902`Shen`shermanACd`6136`6136`53329`yes`6136`92`92`0`15%`2%`real`unsymmetric`no`no`K. Shen`T. Davis`2003`2D/3D problem`
903`Pereyra`landmark`71952`2704`1146848`no`2673`5`32`4384`0%`0%`real`rectangular`no`no`V. Pereyra`T. Davis`2003`least squares problem`
904`vanHeukelum`cage3`5`5`19`unknown`unknown`unknown`1`0`symmetric`0%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
905`vanHeukelum`cage4`9`9`49`unknown`unknown`unknown`1`0`symmetric`0%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
906`vanHeukelum`cage5`37`37`233`unknown`unknown`unknown`1`0`symmetric`4%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
907`vanHeukelum`cage6`93`93`785`unknown`unknown`unknown`1`0`symmetric`9%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
908`vanHeukelum`cage7`340`340`3084`unknown`unknown`unknown`1`0`symmetric`10%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
909`vanHeukelum`cage8`1015`1015`11003`unknown`unknown`unknown`1`0`symmetric`14%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
910`vanHeukelum`cage9`3534`3534`41594`unknown`unknown`unknown`1`0`symmetric`15%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
911`vanHeukelum`cage10`11397`11397`150645`unknown`unknown`unknown`1`0`symmetric`17%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
912`vanHeukelum`cage11`39082`39082`559722`unknown`unknown`unknown`1`0`symmetric`18%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
913`vanHeukelum`cage12`130228`130228`2032536`unknown`unknown`unknown`1`0`symmetric`19%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
914`vanHeukelum`cage13`445315`445315`7479343`unknown`unknown`unknown`1`0`symmetric`20%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
915`vanHeukelum`cage14`1505785`1505785`27130349`unknown`unknown`unknown`1`0`symmetric`21%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
916`vanHeukelum`cage15`5154859`5154859`99199551`yes`5154859`1`1`0`symmetric`21%`real`unsymmetric`no`no`A. van Heukelum`T. Davis`2003`directed weighted graph`
917`Hohn`fd12`7500`7500`28462`yes`7500`713`1`0`0%`0%`real`unsymmetric`no`no`M. Hohn`T. Davis`2003`materials problem`
918`Hohn`fd15`11532`11532`44206`yes`11532`887`1`0`0%`0%`real`unsymmetric`no`no`M. Hohn`T. Davis`2003`materials problem`
919`Hohn`fd18`16428`16428`63406`yes`16428`1061`1`0`0%`0%`real`unsymmetric`no`no`M. Hohn`T. Davis`2003`materials problem`
920`Hohn`sinc12`7500`7500`283992`yes`7500`527`1`10994`2%`0%`real`unsymmetric`no`no`M. Hohn`T. Davis`2003`materials problem`
921`Hohn`sinc15`11532`11532`551184`yes`11532`653`1`17342`1%`0%`real`unsymmetric`no`no`M. Hohn`T. Davis`2003`materials problem`
922`Hohn`sinc18`16428`16428`948696`yes`16428`779`1`25130`1%`0%`real`unsymmetric`no`no`M. Hohn`T. Davis`2003`materials problem`
923`Alemdar`Alemdar`6245`6245`42581`yes`6245`6`6`0`symmetric`symmetric`integer`symmetric`yes`no`B. Alemdar`T. Davis`2003`2D/3D problem`
924`Andrews`Andrews`60000`60000`760154`yes`60000`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`S. Andrews`T. Davis`2003`computer graphics/vision problem`
925`FEMLAB`ns3Da`20414`20414`1679599`yes`20414`1`1`0`100%`0%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`computational fluid dynamics problem`
926`FEMLAB`poisson2D`367`367`2417`yes`367`1`1`0`symmetric`0%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`computational fluid dynamics problem`
927`FEMLAB`poisson3Da`13514`13514`352762`yes`13514`1`1`0`symmetric`0%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`computational fluid dynamics problem`
928`FEMLAB`poisson3Db`85623`85623`2374949`yes`85623`1`1`0`symmetric`0%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`computational fluid dynamics problem`
929`FEMLAB`problem1`415`415`2779`yes`415`1`1`0`symmetric`65%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`2D/3D problem`
930`FEMLAB`sme3Da`12504`12504`874887`yes`12504`1`1`0`100%`44%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`structural problem`
931`FEMLAB`sme3Db`29067`29067`2081063`yes`29067`1`1`0`100%`44%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`structural problem`
932`FEMLAB`sme3Dc`42930`42930`3148656`yes`42930`1`1`0`100%`44%`real`unsymmetric`no`no`COMSOL`T. Davis`2003`structural problem`
933`FEMLAB`waveguide3D`21036`21036`303468`yes`21036`1`1`0`symmetric`0%`complex`unsymmetric`no`no`COMSOL`T. Davis`2003`electromagnetics problem`
934`Lucifora`cell1`7055`7055`30082`unknown`unknown`unknown`1`4773`100%`0%`real`unsymmetric`no`no`S. Lucifora`T. Davis`2003`directed weighted graph`
935`Lucifora`cell2`7055`7055`30082`unknown`unknown`unknown`1`4773`100%`0%`real`unsymmetric`no`no`S. Lucifora`T. Davis`2003`directed weighted graph`
936`ND`nd3k`9000`9000`3279690`yes`9000`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`author unknown`T. Davis`2003`2D/3D problem`
937`ND`nd6k`18000`18000`6897316`yes`18000`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`author unknown`T. Davis`2003`2D/3D problem`
938`ND`nd12k`36000`36000`14220946`yes`36000`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`author unknown`T. Davis`2003`2D/3D problem`
939`ND`nd24k`72000`72000`28715634`yes`72000`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`author unknown`T. Davis`2003`2D/3D problem`
940`Schenk_AFE`af_shell1`504855`504855`17562051`yes`504855`1`1`26824`symmetric`symmetric`real`symmetric`yes`no`AutoForm Eng.`O. Schenk`2003`structural problem sequence`\nnext: Schenk_AFE/af_shell2 first: Schenk_AFE/af_shell1\n
941`Schenk_AFE`af_shell2`504855`504855`17562051`yes`504855`1`1`26824`symmetric`symmetric`real`symmetric`yes`no`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell3 first: Schenk_AFE/af_shell1\n
942`Schenk_AFE`af_shell3`504855`504855`17562051`yes`504855`1`1`26824`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell4 first: Schenk_AFE/af_shell1\n
943`Schenk_AFE`af_shell4`504855`504855`17562051`yes`504855`1`1`26824`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell5 first: Schenk_AFE/af_shell1\n
944`Schenk_AFE`af_shell5`504855`504855`17579155`yes`504855`1`1`9720`symmetric`symmetric`real`symmetric`yes`no`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell6 first: Schenk_AFE/af_shell1\n
945`Schenk_AFE`af_shell6`504855`504855`17579155`yes`504855`1`1`9720`symmetric`symmetric`real`symmetric`yes`no`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell7 first: Schenk_AFE/af_shell1\n
946`Schenk_AFE`af_shell7`504855`504855`17579155`yes`504855`1`1`9720`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell8 first: Schenk_AFE/af_shell1\n
947`Schenk_AFE`af_shell8`504855`504855`17579155`yes`504855`1`1`9720`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: Schenk_AFE/af_shell9 first: Schenk_AFE/af_shell1\n
948`Schenk_AFE`af_shell9`504855`504855`17588845`yes`504855`1`1`30`symmetric`symmetric`real`symmetric`yes`no`AutoForm Eng.`O. Schenk`2003`subsequent structural problem`\nnext: - first: Schenk_AFE/af_shell1\n
949`Schenk_IBMNA`c-62`41731`41731`559341`yes`41731`2`2`2`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2003`optimization problem sequence`\nnext: GHS_indef/c-62ghs first: Schenk_IBMNA/c-62                   \nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
950`Schenk_IBMNA`c-64`51035`51035`707985`yes`51035`1`1`9856`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2003`optimization problem sequence`\nnext: Schenk_IBMNA/c-64b first: Schenk_IBMNA/c-64\n
951`Schenk_IBMNA`c-66`49989`49989`444853`yes`49989`6`6`54154`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2003`optimization problem sequence`\nnext: Schenk_IBMNA/c-66b first: Schenk_IBMNA/c-66\n
952`Schenk_IBMNA`c-67`57975`57975`530229`yes`57975`342`342`1706`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2003`optimization problem sequence`\nnext: Schenk_IBMNA/c-67b first: Schenk_IBMNA/c-67\n
953`Schenk_IBMNA`c-73`169422`169422`1279274`yes`169422`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2003`optimization problem sequence`\nnext: Schenk_IBMNA/c-73b first: Schenk_IBMNA/c-73\n
954`Schenk_IBMSDS`2D_27628_bjtcai`27628`27628`206670`yes`27628`6361`6361`236228`100%`22%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
955`Schenk_IBMSDS`2D_54019_highK`54019`54019`486129`yes`54019`7157`7157`510285`100%`19%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
956`Schenk_IBMSDS`3D_28984_Tetra`28984`28984`285092`yes`28984`5439`5439`314078`99%`36%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
957`Schenk_IBMSDS`3D_51448_3D`51448`51448`537038`yes`51448`6627`6627`519572`99%`19%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
958`Schenk_IBMSDS`ibm_matrix_2`51448`51448`537038`yes`51448`6627`6627`519572`99%`19%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
959`Schenk_IBMSDS`matrix_9`103430`103430`1205518`yes`103430`4059`4059`916032`100%`17%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
960`Schenk_IBMSDS`matrix-new_3`125329`125329`893984`yes`125329`46658`46658`1784766`99%`28%`real`unsymmetric`no`no`IBM`O. Schenk`2003`semiconductor device problem`
961`Schenk_ISEI`barrier2-10`115625`115625`2158759`yes`115625`436`436`1738798`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/barrier2-11 first: Schenk_ISEI/barrier2-9\n
962`Schenk_ISEI`barrier2-11`115625`115625`2158759`yes`115625`436`436`1738798`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/barrier2-12 first: Schenk_ISEI/barrier2-9\n
963`Schenk_ISEI`barrier2-12`115625`115625`2158759`yes`115625`436`436`1738798`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: - first: Schenk_ISEI/barrier2-9\n
964`Schenk_ISEI`barrier2-1`113076`113076`2129496`yes`113076`1`1`1675572`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem sequence`\nnext: Schenk_ISEI/barrier2-2 first: Schenk_ISEI/barrier2-1\n
965`Schenk_ISEI`barrier2-2`113076`113076`2129496`yes`113076`1`1`1675572`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/barrier2-3 first: Schenk_ISEI/barrier2-1\n
966`Schenk_ISEI`barrier2-3`113076`113076`2129496`yes`113076`1`1`1675572`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/barrier2-4 first: Schenk_ISEI/barrier2-1\n
967`Schenk_ISEI`barrier2-4`113076`113076`2129496`yes`113076`1`1`1675572`symmetric`19%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: - first: Schenk_ISEI/barrier2-1\n
968`Schenk_ISEI`barrier2-9`115625`115625`2158759`yes`115625`436`436`1738798`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem sequence`\nnext: Schenk_ISEI/barrier2-10 first: Schenk_ISEI/barrier2-9\n
969`Schenk_ISEI`igbt3`10938`10938`130500`yes`10938`1`1`103506`symmetric`17%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem`
970`Schenk_ISEI`nmos3`18588`18588`237130`yes`18588`1`1`149464`symmetric`17%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem`
971`Schenk_ISEI`ohne2`181343`181343`6869939`yes`181343`1`1`4193606`symmetric`9%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem`
972`Schenk_ISEI`para-10`155924`155924`2094873`yes`155924`565`565`3321485`symmetric`20%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: - first: Schenk_ISEI/para-5\n
973`Schenk_ISEI`para-4`153226`153226`2930882`yes`153226`1`1`2395346`symmetric`29%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem`
974`Schenk_ISEI`para-5`155924`155924`2094873`yes`155924`565`565`3321485`symmetric`37%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`semiconductor device problem sequence`\nnext: Schenk_ISEI/para-6 first: Schenk_ISEI/para-5\n
975`Schenk_ISEI`para-6`155924`155924`2094873`yes`155924`565`565`3321485`symmetric`37%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/para-7 first: Schenk_ISEI/para-5\n
976`Schenk_ISEI`para-7`155924`155924`2094873`yes`155924`565`565`3321485`symmetric`37%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/para-8 first: Schenk_ISEI/para-5\n
977`Schenk_ISEI`para-8`155924`155924`2094873`yes`155924`565`565`3321485`symmetric`18%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/para-9 first: Schenk_ISEI/para-5\n
978`Schenk_ISEI`para-9`155924`155924`2094873`yes`155924`565`565`3321485`symmetric`18%`real`unsymmetric`no`no`Integrated Sys. Eng.`O. Schenk`2003`subsequent semiconductor device problem`\nnext: Schenk_ISEI/para-10 first: Schenk_ISEI/para-5\n
979`Kamvar`Stanford`281903`281903`2312497`unknown`unknown`unknown`29914`0`28%`28%`binary`unsymmetric`no`no`S. Kamvar`T. Davis`2003`directed graph`
980`Kamvar`Stanford_Berkeley`683446`683446`7583376`unknown`unknown`unknown`109238`0`25%`25%`binary`unsymmetric`no`no`S. Kamvar`T. Davis`2003`directed graph`
981`Sumner`graphics`29493`11822`117954`yes`11822`1`1`0`0%`0%`real`rectangular`no`no`R. Sumner`T. Davis`2003`computer graphics/vision problem`
982`Tromble`language`399130`399130`1216334`unknown`unknown`unknown`2456`0`6%`0%`real`unsymmetric`no`no`R. Tromble`T. Davis`2003`directed weighted graph`
983`Sanghavi`ecl32`51993`51993`380415`yes`51993`9653`9653`0`92%`60%`real`unsymmetric`no`no`J. Sanghavi`C. Voemel`2003`semiconductor device problem`
984`Sandia`adder_dcop_01`1813`1813`11156`yes`1813`469`6`0`65%`2%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_02 first: Sandia/init_adder1\n
985`Sandia`adder_dcop_02`1813`1813`11246`yes`1813`469`6`0`65%`3%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_03 first: Sandia/init_adder1\n
986`Sandia`adder_dcop_03`1813`1813`11148`yes`1813`483`7`0`64%`4%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_04 first: Sandia/init_adder1\n
987`Sandia`adder_dcop_04`1813`1813`11107`yes`1813`474`8`0`65%`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_05 first: Sandia/init_adder1\n
988`Sandia`adder_dcop_05`1813`1813`11097`yes`1813`473`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_06 first: Sandia/init_adder1\n
989`Sandia`adder_dcop_06`1813`1813`11224`yes`1813`470`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_07 first: Sandia/init_adder1\n
990`Sandia`adder_dcop_07`1813`1813`11226`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_08 first: Sandia/init_adder1\n
991`Sandia`adder_dcop_08`1813`1813`11242`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_09 first: Sandia/init_adder1\n
992`Sandia`adder_dcop_09`1813`1813`11239`yes`1813`470`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_10 first: Sandia/init_adder1\n
993`Sandia`adder_dcop_10`1813`1813`11232`yes`1813`473`7`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_11 first: Sandia/init_adder1\n
994`Sandia`adder_dcop_11`1813`1813`11243`yes`1813`470`6`0`65%`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_12 first: Sandia/init_adder1\n
995`Sandia`adder_dcop_12`1813`1813`11246`yes`1813`469`6`0`65%`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_13 first: Sandia/init_adder1\n
996`Sandia`adder_dcop_13`1813`1813`11245`yes`1813`469`6`0`65%`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_14 first: Sandia/init_adder1\n
997`Sandia`adder_dcop_14`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_15 first: Sandia/init_adder1\n
998`Sandia`adder_dcop_15`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_16 first: Sandia/init_adder1\n
999`Sandia`adder_dcop_16`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_17 first: Sandia/init_adder1\n
1000`Sandia`adder_dcop_17`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_18 first: Sandia/init_adder1\n
1001`Sandia`adder_dcop_18`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_19 first: Sandia/init_adder1\n
1002`Sandia`adder_dcop_19`1813`1813`11245`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_20 first: Sandia/init_adder1\n
1003`Sandia`adder_dcop_20`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_21 first: Sandia/init_adder1\n
1004`Sandia`adder_dcop_21`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_22 first: Sandia/init_adder1\n
1005`Sandia`adder_dcop_22`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_23 first: Sandia/init_adder1\n
1006`Sandia`adder_dcop_23`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_24 first: Sandia/init_adder1\n
1007`Sandia`adder_dcop_24`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_25 first: Sandia/init_adder1\n
1008`Sandia`adder_dcop_25`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_26 first: Sandia/init_adder1\n
1009`Sandia`adder_dcop_26`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_27 first: Sandia/init_adder1\n
1010`Sandia`adder_dcop_27`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_28 first: Sandia/init_adder1\n
1011`Sandia`adder_dcop_28`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_29 first: Sandia/init_adder1\n
1012`Sandia`adder_dcop_29`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_30 first: Sandia/init_adder1\n
1013`Sandia`adder_dcop_30`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_31 first: Sandia/init_adder1\n
1014`Sandia`adder_dcop_31`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_32 first: Sandia/init_adder1\n
1015`Sandia`adder_dcop_32`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_33 first: Sandia/init_adder1\n
1016`Sandia`adder_dcop_33`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_34 first: Sandia/init_adder1\n
1017`Sandia`adder_dcop_34`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_35 first: Sandia/init_adder1\n
1018`Sandia`adder_dcop_35`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_36 first: Sandia/init_adder1\n
1019`Sandia`adder_dcop_36`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_37 first: Sandia/init_adder1\n
1020`Sandia`adder_dcop_37`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_38 first: Sandia/init_adder1\n
1021`Sandia`adder_dcop_38`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_39 first: Sandia/init_adder1\n
1022`Sandia`adder_dcop_39`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_40 first: Sandia/init_adder1\n
1023`Sandia`adder_dcop_40`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_41 first: Sandia/init_adder1\n
1024`Sandia`adder_dcop_41`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_42 first: Sandia/init_adder1\n
1025`Sandia`adder_dcop_42`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_43 first: Sandia/init_adder1\n
1026`Sandia`adder_dcop_43`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_44 first: Sandia/init_adder1\n
1027`Sandia`adder_dcop_44`1813`1813`11245`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_45 first: Sandia/init_adder1\n
1028`Sandia`adder_dcop_45`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_46 first: Sandia/init_adder1\n
1029`Sandia`adder_dcop_46`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_47 first: Sandia/init_adder1\n
1030`Sandia`adder_dcop_47`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_48 first: Sandia/init_adder1\n
1031`Sandia`adder_dcop_48`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_49 first: Sandia/init_adder1\n
1032`Sandia`adder_dcop_49`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_50 first: Sandia/init_adder1\n
1033`Sandia`adder_dcop_50`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_51 first: Sandia/init_adder1\n
1034`Sandia`adder_dcop_51`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_52 first: Sandia/init_adder1\n
1035`Sandia`adder_dcop_52`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_53 first: Sandia/init_adder1\n
1036`Sandia`adder_dcop_53`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_54 first: Sandia/init_adder1\n
1037`Sandia`adder_dcop_54`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_55 first: Sandia/init_adder1\n
1038`Sandia`adder_dcop_55`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_56 first: Sandia/init_adder1\n
1039`Sandia`adder_dcop_56`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_57 first: Sandia/init_adder1\n
1040`Sandia`adder_dcop_57`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_58 first: Sandia/init_adder1\n
1041`Sandia`adder_dcop_58`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_59 first: Sandia/init_adder1\n
1042`Sandia`adder_dcop_59`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_60 first: Sandia/init_adder1\n
1043`Sandia`adder_dcop_60`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_61 first: Sandia/init_adder1\n
1044`Sandia`adder_dcop_61`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_62 first: Sandia/init_adder1\n
1045`Sandia`adder_dcop_62`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_63 first: Sandia/init_adder1\n
1046`Sandia`adder_dcop_63`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_64 first: Sandia/init_adder1\n
1047`Sandia`adder_dcop_64`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_65 first: Sandia/init_adder1\n
1048`Sandia`adder_dcop_65`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_66 first: Sandia/init_adder1\n
1049`Sandia`adder_dcop_66`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_67 first: Sandia/init_adder1\n
1050`Sandia`adder_dcop_67`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_68 first: Sandia/init_adder1\n
1051`Sandia`adder_dcop_68`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/adder_dcop_69 first: Sandia/init_adder1\n
1052`Sandia`adder_dcop_69`1813`1813`11246`yes`1813`469`6`0`65%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: - first: Sandia/init_adder1\n
1053`Sandia`adder_trans_01`1814`1814`14579`yes`1814`20`3`0`symmetric`3%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem sequence`\nnext: Sandia/adder_trans_02 first: Sandia/adder_trans_01\n
1054`Sandia`adder_trans_02`1814`1814`14579`yes`1814`20`3`0`symmetric`3%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: - first: Sandia/adder_trans_01\n
1055`Sandia`fpga_dcop_01`1220`1220`5892`yes`1220`188`34`0`82%`27%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem sequence`\nnext: Sandia/fpga_dcop_02 first: Sandia/fpga_dcop_01\n
1056`Sandia`fpga_dcop_02`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_03 first: Sandia/fpga_dcop_01\n
1057`Sandia`fpga_dcop_03`1220`1220`5892`yes`1220`188`34`0`82%`34%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_04 first: Sandia/fpga_dcop_01\n
1058`Sandia`fpga_dcop_04`1220`1220`5884`yes`1220`189`34`0`82%`35%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_05 first: Sandia/fpga_dcop_01\n
1059`Sandia`fpga_dcop_05`1220`1220`5852`yes`1220`194`34`0`82%`36%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_06 first: Sandia/fpga_dcop_01\n
1060`Sandia`fpga_dcop_06`1220`1220`5860`yes`1220`193`34`0`82%`35%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_07 first: Sandia/fpga_dcop_01\n
1061`Sandia`fpga_dcop_07`1220`1220`5855`yes`1220`193`34`0`82%`34%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_08 first: Sandia/fpga_dcop_01\n
1062`Sandia`fpga_dcop_08`1220`1220`5888`yes`1220`189`34`0`82%`34%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_09 first: Sandia/fpga_dcop_01\n
1063`Sandia`fpga_dcop_09`1220`1220`5888`yes`1220`189`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_10 first: Sandia/fpga_dcop_01\n
1064`Sandia`fpga_dcop_10`1220`1220`5884`yes`1220`190`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_11 first: Sandia/fpga_dcop_01\n
1065`Sandia`fpga_dcop_11`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_12 first: Sandia/fpga_dcop_01\n
1066`Sandia`fpga_dcop_12`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_13 first: Sandia/fpga_dcop_01\n
1067`Sandia`fpga_dcop_13`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_14 first: Sandia/fpga_dcop_01\n
1068`Sandia`fpga_dcop_14`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_15 first: Sandia/fpga_dcop_01\n
1069`Sandia`fpga_dcop_15`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_16 first: Sandia/fpga_dcop_01\n
1070`Sandia`fpga_dcop_16`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_17 first: Sandia/fpga_dcop_01\n
1071`Sandia`fpga_dcop_17`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_18 first: Sandia/fpga_dcop_01\n
1072`Sandia`fpga_dcop_18`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_19 first: Sandia/fpga_dcop_01\n
1073`Sandia`fpga_dcop_19`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_20 first: Sandia/fpga_dcop_01\n
1074`Sandia`fpga_dcop_20`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_21 first: Sandia/fpga_dcop_01\n
1075`Sandia`fpga_dcop_21`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_22 first: Sandia/fpga_dcop_01\n
1076`Sandia`fpga_dcop_22`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_23 first: Sandia/fpga_dcop_01\n
1077`Sandia`fpga_dcop_23`1220`1220`5892`yes`1220`188`34`0`82%`32%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_24 first: Sandia/fpga_dcop_01\n
1078`Sandia`fpga_dcop_24`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_25 first: Sandia/fpga_dcop_01\n
1079`Sandia`fpga_dcop_25`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_26 first: Sandia/fpga_dcop_01\n
1080`Sandia`fpga_dcop_26`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_27 first: Sandia/fpga_dcop_01\n
1081`Sandia`fpga_dcop_27`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_28 first: Sandia/fpga_dcop_01\n
1082`Sandia`fpga_dcop_28`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_29 first: Sandia/fpga_dcop_01\n
1083`Sandia`fpga_dcop_29`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_30 first: Sandia/fpga_dcop_01\n
1084`Sandia`fpga_dcop_30`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_31 first: Sandia/fpga_dcop_01\n
1085`Sandia`fpga_dcop_31`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_32 first: Sandia/fpga_dcop_01\n
1086`Sandia`fpga_dcop_32`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_33 first: Sandia/fpga_dcop_01\n
1087`Sandia`fpga_dcop_33`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_34 first: Sandia/fpga_dcop_01\n
1088`Sandia`fpga_dcop_34`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_35 first: Sandia/fpga_dcop_01\n
1089`Sandia`fpga_dcop_35`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_36 first: Sandia/fpga_dcop_01\n
1090`Sandia`fpga_dcop_36`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_37 first: Sandia/fpga_dcop_01\n
1091`Sandia`fpga_dcop_37`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_38 first: Sandia/fpga_dcop_01\n
1092`Sandia`fpga_dcop_38`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_39 first: Sandia/fpga_dcop_01\n
1093`Sandia`fpga_dcop_39`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_40 first: Sandia/fpga_dcop_01\n
1094`Sandia`fpga_dcop_40`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_41 first: Sandia/fpga_dcop_01\n
1095`Sandia`fpga_dcop_41`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_42 first: Sandia/fpga_dcop_01\n
1096`Sandia`fpga_dcop_42`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_43 first: Sandia/fpga_dcop_01\n
1097`Sandia`fpga_dcop_43`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_44 first: Sandia/fpga_dcop_01\n
1098`Sandia`fpga_dcop_44`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_45 first: Sandia/fpga_dcop_01\n
1099`Sandia`fpga_dcop_45`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_46 first: Sandia/fpga_dcop_01\n
1100`Sandia`fpga_dcop_46`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_47 first: Sandia/fpga_dcop_01\n
1101`Sandia`fpga_dcop_47`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_48 first: Sandia/fpga_dcop_01\n
1102`Sandia`fpga_dcop_48`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_49 first: Sandia/fpga_dcop_01\n
1103`Sandia`fpga_dcop_49`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_50 first: Sandia/fpga_dcop_01\n
1104`Sandia`fpga_dcop_50`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/fpga_dcop_51 first: Sandia/fpga_dcop_01\n
1105`Sandia`fpga_dcop_51`1220`1220`5892`yes`1220`188`34`0`82%`33%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: - first: Sandia/fpga_dcop_01\n
1106`Sandia`fpga_trans_01`1220`1220`7382`yes`1220`133`1`0`symmetric`21%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem sequence`\nnext: Sandia/fpga_trans_02 first: Sandia/fpga_trans_01\n
1107`Sandia`fpga_trans_02`1220`1220`7382`yes`1220`133`1`0`symmetric`21%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: - first: Sandia/fpga_trans_01\n
1108`Sandia`init_adder1`1813`1813`11156`yes`1813`469`6`0`65%`2%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem sequence`\nnext: Sandia/adder_dcop_01 first: Sandia/init_adder1\n
1109`Sandia`mult_dcop_01`25187`25187`193276`yes`25187`7417`107`0`61%`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem sequence`\nnext: Sandia/mult_dcop_02 first: Sandia/mult_dcop_01\n
1110`Sandia`mult_dcop_02`25187`25187`193276`yes`25187`7417`107`0`61%`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/mult_dcop_03 first: Sandia/mult_dcop_01\n
1111`Sandia`mult_dcop_03`25187`25187`193216`yes`25187`7447`107`0`61%`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: - first: Sandia/mult_dcop_01\n
1112`Sandia`oscil_dcop_01`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem sequence`\nnext: Sandia/oscil_dcop_02 first: Sandia/oscil_dcop_01\n
1113`Sandia`oscil_dcop_02`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_03 first: Sandia/oscil_dcop_01\n
1114`Sandia`oscil_dcop_03`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_04 first: Sandia/oscil_dcop_01\n
1115`Sandia`oscil_dcop_04`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_05 first: Sandia/oscil_dcop_01\n
1116`Sandia`oscil_dcop_05`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_06 first: Sandia/oscil_dcop_01\n
1117`Sandia`oscil_dcop_06`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_07 first: Sandia/oscil_dcop_01\n
1118`Sandia`oscil_dcop_07`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_08 first: Sandia/oscil_dcop_01\n
1119`Sandia`oscil_dcop_08`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_09 first: Sandia/oscil_dcop_01\n
1120`Sandia`oscil_dcop_09`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_10 first: Sandia/oscil_dcop_01\n
1121`Sandia`oscil_dcop_10`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_11 first: Sandia/oscil_dcop_01\n
1122`Sandia`oscil_dcop_11`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_12 first: Sandia/oscil_dcop_01\n
1123`Sandia`oscil_dcop_12`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_13 first: Sandia/oscil_dcop_01\n
1124`Sandia`oscil_dcop_13`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_14 first: Sandia/oscil_dcop_01\n
1125`Sandia`oscil_dcop_14`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_15 first: Sandia/oscil_dcop_01\n
1126`Sandia`oscil_dcop_15`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_16 first: Sandia/oscil_dcop_01\n
1127`Sandia`oscil_dcop_16`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_17 first: Sandia/oscil_dcop_01\n
1128`Sandia`oscil_dcop_17`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_18 first: Sandia/oscil_dcop_01\n
1129`Sandia`oscil_dcop_18`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_19 first: Sandia/oscil_dcop_01\n
1130`Sandia`oscil_dcop_19`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_20 first: Sandia/oscil_dcop_01\n
1131`Sandia`oscil_dcop_20`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_21 first: Sandia/oscil_dcop_01\n
1132`Sandia`oscil_dcop_21`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_22 first: Sandia/oscil_dcop_01\n
1133`Sandia`oscil_dcop_22`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_23 first: Sandia/oscil_dcop_01\n
1134`Sandia`oscil_dcop_23`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_24 first: Sandia/oscil_dcop_01\n
1135`Sandia`oscil_dcop_24`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_25 first: Sandia/oscil_dcop_01\n
1136`Sandia`oscil_dcop_25`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_26 first: Sandia/oscil_dcop_01\n
1137`Sandia`oscil_dcop_26`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_27 first: Sandia/oscil_dcop_01\n
1138`Sandia`oscil_dcop_27`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_28 first: Sandia/oscil_dcop_01\n
1139`Sandia`oscil_dcop_28`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_29 first: Sandia/oscil_dcop_01\n
1140`Sandia`oscil_dcop_29`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_30 first: Sandia/oscil_dcop_01\n
1141`Sandia`oscil_dcop_30`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_31 first: Sandia/oscil_dcop_01\n
1142`Sandia`oscil_dcop_31`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_32 first: Sandia/oscil_dcop_01\n
1143`Sandia`oscil_dcop_32`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_33 first: Sandia/oscil_dcop_01\n
1144`Sandia`oscil_dcop_33`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_34 first: Sandia/oscil_dcop_01\n
1145`Sandia`oscil_dcop_34`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_35 first: Sandia/oscil_dcop_01\n
1146`Sandia`oscil_dcop_35`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_36 first: Sandia/oscil_dcop_01\n
1147`Sandia`oscil_dcop_36`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_37 first: Sandia/oscil_dcop_01\n
1148`Sandia`oscil_dcop_37`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_38 first: Sandia/oscil_dcop_01\n
1149`Sandia`oscil_dcop_38`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_39 first: Sandia/oscil_dcop_01\n
1150`Sandia`oscil_dcop_39`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_40 first: Sandia/oscil_dcop_01\n
1151`Sandia`oscil_dcop_40`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_41 first: Sandia/oscil_dcop_01\n
1152`Sandia`oscil_dcop_41`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_42 first: Sandia/oscil_dcop_01\n
1153`Sandia`oscil_dcop_42`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_43 first: Sandia/oscil_dcop_01\n
1154`Sandia`oscil_dcop_43`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_44 first: Sandia/oscil_dcop_01\n
1155`Sandia`oscil_dcop_44`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_45 first: Sandia/oscil_dcop_01\n
1156`Sandia`oscil_dcop_45`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_46 first: Sandia/oscil_dcop_01\n
1157`Sandia`oscil_dcop_46`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_47 first: Sandia/oscil_dcop_01\n
1158`Sandia`oscil_dcop_47`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_48 first: Sandia/oscil_dcop_01\n
1159`Sandia`oscil_dcop_48`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_49 first: Sandia/oscil_dcop_01\n
1160`Sandia`oscil_dcop_49`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_50 first: Sandia/oscil_dcop_01\n
1161`Sandia`oscil_dcop_50`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_51 first: Sandia/oscil_dcop_01\n
1162`Sandia`oscil_dcop_51`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_52 first: Sandia/oscil_dcop_01\n
1163`Sandia`oscil_dcop_52`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_53 first: Sandia/oscil_dcop_01\n
1164`Sandia`oscil_dcop_53`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_54 first: Sandia/oscil_dcop_01\n
1165`Sandia`oscil_dcop_54`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_55 first: Sandia/oscil_dcop_01\n
1166`Sandia`oscil_dcop_55`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_56 first: Sandia/oscil_dcop_01\n
1167`Sandia`oscil_dcop_56`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: Sandia/oscil_dcop_57 first: Sandia/oscil_dcop_01\n
1168`Sandia`oscil_dcop_57`430`430`1544`yes`430`31`9`0`98%`70%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`subsequent circuit simulation problem`\nnext: - first: Sandia/oscil_dcop_01\n
1169`Sandia`oscil_trans_01`430`430`1614`yes`430`19`9`0`97%`72%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2003`circuit simulation problem`
1170`MathWorks`Pd`8081`8081`13036`yes`8081`7877`7877`0`0%`0%`real`unsymmetric`no`no`P. Anderson`T. Davis`2002`counter-example problem`
1171`MathWorks`Pd_rhs`8081`12406`6323`no`4368`2872`14549`0`0%`0%`real`rectangular`no`no`P. Anderson`T. Davis`2002`counter-example problem`
1172`MathWorks`Harvard500`500`500`2636`unknown`unknown`unknown`147`0`41%`41%`binary`unsymmetric`no`no`C. Moler`T. Davis`2002`directed graph`
1173`HB`cegb2802`2802`2802`277362`no`2694`3`109`0`symmetric`symmetric`binary`symmetric`no`no`A. Donovan`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1174`HB`cegb2919`2919`2919`321543`no`2859`3`61`0`symmetric`symmetric`binary`symmetric`no`no`A. Donovan`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1175`HB`cegb3024`3024`3024`79848`no`2996`3`29`0`symmetric`symmetric`binary`symmetric`no`no`A. Donovan`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1176`HB`cegb3306`3306`3306`74916`no`3222`3`85`0`symmetric`symmetric`binary`symmetric`no`no`A. Donovan`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1177`HB`lap_25`25`25`169`yes`25`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`I. Duff`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1178`HB`lock1074`1074`1074`51588`no`1038`3`37`0`symmetric`symmetric`binary`symmetric`no`no`W. Loden`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1179`HB`lock2232`2232`2232`80352`no`2208`3`25`0`symmetric`symmetric`binary`symmetric`no`no`W. Loden`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1180`HB`lock3491`3491`3491`160444`no`3416`3`76`0`symmetric`symmetric`binary`symmetric`no`no`W. Loden`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1181`HB`lock_700`700`700`22175`no`691`3`10`0`symmetric`symmetric`binary`symmetric`no`no`W. Loden`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1182`HB`man_5976`5976`5976`225046`no`5882`3`95`0`symmetric`symmetric`binary`symmetric`no`no`T. Manteuffel`I. Duff, R. Grimes, J. Lewis`1980`structural problem`
1183`IBM_Austin`coupled`11341`11341`97193`yes`11341`49`1`1330`symmetric`78%`real`unsymmetric`no`no`E. Acar`T. Davis`2004`circuit simulation problem`
1184`ACUSIM`Pres_Poisson`14822`14822`715804`yes`14822`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`F. Shakib`T. Davis`2004`computational fluid dynamics problem`
1185`Rajat`rajat01`6833`6833`43250`yes`6833`507`66`0`100%`100%`binary`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1186`Rajat`rajat02`1960`1960`11187`yes`1960`58`10`0`symmetric`symmetric`binary`symmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1187`Rajat`rajat03`7602`7602`32653`yes`7602`103`1`0`symmetric`40%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1188`Rajat`rajat04`1041`1041`8725`yes`1041`67`1`917`symmetric`4%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1189`Rajat`rajat05`301`301`1250`yes`301`15`9`134`77%`71%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1190`Rajat`rajat06`10922`10922`46983`yes`10922`123`1`0`symmetric`symmetric`binary`symmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1191`Rajat`rajat07`14842`14842`63913`yes`14842`143`1`0`symmetric`symmetric`binary`symmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1192`Rajat`rajat08`19362`19362`83443`yes`19362`163`1`0`symmetric`symmetric`binary`symmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1193`Rajat`rajat09`24482`24482`105573`yes`24482`183`1`0`symmetric`symmetric`binary`symmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1194`Rajat`rajat10`30202`30202`130303`yes`30202`203`1`0`symmetric`symmetric`binary`symmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1195`Rajat`rajat11`135`135`665`yes`135`7`1`147`89%`63%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1196`Rajat`rajat12`1879`1879`12818`yes`1879`24`1`108`symmetric`45%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1197`Rajat`rajat13`7598`7598`48762`yes`7598`134`109`160`symmetric`30%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1198`Rajat`rajat14`180`180`1475`yes`180`19`1`28`symmetric`2%`real`unsymmetric`no`no`Rajat`T. Davis`2004`circuit simulation problem`
1199`Hamrle`Hamrle1`32`32`98`yes`32`1`1`0`6%`0%`real`unsymmetric`no`no`J. Hamrle`T. Davis`2004`circuit simulation problem`
1200`Hamrle`Hamrle2`5952`5952`22162`yes`5952`1`1`0`0%`0%`real`unsymmetric`no`no`J. Hamrle`T. Davis`2004`circuit simulation problem`
1201`Hamrle`Hamrle3`1447360`1447360`5514242`yes`1447360`1`1`0`0%`0%`real`unsymmetric`no`no`J. Hamrle`T. Davis`2004`circuit simulation problem`
1202`Oberwolfach`gyro_k`17361`17361`1021159`yes`17361`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Billger`E. Rudnyi`2004`duplicate model reduction problem`
1203`Oberwolfach`gyro_m`17361`17361`340431`yes`17361`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`D. Billger`E. Rudnyi`2004`duplicate model reduction problem`
1204`Oberwolfach`t2dah_a`11445`11445`176117`yes`11445`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1205`Oberwolfach`t2dah_e`11445`11445`176117`yes`11445`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1206`Oberwolfach`t2dal_a`4257`4257`37465`yes`4257`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1207`Oberwolfach`t2dal_e`4257`4257`4257`yes`4257`4257`4257`0`symmetric`symmetric`real`symmetric`yes`yes`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1208`Oberwolfach`t3dh_a`79171`79171`4352105`yes`79171`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1209`Oberwolfach`t3dh_e`79171`79171`4352105`yes`79171`1`1`0`symmetric`symmetric`real`symmetric`yes`no`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1210`Oberwolfach`t3dl_a`20360`20360`509866`yes`20360`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1211`Oberwolfach`t3dl_e`20360`20360`20360`yes`20360`20360`20360`0`symmetric`symmetric`real`symmetric`yes`yes`E. Rudnyi`E. Rudnyi`2004`duplicate model reduction problem`
1212`LiuWenzhuo`powersim`15838`15838`64424`yes`15838`3600`3600`3138`59%`53%`real`unsymmetric`no`no`W. Liu`T. Davis`2004`power network problem`
1213`Lin`Lin`256000`256000`1766400`yes`256000`1`1`0`symmetric`symmetric`real`symmetric`yes`no`C. Lin`T. Davis`2004`structural problem`
1214`Cannizzo`sts4098`4098`4098`72356`yes`4098`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`F. Cannizzo`T. Davis`2004`structural problem`
1215`GHS_indef`aug2d`29008`29008`76832`no`19208`2`1`0`symmetric`symmetric`integer`symmetric`no`no`N. Gould`N. Gould`1994`2D/3D problem`
1216`GHS_indef`aug2dc`30200`30200`80000`no`20000`2`1`0`symmetric`symmetric`integer`symmetric`no`no`N. Gould`N. Gould`1994`2D/3D problem`
1217`GHS_indef`aug3d`24300`24300`69984`no`11664`2`1`0`symmetric`symmetric`integer`symmetric`no`no`N. Gould`N. Gould`1994`2D/3D problem`
1218`GHS_indef`aug3dcqp`35543`35543`128115`yes`35543`2`2`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1994`2D/3D problem`
1219`GHS_indef`bmw3_2`227362`227362`11288630`yes`227362`1`1`0`symmetric`symmetric`real`symmetric`yes`no`S. Mayer`J. Koster`2004`structural problem`
1220`GHS_indef`c-55`32780`32780`403450`yes`32780`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1221`GHS_indef`c-58`37595`37595`552551`yes`37595`4`4`6`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1222`GHS_indef`c-59`41282`41282`480536`yes`41282`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1223`GHS_indef`c-62ghs`41731`41731`559339`yes`41731`3`3`4`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`subsequent optimization problem`\nnext: - first: Schenk_IBMNA/c-62                                       \nA version of this matrix was first obtained from Olaf Schenk in October\n2003.  That version appears in this collection as Schenk_IBMNA/c-62.   \nIn August 2004, a new version appeared in the GHS collection, under the\nsame name, and was added here as GHS_indef/c-62ghs.  The c-62ghs matrix\nis the same as the version on Schenk's web site as of Nov 2006, except \nthat the right-hand-side was missing in the version in the UF Sparse   \nMatrix Collection (now included).  The two matrices c-62 and c-62ghs   \nare very similar, but not identical.                                   \n
1224`GHS_indef`c-63`44234`44234`434704`yes`44234`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1225`GHS_indef`c-68`64810`64810`565996`yes`64810`6`6`10`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1226`GHS_indef`c-69`67458`67458`623914`yes`67458`29`29`56`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1227`GHS_indef`c-70`68924`68924`658986`yes`68924`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1228`GHS_indef`c-71`76638`76638`859520`yes`76638`18`18`34`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1229`GHS_indef`c-72`84064`84064`707546`yes`84064`7`7`12`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2004`optimization problem`\nRevised Nov 2006; relative eps changes to A, right-hand-side added.\nNote that this matrix should have been placed in the Schenk_IBMNA/ \ndirectory when it was first added in August 2004, but moving it now\nwould disrupt exising users of the collection.                     \n
1230`GHS_indef`copter2`55476`55476`759952`yes`55476`1`1`0`symmetric`symmetric`real`symmetric`no`no`G. Kumfert, A. Pothen`N. Gould, Y. Hu, J. Scott`2004`computational fluid dynamics problem`
1231`GHS_indef`d_pretok`182730`182730`1641672`yes`182730`1`1`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1232`GHS_indef`darcy003`389874`389874`2097566`yes`389874`920`920`3676`symmetric`symmetric`real`symmetric`no`no`M. Arioli, G. Manzini`N. Gould, Y. Hu, J. Scott`2002`2D/3D problem`
1233`GHS_indef`dawson5`51537`51537`1010777`yes`51537`307`307`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1234`GHS_indef`dtoc`24993`24993`69972`no`19994`2`1`0`symmetric`symmetric`real`symmetric`no`no`T. Coleman, A. Liao`P. Toint`1992`optimization problem`
1235`GHS_indef`exdata_1`6001`6001`2269500`yes`6001`1`1`1`symmetric`symmetric`real`symmetric`no`no`S. Wright`N. Gould, Y. Hu, J. Scott`2004`optimization problem`
1236`GHS_indef`helm2d03`392257`392257`2741935`yes`392257`1`1`0`symmetric`symmetric`real`symmetric`yes`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1237`GHS_indef`helm3d01`32226`32226`428444`yes`32226`1`1`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1238`GHS_indef`k1_san`67759`67759`559774`no`67758`3`2`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1239`GHS_indef`laser`3002`3002`9000`no`3000`1002`1`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`materials problem`
1240`GHS_indef`mario001`38434`38434`204912`yes`38434`312`312`1244`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1241`GHS_indef`mario002`389874`389874`2097566`yes`389874`920`920`3676`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`duplicate 2D/3D problem`\nduplicate of GHS_indef/darcy003\n
1242`GHS_indef`ncvxqp1`12111`12111`73963`yes`12111`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1994`optimization problem`
1243`GHS_indef`ncvxqp9`16554`16554`54040`yes`16554`555`555`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1994`optimization problem`
1244`GHS_indef`olesnik0`88263`88263`744216`yes`88263`3`1`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1245`GHS_indef`sit100`10262`10262`61046`yes`10262`1`1`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1246`GHS_indef`stokes128`49666`49666`558594`yes`49666`1`1`0`symmetric`symmetric`real`symmetric`no`no`M. Arioli`N. Gould, Y. Hu, J. Scott`2004`computational fluid dynamics problem`
1247`GHS_indef`stokes64`12546`12546`140034`yes`12546`1`1`0`symmetric`symmetric`real`symmetric`no`no`M. Arioli`N. Gould, Y. Hu, J. Scott`2004`computational fluid dynamics problem`
1248`GHS_indef`stokes64s`12546`12546`140034`yes`12546`1`1`0`symmetric`symmetric`real`symmetric`no`no`M. Arioli`N. Gould, Y. Hu, J. Scott`2004`computational fluid dynamics problem`
1249`GHS_indef`tuma1`22967`22967`87760`yes`22967`1437`1`0`symmetric`symmetric`real`symmetric`no`no`M. Tuma`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1250`GHS_indef`tuma2`12992`12992`49365`yes`12992`1101`1`0`symmetric`symmetric`real`symmetric`no`no`M. Tuma`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1251`GHS_indef`turon_m`189924`189924`1690876`yes`189924`5`1`0`symmetric`symmetric`real`symmetric`no`no`unknown`N. Gould, Y. Hu, J. Scott`2004`2D/3D problem`
1252`GHS_psdef`audikw_1`943695`943695`77651847`yes`943695`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1253`GHS_psdef`bmw7st_1`141347`141347`7318399`yes`141347`2`2`21268`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1254`GHS_psdef`bmwcra_1`148770`148770`10641602`yes`148770`1`1`2400`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1255`GHS_psdef`copter1`17222`17222`211064`yes`17222`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Kumfert, A. Pothen`N. Gould, Y. Hu, J. Scott`2004`computational fluid dynamics problem`
1256`GHS_psdef`copter2`55476`55476`759952`yes`55476`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Kumfert, A. Pothen`N. Gould, Y. Hu, J. Scott`2004`duplicate computational fluid dynamics problem`\nGHS_psdef/copter2 is the nonzero pattern of GHS_indef/copter2.\n
1257`GHS_psdef`crankseg_1`52804`52804`10614210`yes`52804`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1258`GHS_psdef`crankseg_2`63838`63838`14148858`yes`63838`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1259`DNVS`crplat2`18010`18010`960946`yes`18010`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1260`DNVS`fcondp2`201822`201822`11294316`yes`201822`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1261`GHS_psdef`finance256`37376`37376`298496`yes`37376`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Berger, J. Mulvey, E. Rothberg, R. Vanderbei`N. Gould, Y. Hu, J. Scott`1997`optimization problem`
1262`GHS_psdef`ford1`18728`18728`101576`yes`18728`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Kumfert, A. Pothen`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1263`GHS_psdef`ford2`100196`100196`544688`yes`100196`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`G. Kumfert, A. Pothen`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1264`DNVS`fullb`199187`199187`11708077`yes`199187`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1265`DNVS`halfb`224617`224617`12387821`yes`224617`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1266`GHS_psdef`hood`220542`220542`9895422`yes`220542`9908`9908`873014`symmetric`symmetric`real`symmetric`yes`yes`J. Weiher`J. Koster`2004`structural problem`
1267`GHS_psdef`inline_1`503712`503712`36816170`yes`503712`1`1`172`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1268`GHS_psdef`ldoor`952203`952203`42493817`yes`952203`42667`42667`4028658`symmetric`symmetric`real`symmetric`yes`yes`J. Weiher`J. Koster`2004`structural problem`
1269`DNVS`m_t1`97578`97578`9753570`yes`97578`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1270`GHS_psdef`oilpan`73752`73752`2148558`yes`73752`17459`17459`1448630`symmetric`symmetric`real`symmetric`yes`yes`J. Weiher`J. Koster`2004`structural problem`
1271`GHS_psdef`opt1`15449`15449`1930655`yes`15449`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1272`GHS_psdef`pds10`16558`16558`149658`yes`16558`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`J. Kennington`G. Kumfert, A. Pothen`2004`optimization problem`
1273`GHS_psdef`pwt`36519`36519`326107`yes`36519`57`57`0`symmetric`symmetric`binary`symmetric`yes`no`NASA`G. Kumfert, A. Pothen`1995`duplicate structural problem`\nNasa/pwt, GHS_psdef/pwt and Pothen/pwt are identical; Pothen/ has xyz coord.\n
1274`GHS_psdef`ramage02`16830`16830`2866352`yes`16830`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Ramage`N. Gould, Y. Hu, J. Scott`2004`computational fluid dynamics problem`
1275`GHS_psdef`s3dkq4m2`90449`90449`4427725`yes`90449`1`1`393166`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s3dkq4m2.mtx                                                            \n%TITLE Cyl shell R/t=1000 unif 150x100 quad mesh DKQ elem with drill rot       \n%KEY   s3dkq4m2                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%REFERENCE   M. Benzi, R. Kouhia, M.Tuma: An assesment of some                 \n%            preconditioning techniques in shell problems                      \n%            Technical Report LA-UR-97-3892, Los Alamos National Laboratory    \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 1000                                         \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 150 x 100 quadrilateral mesh             \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the discrete Kirchhoff quadrilateral (Lyons-Crisfield version),        \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 2x2 Gauss-Legendre integration                                          \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1276`GHS_psdef`s3dkt3m2`90449`90449`3686223`yes`90449`1`1`67238`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s3dkt3m2.mtx                                                            \n%TITLE Cyl shell R/t=1000 unif 150x100 triang mesh DKT elem with drill rot     \n%KEY   s3dkt3m2                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 1000                                         \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 150 x 100 triangular mesh                \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 3-point integration                                                     \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1277`DNVS`ship_001`34920`34920`3896496`yes`34920`1`1`747734`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1278`DNVS`ship_003`121728`121728`3777036`yes`121728`1`1`4308998`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1279`DNVS`shipsec1`140874`140874`3568176`yes`140874`3`3`4245228`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1280`DNVS`shipsec5`179860`179860`4598604`yes`179860`36`36`5514492`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1281`DNVS`shipsec8`114919`114919`3303553`yes`114919`49`49`3349846`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1282`GHS_psdef`srb1`54924`54924`2962152`yes`54924`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1283`DNVS`thread`29736`29736`4444880`yes`29736`1`1`25168`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1284`DNVS`trdheim`22098`22098`1935324`yes`22098`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1285`DNVS`troll`213453`213453`11985111`yes`213453`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1286`DNVS`tsyl201`20685`20685`2454957`yes`20685`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`C. Damhaug`N. Gould, Y. Hu, J. Scott`2004`structural problem`
1287`GHS_psdef`vanbody`47072`47072`2329056`yes`47072`1`1`7842`symmetric`symmetric`real`symmetric`yes`yes`S. Mayer`J. Koster`2004`structural problem`
1288`GHS_psdef`wathen100`30401`30401`471601`yes`30401`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Wathen`N. Gould, Y. Hu, J. Scott`2004`random 2D/3D problem`\nrand('state',0); A = gallery('wathen',100100) ; % (in MATLAB)\n
1289`GHS_psdef`wathen120`36441`36441`565761`yes`36441`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`A. Wathen`N. Gould, Y. Hu, J. Scott`2004`random 2D/3D problem`\nA = gallery('wathen',100120) ; % (in MATLAB)                   \nTo initialize the MATLAB random number generator to replicate   \nthis matrix, first do the following:                            \nrand('state',0); A = gallery('wathen',100100)                  \nand then generate this matrix using the 100120 arguments above.\n
1290`DNVS`x104`108384`108384`8713602`yes`108384`1`1`1454022`symmetric`symmetric`real`symmetric`yes`yes`C. Damhaug`J. Koster`1999`structural problem`
1291`GHS_indef`a0nsdsil`80016`80016`355034`yes`80016`1`1`0`symmetric`symmetric`real`symmetric`no`no`M. Ferris`N. Gould`2004`optimization problem`
1292`GHS_indef`a2nnsnsl`80016`80016`347222`yes`80016`1`1`0`symmetric`symmetric`real`symmetric`no`no`M. Ferris`N. Gould`2004`optimization problem`
1293`GHS_indef`a5esindl`60008`60008`255004`yes`60008`1`1`0`symmetric`symmetric`real`symmetric`no`no`M. Ferris`N. Gould`2004`optimization problem`
1294`GHS_indef`blockqp1`60012`60012`640033`yes`60012`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1994`optimization problem`
1295`GHS_indef`bloweya`30004`30004`150009`yes`30004`1`1`0`symmetric`symmetric`real`symmetric`no`no`J. Blowey`N. Gould`1992`materials problem`
1296`GHS_indef`boyd1`93279`93279`1211231`yes`93279`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`2004`optimization problem`
1297`GHS_indef`boyd2`466316`466316`1500397`yes`466316`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`2004`optimization problem`
1298`GHS_indef`brainpc2`27607`27607`179395`yes`27607`2`2`0`symmetric`symmetric`real`symmetric`no`no`N. Duatrebande`P. Toint`1994`optimization problem`
1299`GHS_indef`bratu3d`27792`27792`173796`yes`27792`3460`285`0`symmetric`symmetric`real`symmetric`no`no`J. More'`P. Toint`1989`2D/3D problem`
1300`GHS_indef`cont-201`80595`80595`438795`yes`80595`1`1`0`symmetric`symmetric`real`symmetric`no`no`I. Maros, C. Meszaros`N. Gould`2004`optimization problem`
1301`GHS_indef`cont-300`180895`180895`988195`yes`180895`1`1`0`symmetric`symmetric`real`symmetric`no`no`I. Maros, C. Meszaros`N. Gould`2004`optimization problem`
1302`GHS_indef`dixmaanl`60000`60000`299998`yes`60000`1`1`0`symmetric`symmetric`real`symmetric`yes`no`L. Dixon, Z. Maany`P. Toint`1989`optimization problem`
1303`GHS_indef`linverse`11999`11999`95977`yes`11999`1`1`0`symmetric`symmetric`real`symmetric`yes`no`P. Toint`P. Toint`1991`statistical/mathematical problem`
1304`GHS_indef`ncvxbqp1`50000`50000`349968`yes`50000`6`6`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1995`optimization problem`
1305`GHS_indef`ncvxqp3`75000`75000`499964`yes`75000`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1995`optimization problem`
1306`GHS_indef`ncvxqp5`62500`62500`424966`yes`62500`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1995`optimization problem`
1307`GHS_indef`ncvxqp7`87500`87500`574962`yes`87500`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1995`optimization problem`
1308`GHS_indef`sparsine`50000`50000`1548988`yes`50000`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1995`structural problem`
1309`GHS_indef`spmsrtls`29995`29995`229947`yes`29995`1`1`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`2004`statistical/mathematical problem`
1310`GHS_psdef`cvxbqp1`50000`50000`349968`yes`50000`6`6`0`symmetric`symmetric`real`symmetric`yes`yes`N. Gould`N. Gould`1995`optimization problem`
1311`GHS_psdef`gridgena`48962`48962`512084`yes`48962`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`P. Barrera, A. Perez, L. Castellanos`P. Toint`1991`optimization problem`
1312`GHS_psdef`jnlbrng1`40000`40000`199200`yes`40000`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. More', G. Toraldo`N. Gould, Y. Hu, J. Scott`1991`optimization problem`
1313`GHS_psdef`minsurfo`40806`40806`203622`yes`40806`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`E. Dolan, J. More'`N. Gould`2000`optimization problem`
1314`GHS_psdef`obstclae`40000`40000`197608`yes`40000`5`5`0`symmetric`symmetric`real`symmetric`yes`yes`R. Dembo, U. Tulowitzki`P. Toint`1983`optimization problem`
1315`GHS_psdef`torsion1`40000`40000`197608`yes`40000`5`5`0`symmetric`symmetric`real`symmetric`yes`yes`R. Dembo, U. Tulowitzki`P. Toint`1983`duplicate optimization problem`\nduplicate of GHS_psdef/obstclae\n
1316`Rajat`rajat15`37261`37261`443573`yes`37261`19`1`0`symmetric`94%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1317`Bydder`mri1`65536`147456`589824`no`64517`258`32820`0`0%`0%`real`rectangular`no`no`M. Bydder`T. Davis`2005`computer graphics/vision problem`\nx = lsqr (A,b) ; imagesc (abs (fftshift (fft2 (reshape (x, 384, 384))))) ;\n
1318`Bydder`mri2`63240`147456`569160`no`48321`438`42860`0`0%`0%`real`rectangular`no`no`M. Bydder`T. Davis`2005`computer graphics/vision problem`\nx = lsqr (A,b) ; imagesc (abs (fftshift (fft2 (reshape (x, 384, 384))))) ;\n
1319`Engwirda`airfoil_2d`14214`14214`259688`yes`14214`638`638`0`98%`0%`real`unsymmetric`no`no`D. Engwirda`T. Davis`2006`computational fluid dynamics problem`\ntrimesh(t,coord(:,1),coord(:,2),A\ones(n,1))\n
1320`IBM_EDA`dc1`116835`116835`766396`yes`116835`19`19`0`85%`24%`real`unsymmetric`no`no`T. Lehner`T. Davis`2005`circuit simulation problem sequence`\nnext: IBM_EDA/dc2 first: IBM_EDA/dc1\n
1321`IBM_EDA`dc2`116835`116835`766396`yes`116835`19`19`0`85%`24%`real`unsymmetric`no`no`T. Lehner`T. Davis`2005`subsequent circuit simulation problem`\nnext: IBM_EDA/dc3 first: IBM_EDA/dc1\n
1322`IBM_EDA`dc3`116835`116835`766396`yes`116835`19`19`0`85%`24%`real`unsymmetric`no`no`T. Lehner`T. Davis`2005`subsequent circuit simulation problem`\nnext: - first: IBM_EDA/dc1\n
1323`IBM_EDA`trans4`116835`116835`749800`yes`116835`19`19`16596`85%`30%`real`unsymmetric`no`no`T. Lehner`T. Davis`2005`circuit simulation problem sequence`\nnext: IBM_EDA/trans5 first: IBM_EDA/trans4\n
1324`IBM_EDA`trans5`116835`116835`749800`yes`116835`19`19`16596`85%`30%`real`unsymmetric`no`no`T. Lehner`T. Davis`2005`subsequent circuit simulation problem`\nnext: - first: IBM_EDA/trans4\n
1325`Morandini`robot`120`120`870`yes`120`19`1`0`22%`5%`real`unsymmetric`no`no`M. Morandini`T. Davis`2006`robotics problem`
1326`Morandini`rotor1`100`100`708`yes`100`48`1`0`51%`7%`real`unsymmetric`no`no`M. Morandini`T. Davis`2006`structural problem`
1327`Morandini`rotor2`791`791`10685`yes`791`36`7`0`23%`12%`real`unsymmetric`no`no`M. Morandini`T. Davis`2006`structural problem`
1328`MathWorks`tomography`500`500`28726`yes`500`37`37`0`symmetric`93%`real`unsymmetric`no`no`D.Yang`T. Davis`2003`computer graphics/vision problem`
1329`Kemelmacher`Kemelmacher`28452`9693`100875`yes`9693`1`1`0`0%`0%`real`rectangular`no`no`I. Kemelmacher`T. Davis`2005`computer graphics/vision problem`
1330`MathWorks`Kuu`7102`7102`340200`yes`7102`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`B. Cheng`T. Davis`2006`structural problem`
1331`MathWorks`Muu`7102`7102`170134`yes`7102`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`B. Cheng`T. Davis`2006`structural problem`
1332`Toledo`deltaX`68600`21961`247424`yes`21961`1`1`0`0%`0%`real`rectangular`no`no`S. Toledo`T. Davis`2006`counter-example problem`
1333`VanVelzen`std1_Jac2_db`21982`21982`498771`yes`21982`11091`11091`0`33%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1334`VanVelzen`std1_Jac2`21982`21982`1248213`yes`21982`11091`1`518`0%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1335`VanVelzen`std1_Jac3_db`21982`21982`531826`yes`21982`11091`11091`0`36%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1336`VanVelzen`std1_Jac3`21982`21982`1455374`yes`21982`11091`1`474`0%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1337`VanVelzen`Zd_Jac2_db`22835`22835`676439`yes`22835`9833`9833`0`30%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1338`VanVelzen`Zd_Jac2`22835`22835`1642407`yes`22835`9833`1`426`0%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1339`VanVelzen`Zd_Jac3_db`22835`22835`713907`yes`22835`9833`9833`0`33%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1340`VanVelzen`Zd_Jac3`22835`22835`1915726`yes`22835`9833`1`426`0%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1341`VanVelzen`Zd_Jac6_db`22835`22835`663643`yes`22835`9990`9990`0`32%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1342`VanVelzen`Zd_Jac6`22835`22835`1711557`yes`22835`9990`1`426`0%`0%`real`unsymmetric`no`no`N. van Velzen`T. Davis`2006`chemical process simulation problem`
1343`Rajat`rajat16`94294`94294`476766`yes`94294`8549`5232`164393`99%`64%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1344`Rajat`rajat17`94294`94294`479246`yes`94294`8546`5229`161913`99%`27%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1345`Rajat`rajat18`94294`94294`479151`yes`94294`8549`5232`5992`63%`28%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1346`Rajat`rajat19`1157`1157`3699`yes`1157`734`166`1700`90%`92%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1347`Lourakis`bundle1`10581`10581`770811`yes`10581`1`1`90`symmetric`symmetric`real`symmetric`yes`yes`M. Lourakis`T. Davis`2006`computer graphics/vision problem`
1348`PARSEC`benzene`8219`8219`242669`yes`8219`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1349`PARSEC`CO`221119`221119`7666057`yes`221119`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1350`PARSEC`Ga10As10H30`113081`113081`6115633`yes`113081`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1351`PARSEC`Ga19As19H42`133123`133123`8884839`yes`133123`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1352`PARSEC`Ga3As3H12`61349`61349`5970947`yes`61349`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1353`PARSEC`Ga41As41H72`268096`268096`18488476`yes`268096`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1354`PARSEC`GaAsH6`61349`61349`3381809`yes`61349`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1355`PARSEC`Ge87H76`112985`112985`7892195`yes`112985`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1356`PARSEC`Ge99H100`112985`112985`8451395`yes`112985`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1357`PARSEC`H2O`67024`67024`2216736`yes`67024`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1358`PARSEC`Na5`5832`5832`305630`yes`5832`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1359`PARSEC`Si10H16`17077`17077`875923`yes`17077`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1360`PARSEC`Si2`769`769`17801`yes`769`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1361`PARSEC`Si34H36`97569`97569`5156379`yes`97569`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1362`PARSEC`Si41Ge41H72`185639`185639`15011265`yes`185639`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1363`PARSEC`Si5H12`19896`19896`738598`yes`19896`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1364`PARSEC`Si87H76`240369`240369`10661631`yes`240369`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1365`PARSEC`SiH4`5041`5041`171903`yes`5041`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1366`PARSEC`SiNa`5743`5743`198787`yes`5743`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1367`PARSEC`SiO2`155331`155331`11283503`yes`155331`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1368`PARSEC`SiO`33401`33401`1317655`yes`33401`1`1`0`symmetric`symmetric`real`symmetric`yes`no`Y. Zhou, Y. Saad, M. Tiago, J. Chelikowsky`T. Davis`2005`theoretical/quantum chemistry problem`
1369`Rajat`rajat20`86916`86916`604299`yes`86916`3672`1355`746`99%`11%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1370`Rajat`rajat21`411676`411676`1876011`yes`411676`10195`5956`17359`76%`61%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1371`Rajat`rajat22`39899`39899`195429`yes`39899`4466`1384`1835`98%`33%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1372`Rajat`rajat23`110355`110355`555441`yes`110355`6052`1410`1497`99%`33%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1373`Rajat`rajat24`358172`358172`1946979`yes`358172`3497`1178`1256`100%`27%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1374`Rajat`rajat25`87190`87190`606489`yes`87190`3495`1178`746`99%`11%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1375`Rajat`rajat26`51032`51032`247528`yes`51032`4666`1568`1774`99%`33%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1376`Rajat`rajat27`20640`20640`97353`yes`20640`4593`1556`2424`96%`30%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1377`Rajat`rajat28`87190`87190`606489`yes`87190`3495`1178`746`99%`11%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1378`MathWorks`Sieber`2290`2290`14873`yes`2290`1`1`0`73%`0%`real`unsymmetric`no`no`Sieber`T. Davis`2006`counter-example problem`
1379`Andrianov`ex3sta1`16782`16782`678998`yes`16782`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1380`Andrianov`fxm3_6`5026`5026`94026`yes`5026`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1381`Andrianov`fxm4_6`18892`18892`497844`yes`18892`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1382`Andrianov`ins2`309412`309412`2751484`yes`309412`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1383`Andrianov`lp1`534388`534388`1643420`yes`534388`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1384`Andrianov`lpl1`32460`32460`328036`yes`32460`3`3`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1385`Andrianov`mip1`66463`66463`10352819`yes`66463`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1386`Andrianov`net100`29920`29920`2033200`yes`29920`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1387`Andrianov`net125`36720`36720`2577200`yes`36720`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1388`Andrianov`net150`43520`43520`3121200`yes`43520`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1389`Andrianov`net25`9520`9520`401200`yes`9520`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1390`Andrianov`net4-1`88343`88343`2441727`yes`88343`97`97`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1391`Andrianov`net50`16320`16320`945200`yes`16320`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1392`Andrianov`net75`23120`23120`1489200`yes`23120`2`2`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1393`Andrianov`pattern1`19242`19242`9323432`yes`19242`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1394`Andrianov`pf2177`9728`9728`725144`yes`9728`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`A. Andrianov`T. Davis`2006`optimization problem`
1395`MKS`fp`7548`7548`834222`yes`7548`1`1`14331`76%`0%`real`unsymmetric`no`no`D. Smith`T. Davis`2006`electromagnetics problem`
1396`Rajat`rajat29`643994`643994`3760246`yes`643994`14307`4512`1106024`69%`69%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1397`Rajat`rajat30`643994`643994`6175244`yes`643994`11756`1434`133`99%`1%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1398`Rajat`rajat31`4690002`4690002`20316253`yes`4690002`2503`1`0`symmetric`40%`real`unsymmetric`no`no`Rajat`T. Davis`2006`circuit simulation problem`
1399`Raju`laminar_duct3D`67173`67173`3788857`yes`67173`13025`13025`44220`90%`55%`real`unsymmetric`no`no`M. Raju`T. Davis`2006`computational fluid dynamics problem`
1400`Bates`Chem97Zt`2541`31022`62044`yes`2541`163`131`0`0%`0%`binary`rectangular`no`no`D. Bates`T. Davis`2006`statistical/mathematical problem`
1401`Bates`Chem97ZtZ`2541`2541`7361`yes`2541`131`131`0`symmetric`symmetric`real`symmetric`yes`yes`D. Bates`T. Davis`2006`statistical/mathematical problem`
1402`Schmid`thermal1`82654`82654`574458`yes`82654`249`249`0`symmetric`symmetric`real`symmetric`yes`yes`D. Schmid`T. Davis`2006`thermal problem`
1403`Schmid`thermal2`1228045`1228045`8580313`yes`1228045`959`959`0`symmetric`symmetric`real`symmetric`yes`yes`D. Schmid`T. Davis`2006`thermal problem`
1404`MathWorks`Kaufhold`8765`8765`42471`yes`8765`256`256`0`symmetric`78%`real`unsymmetric`no`no`Kaufhold`T. Davis`2006`counter-example problem`
1405`Bindel`ted_A`10605`10605`424587`yes`10605`4244`1`0`57%`11%`real`unsymmetric`no`no`D. Bindel`T. Davis`2006`thermal problem`
1406`Bindel`ted_B`10605`10605`144579`yes`10605`4245`4245`0`symmetric`symmetric`real`symmetric`yes`yes`D. Bindel`T. Davis`2006`thermal problem`
1407`Bindel`ted_AB`10605`10605`522387`yes`10605`1`1`0`64%`0%`complex`unsymmetric`no`no`D. Bindel`T. Davis`2006`thermal problem`
1408`Bindel`ted_A_unscaled`10605`10605`424587`yes`10605`4244`1`0`57%`11%`real`unsymmetric`no`no`D. Bindel`T. Davis`2006`thermal problem`
1409`Bindel`ted_B_unscaled`10605`10605`144579`yes`10605`4245`4245`0`symmetric`symmetric`real`symmetric`yes`yes`D. Bindel`T. Davis`2006`thermal problem`
1410`Bindel`ted_AB_unscaled`10605`10605`522387`yes`10605`1`1`0`64%`0%`complex`unsymmetric`no`no`D. Bindel`T. Davis`2006`thermal problem`
1411`Koutsovasilis`F1`343791`343791`26837113`yes`343791`1`1`0`symmetric`symmetric`real`symmetric`yes`no`P. Koutsovasilis`T. Davis`2006`structural problem`\nStiffness matrix from an AUDI engine crankshaft\n
1412`AMD`G2_circuit`150102`150102`726674`yes`150102`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`U. Okuyucu`T. Davis`2006`circuit simulation problem`
1413`IBM_EDA`ckt11752_dc_1`49702`49702`333029`yes`49702`172`172`0`98%`74%`real`unsymmetric`no`no`T. Lehner`T. Davis`2006`circuit simulation problem`
1414`IBM_EDA`ckt11752_tr_0`49702`49702`332807`yes`49702`199`199`222`98%`74%`real`unsymmetric`no`no`T. Lehner`T. Davis`2006`circuit simulation problem`
1415`Sandia`ASIC_100k`99340`99340`940621`yes`99340`399`1`13542`symmetric`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2006`circuit simulation problem`
1416`Sandia`ASIC_100ks`99190`99190`578890`yes`99190`249`249`0`symmetric`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2006`circuit simulation problem`
1417`Sandia`ASIC_320k`321821`321821`1931828`yes`321821`399`1`703536`symmetric`36%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2006`circuit simulation problem`
1418`Sandia`ASIC_320ks`321671`321671`1316085`yes`321671`249`249`511722`symmetric`29%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2006`circuit simulation problem`
1419`Sandia`ASIC_680k`682862`682862`2638997`yes`682862`583921`583523`1232776`symmetric`0%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2006`circuit simulation problem`
1420`Sandia`ASIC_680ks`682712`682712`1693767`yes`682712`583771`583771`635409`symmetric`1%`real`unsymmetric`no`no`R. Hoekstra`T. Davis`2006`circuit simulation problem`
1421`AMD`G3_circuit`1585478`1585478`7660826`yes`1585478`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`U. Okuyucu`T. Davis`2006`circuit simulation problem`
1422`GHS_psdef`apache1`80800`80800`542184`yes`80800`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`unknown`N. Gould, Y. Hu, J. Scott`2006`structural problem`
1423`GHS_psdef`apache2`715176`715176`4817870`yes`715176`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`unknown`N. Gould, Y. Hu, J. Scott`2006`structural problem`
1424`GHS_indef`bloweybl`30003`30003`109999`no`30002`20003`2`10001`symmetric`symmetric`real`symmetric`no`no`J. Blowey`N. Gould`1992`materials problem`
1425`GHS_indef`bloweybq`10001`10001`49999`yes`10001`1`1`19992`symmetric`symmetric`real`symmetric`yes`yes`J. Blowey`N. Gould`1992`materials problem`
1426`GHS_indef`cvxqp3`17500`17500`114962`yes`17500`1`1`7500`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1995`optimization problem`
1427`GHS_indef`qpband`20000`20000`45000`yes`20000`5000`5000`0`symmetric`symmetric`real`symmetric`no`no`N. Gould`N. Gould`1999`optimization problem`
1428`Oberwolfach`chipcool0`20082`20082`281150`yes`20082`1`1`0`symmetric`87%`real`unsymmetric`no`no`C. Moosmann, A. Griener`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1429`Oberwolfach`chipcool1`20082`20082`281150`yes`20082`1`1`0`symmetric`9%`real`unsymmetric`no`no`C. Moosmann, A. Griener`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1430`Oberwolfach`filter2D`1668`1668`10750`yes`1668`1`1`0`symmetric`symmetric`real`symmetric`no`no`D. Hohlfield, T. Bechtold, H. Zappe`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1431`Oberwolfach`filter3D`106437`106437`2707179`yes`106437`1`1`0`symmetric`symmetric`real`symmetric`no`no`D. Hohlfield, T. Bechtold, H. Zappe`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1432`Oberwolfach`flowmeter0`9669`9669`67391`yes`9669`1`1`0`symmetric`symmetric`real`symmetric`no`no`C. Moosmann, A. Griener`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1433`Oberwolfach`flowmeter5`9669`9669`67391`yes`9669`1`1`0`symmetric`6%`real`unsymmetric`no`no`C. Moosmann, A. Griener`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1434`Oberwolfach`gas_sensor`66917`66917`1703365`yes`66917`1`1`0`symmetric`symmetric`real`symmetric`no`no`J. Hildenbrand`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1435`Oberwolfach`gyro`17361`17361`1021159`yes`17361`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Billger`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1436`Oberwolfach`inlet`11730`11730`328323`yes`11730`331`331`0`61%`0%`real`unsymmetric`no`no`K. Willcox, G. Lassaux, D. Gratton`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1437`Oberwolfach`LF10000`19998`19998`99982`yes`19998`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lienemann, A. Greiner, J. Korvink`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1438`Oberwolfach`LF10`18`18`82`yes`18`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lienemann, A. Greiner, J. Korvink`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1439`Oberwolfach`LFAT5000`19994`19994`79966`yes`19994`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lienemann, A. Greiner, J. Korvink`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1440`Oberwolfach`LFAT5`14`14`46`yes`14`3`3`0`symmetric`symmetric`real`symmetric`yes`yes`J. Lienemann, A. Greiner, J. Korvink`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1441`Oberwolfach`piston`2025`2025`100015`yes`2025`1`1`0`symmetric`3%`real`unsymmetric`no`no`K. Meerbergen`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1442`Oberwolfach`rail_1357`1357`1357`8985`yes`1357`1`1`0`symmetric`symmetric`real`symmetric`no`no`P. Benner, J. Saak`E. Rudnyi`2002`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1443`Oberwolfach`rail_20209`20209`20209`139233`yes`20209`1`1`0`symmetric`symmetric`real`symmetric`no`no`P. Benner, J. Saak`E. Rudnyi`2002`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1444`Oberwolfach`rail_5177`5177`5177`35185`yes`5177`1`1`0`symmetric`symmetric`real`symmetric`no`no`P. Benner, J. Saak`E. Rudnyi`2002`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1445`Oberwolfach`rail_79841`79841`79841`553921`yes`79841`1`1`0`symmetric`symmetric`real`symmetric`no`no`P. Benner, J. Saak`E. Rudnyi`2002`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1446`Oberwolfach`spiral`1434`1434`18228`yes`1434`30`30`0`symmetric`symmetric`real`symmetric`no`no`J. Li, M. Kamon`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1447`Oberwolfach`t2dah`11445`11445`176117`yes`11445`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1448`Oberwolfach`t2dal_bci`4257`4257`37465`yes`4257`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1449`Oberwolfach`t2dal`4257`4257`37465`yes`4257`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1450`Oberwolfach`t3dh`79171`79171`4352105`yes`79171`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1451`Oberwolfach`t3dl`20360`20360`509866`yes`20360`1`1`0`symmetric`symmetric`real`symmetric`no`no`E. Rudnyi`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach A matrix\n
1452`Oberwolfach`windscreen`22692`22692`1482390`yes`22692`1`1`0`symmetric`0%`complex`symmetric`no`no`K. Meerbergen`E. Rudnyi`2004`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1453`Oberwolfach`bone010`986703`986703`47851783`yes`986703`2`2`23814542`symmetric`symmetric`real`symmetric`yes`yes`B. van Rietbergen, E. Rudnyi, J. Korvink`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1454`Oberwolfach`boneS01`127224`127224`5516602`yes`127224`1`1`1198550`symmetric`symmetric`real`symmetric`yes`yes`B. van Rietbergen, E. Rudnyi, J. Korvink`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1455`Oberwolfach`boneS10`914898`914898`40878708`yes`914898`1`1`14589714`symmetric`symmetric`real`symmetric`yes`yes`B. van Rietbergen, E. Rudnyi, J. Korvink`E. Rudnyi`2006`model reduction problem`\nPrimary matrix in this model reduction problem is the Oberwolfach K matrix\n
1456`Pajek`California`9664`9664`16150`unknown`unknown`unknown`9450`0`2%`2%`binary`unsymmetric`no`no`J. Kleinberg`V. Batagelj`2006`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n California - Pages matching the query \"California\".                          \n This graph was constructed by expanding a 200-page response set to           \n a search engine query 'California', as in the hub/authority algorithm.       \n from Jon Kleinberg:                                                          \n   http://www.cs.cornell.edu/courses/cs685/2002fa/                            \n adapted for Pajek, V. Batagelj, March 19, 2006                               \n   0 -> 9664                                                                  \n
1457`Pajek`Cities`55`46`1342`yes`46`1`1`0`0%`0%`integer`rectangular`no`no`P. Taylor, D. Walker`V. Batagelj`2001`weighted bipartite graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n http://www.lboro.ac.uk/gawc/datasets/da6.html                                \n Accountancy                                                                  \n Advertising                                                                  \n Banking and Finance                                                          \n Law                                                                          \n
1458`Pajek`CSphd`1882`1882`1740`unknown`unknown`unknown`1882`0`0%`0%`binary`unsymmetric`no`no`unknown`V. Batagelj`2006`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1459`Pajek`dictionary28`52652`52652`178076`unknown`unknown`unknown`17903`0`symmetric`symmetric`binary`symmetric`no`no`unknown`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1460`Pajek`divorce`50`9`225`yes`9`1`1`0`0%`0%`binary`rectangular`no`no`unknown`V. Batagelj`2006`bipartite graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n http://www.stat.lsa.umich.edu/~faraway/stat503/labs/                         \n
1461`Pajek`EAT_RS`23219`23219`325592`unknown`unknown`unknown`15466`0`12%`3%`integer`unsymmetric`no`no`G. Kiss, C. Armstrong R. Milroy, J. Piper`V. Batagelj`1971`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n EAT - The Edinburgh Associative Thesaurus /                                  \n response-stimulus                                                            \n --------------------------------------------------------                     \n The EAT is a database of word association norms.                             \n - Original EAT: George Kiss, Christine Armstrong,                            \n Robert Milroy and J.R.I. Piper (1968-1971).                                  \n - MRC Psycholinguistic Database Version modified by:                         \n Max Coltheart, S. James, J. Ramshaw, B.M. Philip,                            \n B. Reid, J. Benyon-Tinker and E. Doctor;                                     \n made available by: Philip Quinlan.                                           \n - The present version was re-structured and documented                       \n by Michael Wilson at the Rutherford Appleton Laboratory.                     \n http://monkey.cis.rl.ac.uk/Eat/htdocs/eat.zip                                \n                                                                              \n transformed in Pajek format: V. Batagelj, 31. July 2003                      \n -----                                                                        \n------------------------------------------------------------------------------\nRegarding conversion for UF sparse matrix collection: in the original data    \nthere are 325624 weighted edges.  Of those only 32 edges are duplicates, and \nall of them have identical edge weights as the edges they are duplicates of   \nThese extraneous edges have been removed, since this this appears to be a     \ngraph, not a multigraph.                                                      \n------------------------------------------------------------------------------\n
1462`Pajek`EAT_SR`23219`23219`325589`unknown`unknown`unknown`15466`0`12%`3%`integer`unsymmetric`no`no`G. Kiss, C. Armstrong R. Milroy, J. Piper`V. Batagelj`1971`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n EAT - The Edinburgh Associative Thesaurus /                                  \n stimulus-response                                                            \n --------------------------------------------------------                     \n The EAT is a database of word association norms.                             \n - Original EAT: George Kiss, Christine Armstrong,                            \n Robert Milroy and J.R.I. Piper (1968-1971).                                  \n - MRC Psycholinguistic Database Version modified by:                         \n Max Coltheart, S. James, J. Ramshaw, B.M. Philip,                            \n B. Reid, J. Benyon-Tinker and E. Doctor;                                     \n made available by: Philip Quinlan.                                           \n - The present version was re-structured and documented                       \n by Michael Wilson at the Rutherford Appleton Laboratory.                     \n http://monkey.cis.rl.ac.uk/Eat/htdocs/eat.zip                                \n                                                                              \n transformed in Pajek format: V. Batagelj, 31. July 2003                      \n -----                                                                        \n
1463`Pajek`EPA`4772`4772`8965`unknown`unknown`unknown`4711`0`1%`1%`binary`unsymmetric`no`no`J. Kleinberg`V. Batagelj`2006`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Epa - Pages linking to www.epa.gov.                                          \n This graph was constructed by expanding a 200-page response set to           \n a search engine query, as in the hub/authority algorithm.                    \n from Jon Kleinberg:                                                          \n   http://www.cs.cornell.edu/courses/cs685/2002fa/                            \n adapted for Pajek, V. Batagelj, March 19, 2006                               \n   0 -> 4772                                                                  \n
1464`Pajek`Erdos02`6927`6927`16944`unknown`unknown`unknown`1394`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Erdos collaboration network:                                                 \n Erdos included, version 2002                                                 \n
1465`Pajek`Erdos971`472`472`2628`unknown`unknown`unknown`42`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1466`Pajek`Erdos972`5488`5488`14170`unknown`unknown`unknown`754`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1467`Pajek`Erdos981`485`485`2762`unknown`unknown`unknown`44`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1468`Pajek`Erdos982`5822`5822`14750`unknown`unknown`unknown`877`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1469`Pajek`Erdos991`492`492`2834`unknown`unknown`unknown`43`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1470`Pajek`Erdos992`6100`6100`15030`unknown`unknown`unknown`1023`0`symmetric`symmetric`binary`symmetric`no`no`J. Grossman, P. Iain, R. Castro`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1471`Pajek`EVA`8497`8497`6726`unknown`unknown`unknown`8482`0`0%`0%`binary`unsymmetric`no`no`K. Norlen, G. Lucas, M. Gebbie, J. Chuang`V. Batagelj`2002`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1472`Pajek`FA`10617`10617`72176`unknown`unknown`unknown`5764`0`23%`1%`real`unsymmetric`no`no`USF`V. Batagelj`2006`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1473`Pajek`foldoc`13356`13356`120238`unknown`unknown`unknown`71`0`48%`46%`integer`unsymmetric`no`no`D. Howe`V. Batagelj, A. Mrvar`2002`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1474`Pajek`football`35`35`118`unknown`unknown`unknown`35`0`0%`0%`integer`unsymmetric`no`no`L. Krempel`V. Batagelj`1998`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1475`Pajek`GD00_a`352`352`458`unknown`unknown`unknown`352`0`0%`0%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2000`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1476`Pajek`GD00_c`638`638`1041`unknown`unknown`unknown`566`0`2%`2%`integer`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2000`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1477`Pajek`GD01_a`311`311`645`unknown`unknown`unknown`303`0`2%`2%`integer`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2001`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1478`Pajek`GD01_A`953`953`645`unknown`unknown`unknown`945`0`2%`2%`integer`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2001`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1479`Pajek`GD01_b`18`18`37`unknown`unknown`unknown`1`0`51%`51%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2001`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1480`Pajek`GD01_c`33`33`135`unknown`unknown`unknown`33`0`0%`0%`integer`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2001`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1481`Pajek`GD02_a`23`23`87`unknown`unknown`unknown`3`0`64%`64%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2002`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1482`Pajek`GD02_b`80`80`232`unknown`unknown`unknown`11`0`0%`0%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2002`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1483`Pajek`GD06_Java`1538`1538`8032`unknown`unknown`unknown`1028`0`5%`5%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`2006`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n GD 2006 contest graph C: Java Dependency graph                               \n http://gd2006.org/contest/details.php#java                                   \n graph in Pajek format                                                        \n transformed by Vladimir Batagelj, July 10, 2006                              \n
1484`Pajek`GD06_theory`101`101`380`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Graph Drawing Contest`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n GD 2006 contest graph A: Theory                                              \n http://gd2006.org/contest/details.php#theory                                 \n graph in Pajek format                                                        \n transformed by Vladimir Batagelj, July 10, 2006                              \n
1485`Pajek`GD95_a`36`36`57`unknown`unknown`unknown`4`0`4%`4%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1995`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1486`Pajek`GD95_b`73`73`96`unknown`unknown`unknown`71`0`0%`0%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1995`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1487`Pajek`GD95_c`62`62`287`unknown`unknown`unknown`1`0`100%`100%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1995`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1488`Pajek`GD96_a`1096`1096`1677`unknown`unknown`unknown`1096`0`0%`0%`integer`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1996`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1489`Pajek`GD96_b`111`111`193`unknown`unknown`unknown`111`0`0%`0%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1996`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1490`Pajek`GD96_c`65`65`250`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Graph Drawing Contest`V. Batagelj`1996`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1491`Pajek`GD96_d`180`180`229`unknown`unknown`unknown`168`0`1%`1%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1996`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1492`Pajek`GD97_a`84`84`332`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Graph Drawing Contest`V. Batagelj`1997`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1493`Pajek`GD97_b`47`47`264`unknown`unknown`unknown`2`0`symmetric`symmetric`real`symmetric`no`no`Graph Drawing Contest`V. Batagelj`1997`undirected weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nRegarding conversion for UF sparse matrix collection: in the original data    \nevery edge appears exactly twice, with the same edge weight.  It could be a   \nmultigraph, but it looks more like a graph.  The duplicate edges are removed  \nin this version.  You can always add them back in yourself; just look at 2*A. \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1494`Pajek`GD97_c`452`452`460`unknown`unknown`unknown`452`0`0%`0%`integer`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1997`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1495`Pajek`GD98_a`38`38`50`unknown`unknown`unknown`35`0`16%`16%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1998`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1496`Pajek`GD98_b`121`121`207`unknown`unknown`unknown`12`0`72%`72%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1998`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5241, and have been removed.  This graph has 2D coordinates.             \n
1497`Pajek`GD98_c`112`112`336`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Graph Drawing Contest`V. Batagelj`1998`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1498`Pajek`GD99_b`64`64`252`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`Graph Drawing Contest`V. Batagelj`1999`undirected multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1499`Pajek`GD99_c`105`105`149`unknown`unknown`unknown`66`0`39%`39%`binary`unsymmetric`no`no`Graph Drawing Contest`V. Batagelj`1999`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1500`Pajek`geom`7343`7343`23796`unknown`unknown`unknown`2060`0`symmetric`symmetric`integer`symmetric`no`no`Edelsbrunner, van Leeuwen, Guibas, Stolfi`V. Batagelj`2002`undirected weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1501`Pajek`GlossGT`72`72`122`unknown`unknown`unknown`68`0`7%`7%`binary`unsymmetric`no`no`W. Cherowitzo`V. Batagelj`2001`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Bill Cherowitzo: Graph and Digraph Glossary                                  \n http://www-math.cudenver.edu/~wcherowi/courses/m4408/glossary.html           \n Pajek's network: Barbara Zemlji\"c, 2. nov 2003                               \nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1502`Pajek`HEP-th`27240`27240`342437`unknown`unknown`unknown`19565`0`0%`0%`binary`unsymmetric`no`no`KDD Cup 2003`V. Batagelj`2003`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n High Energy Particle Physics (HEP) literature                                \n ---------------------------------------------                                \n Citation data from KDD Cup 2003, a knowledge discovery and data mining       \n competition held in conjunction with the Ninth Annual ACM SIGKDD Conference. \n   http://www.cs.cornell.edu/projects/kddcup/index.html                       \n The Stanford Linear Accelerator Center SPIRES-HEP database has been          \n comprehensively cataloguing the High Energy Particle Physics (HEP) literature\n online since 1974, and indexes more than 500000 high-energy physics related \n articles including their full citation tree.                                 \n The network contains a citation graph of the hep-th portion of the arXiv.    \n The units names are the arXiv IDs of papers; the relation is  X cites Y .    \n Note that revised papers may have updated citations. As such, citations may  \n refer to future papers, i.e. a paper may cite another paper that was publishe\n after the first paper.                                                       \n Update May 12, 2003 is not included.                                         \n                                                                              \n transformed in Pajek format: V. Batagelj, 26. July 2003                      \n -----                                                                        \n
1503`Pajek`HEP-th-new`27770`27770`352807`unknown`unknown`unknown`20086`0`0%`0%`binary`unsymmetric`no`no`KDD Cup 2003`V. Batagelj`2003`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n High Energy Particle Physics (HEP) literature with May 12, 2003 Update       \n ----------------------------------------------------------------------       \n Citation data from KDD Cup 2003, a knowledge discovery and data mining       \n competition held in conjunction with the Ninth Annual ACM SIGKDD Conference. \n   http://www.cs.cornell.edu/projects/kddcup/index.html                       \n The Stanford Linear Accelerator Center SPIRES-HEP database has been          \n comprehensively cataloguing the High Energy Particle Physics (HEP) literature\n online since 1974, and indexes more than 500000 high-energy physics related \n articles including their full citation tree.                                 \n The network contains a citation graph of the hep-th portion of the arXiv.    \n The units names are the arXiv IDs of papers; the relation is  X cites Y .    \n Note that revised papers may have updated citations. As such, citations may  \n refer to future papers, i.e. a paper may cite another paper that was publishe\n after the first paper.                                                       \n                                                                              \n transformed in Pajek format: V. Batagelj, 26. July 2003                      \n                                                                              \n year:                                                                        \n The SLAC/SPIRES dates for all hep-th papers are given. Some older papers were\n uploaded years after their intial publication and the arXiv submission date  \n from the abstracts may not correspond to the publication date. An alternative\n date has been provided from SLAC/SPIRES that may be a better estimate        \n for the initial publication of these old papers.                             \n The vector contains the year in SLAC date of each paper.                     \n                                                                              \n date:                                                                        \n SLAC date of paper was transformed to the number of days since August 1, 1991\n
1504`Pajek`IMDB`428440`896308`3782463`no`250516`34003`132714`0`0%`0%`binary`rectangular`no`no`www.imdb.com`V. Batagelj`2006`bipartite graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nA(i,j)=1 if actor j played in movie i.  colname(j,:) is the name of the actor.\nColumn j = 362181 is Kevin Bacon.  Year of movie i is year(i).               \ncategory(i) gives the category of movie i, use code(category(i),:).           \n1: Drama, 2: Short, 3: Documentary, 4: Comedy, 5: Western, 6: Family,         \n7: Mystery, 8: Thriller, 9: -, 10: Music, 11: Crime, 12: Sci-Fi, 13: Horror,  \n14: War, 15: Fantasy, 16: Romance, 17: Adventure, 18: Animation, 19: Action,  \n20: Musical, 21: Film-Noir, 99: Unknown.                                      \nRemember that in MATLAB, A(i,:) is slow to compute; A(:,i) is faster.  If you \nwant row i of a sparse matrix, access the ith column of the transpose instead.\naux.ActorBacon(j) is the Bacon number of actor j.  aux.MovieBacon(i) is the   \nBacon number of movie i.  The largest ActorBacon number is 8 (for 10 actors). \n------------------------------------------------------------------------------\nMATLAB code for computing the Bacon numbers                                   \n    Bacon = Problem.aux.KevinBacon ;                                          \n    Bacon = Problem.aux.KevinBacon ;                                          \n    A = Problem.A ;                                                           \n    [m n] = size (A) ;                                                        \n    C = [speye(m) A ; A' speye(n)] ;                                          \n    x = zeros (m+n,1) ;                                                       \n    B = inf * ones (m+n,1) ;                                                  \n    x (m + Bacon) = 1 ;                                                       \n    B (m + Bacon) = 0 ;                                                       \n    tlen = 1 ;                                                                \n    for k = 1:m+n                                                             \n        x = x + C*x ;                                                         \n        t = find (x) ;                                                        \n        if (tlen == length (t))                                               \n            break                                                             \n        end                                                                   \n        tlen = length (t) ;                                                   \n        B (t) = min (B (t), k) ;                                              \n    end                                                                       \n    MovieBacon = (B (1:m) - 1) / 2 ;                                          \n    ActorBacon = B (m+1:end) / 2 ;                                            \n
1505`Pajek`internet`124651`124651`207214`unknown`unknown`unknown`116713`0`1%`0%`integer`unsymmetric`no`no`unknown`V. Batagelj`2006`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1506`Pajek`Journals`124`124`12068`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`yes`yes`CATI Center Ljubljana`V. Batagelj`2000`undirected weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n slovenske revije / Cati center, Ljubljana                                    \n leto 1999 + leto 2000 / vsi anketirani                                       \n  1 dnevniki                        8 revije\mo�ke specializirane             \n  2 revije\poslovne                 9 revije\najstni�ke                       \n  3 revije\racunalni�ke            10 revije\regionalne                       \n  4 revije\dom in oprema           11 revije\specializirane                   \n  5 revije\modne                   12 revije\�enske specializirane            \n  6 revije\informativni tedniki    13 revije\tv vodici                        \n  7 revije\brezplacniki            14 revije\�enske                           \n
1507`Pajek`Kohonen`4470`4470`12731`unknown`unknown`unknown`4459`0`0%`0%`binary`unsymmetric`no`no`E. Garfield`V. Batagelj, A. Mrvar`2002`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Articles with topic \"self-organizing maps\" or references to \"Kohonen T\",     \nTue Jun 18 10:39:51 2002                                                      \n
1508`Pajek`Lederberg`8843`8843`41601`unknown`unknown`unknown`8781`0`0%`0%`integer`unsymmetric`no`no`E. Garfield`V. Batagelj`2002`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Articles by and citing J Lederberg, 1945-2002, Wed Jul 31 13:40:22 2002      \n
1509`Barabasi`NotreDame_actors`392400`127823`1470404`no`114762`19604`11902`0`0%`0%`binary`rectangular`no`no`A Barabasi, R. Albert`H. Jeong`1999`bipartite graph`\nhttp://www.nd.edu/~networks (14 duplicate entries removed)\n
1510`Barabasi`NotreDame_www`325729`325729`929849`unknown`unknown`unknown`231666`0`33%`33%`binary`unsymmetric`no`no`R. Albert, H. Jeong, A. Barabasi`H. Jeong`1999`directed graph`\nhttp://www.nd.edu/~networks\n
1511`Barabasi`NotreDame_yeast`2114`2114`4480`unknown`unknown`unknown`417`0`symmetric`symmetric`binary`symmetric`no`no`H. Jeong, S. Mason, A. Barabasi, Z. Oltvai`H. Jeong`2001`undirected graph`\nhttp://www.nd.edu/~networks\n
1512`Pajek`ODLIS`2909`2909`18246`unknown`unknown`unknown`1028`0`20%`20%`integer`unsymmetric`no`no`J. Reitz`V. Batagelj, A. Mrvar`2000`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1513`Pajek`patents_main`240547`240547`560943`unknown`unknown`unknown`240547`0`0%`0%`real`unsymmetric`no`no`B. Hall, A. Jaffe, M. Tratjenberg`V. Batagelj`2001`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nRegarding conversion for UF sparse matrix collection: in the original data    \nthere are 561060 weighted edges.  Of this, 117 are duplicates, with identical\nedge weights.  These extraneous edges have been removed in this version.      \nAlso, the original data has auxiliary data for all 6009554 US Patents in the\ntime period.  This patent network has only 240547 patents, and the auxiliary \ndata (appyear, class, etc.) is matched here to the nodes of the graph.        \n------------------------------------------------------------------------------\n
1514`Pajek`patents`3774768`3774768`14970767`unknown`unknown`unknown`3774768`0`0%`0%`binary`unsymmetric`no`no`B. Hall, A. Jaffe, M. Tratjenberg`V. Batagelj`2001`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nRegarding conversion for UF sparse matrix collection: in the original data    \nthere are 14973817 edges (unweighted).  Of this, 3050 are duplicates        \nThis graph is binary; the duplicates have been removed.                       \nAlso, the original data has auxiliary data for all 6009554 US Patents in the\ntime period.  This patent network has only 3774768 patents, and the auxiliar\ndata (appyear, class, etc.) is matched here to the nodes of the graph.        \n------------------------------------------------------------------------------\n
1515`Pajek`Ragusa16`24`24`81`unknown`unknown`unknown`10`0`37%`20%`integer`unsymmetric`no`no`V. Batagelj`V. Batagelj`2006`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1516`Pajek`Ragusa18`23`23`64`unknown`unknown`unknown`8`0`33%`20%`integer`unsymmetric`no`no`V. Batagelj`V. Batagelj`2006`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1517`Pajek`Reuters911`13332`13332`296076`unknown`unknown`unknown`22`0`symmetric`symmetric`integer`symmetric`no`no`S. Corman, T. Kuhn, R. Mcphee, K. Dooley`V. Batagelj, A. Mrvar`2001`undirected weighted graph sequence`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.  This is the \"Days\" network.   \n------------------------------------------------------------------------------\nThe Reuters terror news network is based on all stories released during 66    \nconsecutive days by the news agency Reuters concerning the September 11 attack\non the U.S., beginning at 9:00 AM EST 9/11/01. The vertices of a network are  \nwords (terms); there is an edge between two words iff they appear in the same \ntext unit (sentence). The weight of an edge is its frequency. The network has \nn=13332 vertices (different words in the news) and m = 243447 edges, 50859    \nwith value larger than 1. There are no loops in the network.                  \nSteven R. Corman, Timothy Kuhn, Robert D. Mcphee and Kevin J. Dooley          \n(2002): Studying Complex Discursive Systems: Centering Resonance Analysis of  \nCommunication.                                                                \n------------------------------------------------------------------------------\nWhen converted to a sparse adjacency matrix for the UF Sparse Matrix          \nCollection, Day{i} is the graph of the ith day.  The diagonal entry           \nDay{i}(k,k) is 1 if word k appears in any news on the ith day.  Note          \nthat it may not appear in conjunction with other words in the same            \nsentence on that day.  The sum of nnz(tril(Day{i})) for i=1:66 is 243447.    \nThe overall matrix A is the sum of the Day{i} matrices.  A(i,j) is the number \nof times words i and j appear in same sentence (for i not equal to j).  A(k,k)\nis the number of days the word k appears in any news report.                  \nNote that this network has been renamed to Reuters911 here.                   \n------------------------------------------------------------------------------\n
1518`Pajek`Roget`1022`1022`5075`unknown`unknown`unknown`77`0`56%`56%`binary`unsymmetric`no`no`D. Knuth`V. Batagelj`1993`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n
1519`Pajek`Sandi_authors`86`86`248`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`I. Klavzar`V. Batagelj`1999`undirected weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1520`Pajek`Sandi_sandi`314`360`613`no`246`122`129`0`0%`0%`binary`rectangular`no`no`I. Klavzar`V. Batagelj`1999`bipartite graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1521`Pajek`SciMet`3084`3084`10413`unknown`unknown`unknown`3072`0`0%`0%`integer`unsymmetric`no`no`E. Garfield`V. Batagelj`2002`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Articles from or citing Scientometrics, 1978-2000, Wed Jun 12 16:39:51 2002  \n
1522`Pajek`SmaGri`1059`1059`4919`unknown`unknown`unknown`1057`0`0%`0%`integer`unsymmetric`no`no`E. Garfield`V. Batagelj`2001`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Citations to Small & Griffith and Descendants, Thu Nov 8 10:40:55 2001       \n
1523`Pajek`SmallW`396`396`994`unknown`unknown`unknown`396`0`0%`0%`integer`unsymmetric`no`no`E. Garfield`V. Batagelj`2002`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Papers that cite S Milgram's 1967 Psychology Today paper or use Small World  \nTue Jul 23 13:35:11 2002                                                      \n
1524`Pajek`Stranke94`10`10`90`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`V. Batagelj`V. Batagelj`1994`undirected weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Samo Kropivnik and Andrej Mrvar:                                             \n   An Analysis of the Slovene Parliamentary Parties Network.                  \n   Developments in Statistics and Methodology. (A. Ferligoj, A. Kramberger, ed\n   Metodolo\"ski zvezki 12, FDV, Ljubljana, 1996, p. 209-216.                  \n SKD - Slovene Christian Democrats;                                           \n ZLSD - Associated List of Social Democrats;                                  \n SDSS - Social Democratic Party of Slovenia;                                  \n LDS - Liberal Democratic Party;                                              \n ZS-ESS - first of two Green Parties, separated after 1992 elections;         \n ZS - second Green Party;                                                     \n DS - Democratic Party;                                                       \n SLS - Slovene People's Party;                                                \n SPS SNS - a group of deputies, former members of SNS, separated after 1992 el\n SNS - Slovene National Party;                                                \n ------------------------------------                                         \nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1525`Pajek`Tina_AskCal`11`11`29`unknown`unknown`unknown`4`0`28%`28%`binary`unsymmetric`no`no`V. Batagelj`V. Batagelj`1992`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n STUDENT GOVERNMENT OF UNIVERSITY OF LJUBLJANA (Hlebec 1992)                  \n asking for an opinion, recall                                                \n
1526`Pajek`Tina_AskCog`11`11`36`unknown`unknown`unknown`1`0`50%`50%`binary`unsymmetric`no`no`V. Batagelj`V. Batagelj`1992`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n STUDENT GOVERNMENT OF UNIVERSITY OF LJUBLJANA (Hlebec 1992)                  \n asking for an opinion, recognition                                           \n
1527`Pajek`Tina_DisCal`11`11`41`unknown`unknown`unknown`3`0`44%`44%`binary`unsymmetric`no`no`V. Batagelj`V. Batagelj`1992`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0, and have been removed.  This graph has 2D coordinates.                  \n
1528`Pajek`Tina_DisCog`11`11`48`unknown`unknown`unknown`1`0`50%`50%`binary`unsymmetric`no`no`V. Batagelj`V. Batagelj`1992`directed graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n STUDENT GOVERNMENT OF UNIVERSITY OF LJUBLJANA (Hlebec 1992)                  \n discussion, recognition                                                      \n
1529`Pajek`USAir97`332`332`4252`unknown`unknown`unknown`1`0`symmetric`symmetric`real`symmetric`no`no`US Air`V. Batagelj`1997`undirected weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nThe original problem had 3D xyz coordinates, but all values of z were equal   \nto 0.5, and have been removed.  This graph has 2D coordinates.                \n
1530`Pajek`USpowerGrid`4941`4941`13188`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`P. Tsaparas`V. Batagelj`2006`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n US power grid - unweighted network                                           \n from Panayiotis Tsaparas:                                                    \n   http://www.cs.helsinki.fi/u/tsaparas/MACN2006/data-code.html               \n adapted for Pajek, V. Batagelj, March 19, 2006                               \n   0 -> 4941                                                                  \n
1531`Pajek`Wordnet3`82670`82670`132964`unknown`unknown`unknown`67689`0`18%`17%`integer`unsymmetric`no`no`unknown`V. Batagelj`2006`directed weighted graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\nNOTE: this is a binary graph in the Pajek dataset, but where each edge has a  \nlabel (not a weight) in the range 1 to 9.  The following labels are used:     \n1  hypernym pointer                                                           \n2  entailment pointer                                                         \n3  similar pointer                                                            \n4  member meronym pointer                                                     \n5  substance meronym pointer                                                  \n6  part meronym pointer                                                       \n7  cause pointer                                                              \n8  grouped pointer                                                            \n9  attribute pointer                                                          \nThis is not a multigraph.  There are no edges (i,j) between the same nodes    \nwith the same label.  Thus, in the sparse matrix, the edge weight A(i,j)      \nrepresents the label 1 through 9 of edge (i,j).  No loss of information       \noccurs in this translation.  The above table is in aux.edgecode(1:9,:).       \nEach node is a word in a dictionary.  aux.category(i) gives the category      \nof the word:                                                                  \n   1: n (noun?)       63099 words                                             \n   3: a (adjective?)   5501 words                                             \n   4: r (?)            2846 words                                             \n   5: s (?)            6728 words.                                            \n------------------------------------------------------------------------------\n
1532`Pajek`WorldCities`315`100`7518`yes`100`1`3`0`0%`0%`integer`rectangular`no`no`P. Taylor, G. Gatalano`V. Batagelj`2004`weighted bipartite graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n World Cities and Services - two-mode network                                 \n http://www.lboro.ac.uk/gawc/datasets/da11.html                               \n Transformed in Pajek format by V. Batagelj, March 20, 2006                   \n city-by-service matrix.  service codes:                                      \n 1 - accountancy   2 - advertising   3 - banking/finance                      \n 4 - insurance     5 - law           6 - management consultancy               \n
1533`Pajek`yeast`2361`2361`13828`unknown`unknown`unknown`101`0`symmetric`symmetric`binary`symmetric`no`no`S. Sun, L. Ling, N. Zhang, G. Li, R. Chen`V. Batagelj`2003`undirected graph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Yeast protein interaction / long names                                       \n ---------------------------------------                                      \n Dongbo Bu, etal.: Topological structure analysis of the                      \n protein-protein interaction network in budding yeast.                        \n Nucleic Acids Research, 2003, Vol. 31, No. 9 2443-2450                       \n http://www.bioinfo.org.cn/PIN/                                               \n http://www.imb-jena.de/jcb/ppi/PPI_PDF_free/bu2003.pdf                       \n                                                                              \n transformed in Pajek format: V. Batagelj, 25. July 2003                      \n -----                                                                        \n Yeast protein interaction / PIN class                                        \n -------------------------------------                                        \n Dongbo Bu, etal.: Topological structure analysis of the                      \n protein-protein interaction network in budding yeast.                        \n Nucleic Acids Research, 2003, Vol. 31, No. 9 2443-2450                       \n http://www.bioinfo.org.cn/PIN/                                               \n                                                                              \n transformed in Pajek format: V. Batagelj, 25. July 2003                      \n PIN class encoding:                                                          \n 1-T, 2-M, 3-U, 4-C, 5-F, 6-P, 7-G, 8-D, 9-O, 10-E, 11-R, 12-B, 13-A          \n -----                                                                        \n
1534`Pajek`Zewail`6752`6752`54233`unknown`unknown`unknown`6706`0`0%`0%`integer`unsymmetric`no`no`E. Garfield`V. Batagelj`2002`directed multigraph`\n------------------------------------------------------------------------------\nPajek network converted to sparse adjacency matrix for inclusion in UF sparse \nmatrix collection, Tim Davis.  For Pajek datasets, See V. Batagelj & A. Mrvar,\nhttp://vlado.fmf.uni-lj.si/pub/networks/data/.                                \n------------------------------------------------------------------------------\n Articles citing and by AH Zewail, 1970-2002, Wed Jul 31 15:46:38 2002        \n
1535`Zitney`extr1b`2836`2836`10965`yes`2836`869`1`439`0%`0%`real`unsymmetric`no`no`S. Zitney`S. Hadfield, T. Davis`1994`chemical process simulation problem sequence`\naux.A{i}: ith matrix in sequence. aux.Zeros{i}: binary pattern of explicit\nzero entries provided in original data.  aux.S = union of all patterns.   \n
1536`Zitney`hydr1c`5308`5308`22592`yes`5308`1096`1`1160`0%`0%`real`unsymmetric`no`no`S. Zitney`S. Hadfield, T. Davis`1994`chemical process simulation problem sequence`\naux.A{i}: ith matrix in sequence. aux.Zeros{i}: binary pattern of explicit\nzero entries provided in original data.  aux.S = union of all patterns.   \n
1537`Schenk_IBMNA`c-18`2169`2169`15145`yes`2169`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1538`Schenk_IBMNA`c-19`2327`2327`21817`yes`2327`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1539`Schenk_IBMNA`c-20`2921`2921`20445`yes`2921`1`1`2240`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1540`Schenk_IBMNA`c-21`3509`3509`32145`yes`3509`7`7`12`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1541`Schenk_IBMNA`c-22`3792`3792`28870`yes`3792`2`2`2`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1542`Schenk_IBMNA`c-23`3969`3969`31079`yes`3969`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1543`Schenk_IBMNA`c-24`4119`4119`35699`yes`4119`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1544`Schenk_IBMNA`c-25`3797`3797`49635`yes`3797`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1545`Schenk_IBMNA`c-26`4307`4307`34537`yes`4307`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1546`Schenk_IBMNA`c-27`4563`4563`30927`yes`4563`1`1`448`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1547`Schenk_IBMNA`c-28`4598`4598`30590`yes`4598`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1548`Schenk_IBMNA`c-29`5033`5033`43731`yes`5033`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1549`Schenk_IBMNA`c-30`5321`5321`65693`yes`5321`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1550`Schenk_IBMNA`c-31`5339`5339`78571`yes`5339`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1551`Schenk_IBMNA`c-32`5975`5975`54471`yes`5975`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1552`Schenk_IBMNA`c-33`6317`6317`56123`yes`6317`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1553`Schenk_IBMNA`c-34`6611`6611`64333`yes`6611`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1554`Schenk_IBMNA`c-35`6537`6537`62891`yes`6537`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1555`Schenk_IBMNA`c-36`7479`7479`65941`yes`7479`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1556`Schenk_IBMNA`c-37`8204`8204`74676`yes`8204`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1557`Schenk_IBMNA`c-38`8127`8127`77689`yes`8127`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1558`Schenk_IBMNA`c-39`9271`9271`116587`yes`9271`1`1`20224`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1559`Schenk_IBMNA`c-40`9941`9941`81501`yes`9941`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1560`Schenk_IBMNA`c-41`9769`9769`101635`yes`9769`8`8`110`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1561`Schenk_IBMNA`c-42`10471`10471`110285`yes`10471`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1562`Schenk_IBMNA`c-43`11125`11125`123659`yes`11125`9`9`16`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1563`Schenk_IBMNA`c-44`10728`10728`85000`yes`10728`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1564`Schenk_IBMNA`c-45`13206`13206`174452`yes`13206`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1565`Schenk_IBMNA`c-46`14913`14913`130397`yes`14913`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1566`Schenk_IBMNA`c-47`15343`15343`211401`yes`15343`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1567`Schenk_IBMNA`c-48`18354`18354`166080`yes`18354`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1568`Schenk_IBMNA`c-49`21132`21132`157040`yes`21132`2`2`2`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1569`Schenk_IBMNA`c-50`22401`22401`180245`yes`22401`3`3`13380`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1570`Schenk_IBMNA`c-51`23196`23196`203048`yes`23196`2`2`2`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1571`Schenk_IBMNA`c-52`23948`23948`202708`yes`23948`5`5`8`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1572`Schenk_IBMNA`c-53`30235`30235`355139`yes`30235`42`42`17074`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1573`Schenk_IBMNA`c-54`31793`31793`385987`yes`31793`20`20`5706`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1574`Schenk_IBMNA`c-56`35910`35910`380240`yes`35910`5`5`660`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1575`Schenk_IBMNA`c-57`37833`37833`403373`yes`37833`49`49`1824`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1576`Schenk_IBMNA`c-60`43640`43640`298570`yes`43640`5`5`8`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1577`Schenk_IBMNA`c-61`43618`43618`310016`yes`43618`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1578`Schenk_IBMNA`c-65`48066`48066`360428`yes`48066`51`51`100`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1579`Schenk_IBMNA`c-big`345241`345241`2340859`yes`345241`77`77`152`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`optimization problem`
1580`Schenk_AFE`af_0_k101`503625`503625`17550675`yes`503625`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2006`structural problem`
1581`Schenk_AFE`af_1_k101`503625`503625`17550675`yes`503625`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2006`structural problem`
1582`Schenk_AFE`af_2_k101`503625`503625`17550675`yes`503625`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2006`structural problem`
1583`Schenk_AFE`af_3_k101`503625`503625`17550675`yes`503625`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2006`structural problem`
1584`Schenk_AFE`af_4_k101`503625`503625`17550675`yes`503625`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2006`structural problem`
1585`Schenk_AFE`af_5_k101`503625`503625`17550675`yes`503625`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`AutoForm Eng.`O. Schenk`2006`structural problem`
1586`Schenk_AFE`af_shell10`1508065`1508065`52259885`yes`1508065`1`1`412440`symmetric`symmetric`real`symmetric`yes`no`AutoForm Eng.`O. Schenk`2006`structural problem`
1587`Schenk_IBMNA`c-64b`51035`51035`707601`yes`51035`1`1`10240`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`subsequent optimization problem`\nnext: - first: Schenk_IBMNA/c-64                                       \nAn earlier version (Oct. 2003) of this matrix was obtained from Olaf   \nSchenk, and appears here as Schenk_IBMNA/c-64.  However, it differs    \nfrom the version posted on his web site as of Nov. 2006.   The new     \nversion appears here as Schenk_IBMNA/c-64b.   The two matrices are very\nsimilar, but not identical.                                            \n
1588`Schenk_IBMNA`c-66b`49989`49989`444851`yes`49989`7`7`54156`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`subsequent optimization problem`\nnext: - first: Schenk_IBMNA/c-66                                       \nAn earlier version (Oct. 2003) of this matrix was obtained from Olaf   \nSchenk, and appears here as Schenk_IBMNA/c-66.  However, it differs    \nfrom the version posted on his web site as of Nov. 2006.   The new     \nversion appears here as Schenk_IBMNA/c-66b.   The two matrices are very\nsimilar, but not identical.                                            \n
1589`Schenk_IBMNA`c-67b`57975`57975`530583`yes`57975`165`165`1352`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`subsequent optimization problem`\nnext: - first: Schenk_IBMNA/c-67                                       \nAn earlier version (Oct. 2003) of this matrix was obtained from Olaf   \nSchenk, and appears here as Schenk_IBMNA/c-67.  However, it differs    \nfrom the version posted on his web site as of Nov. 2006.   The new     \nversion appears here as Schenk_IBMNA/c-67b.   The two matrices are very\nsimilar, but not identical.                                            \n
1590`Schenk_IBMNA`c-73b`169422`169422`1279274`yes`169422`1`1`0`symmetric`symmetric`real`symmetric`no`no`IBM`O. Schenk`2006`subsequent optimization problem`\nnext: - first: Schenk_IBMNA/c-73                                       \nAn earlier version (Oct. 2003) of this matrix was obtained from Olaf   \nSchenk, and appears here as Schenk_IBMNA/c-73.  However, it differs    \nfrom the version posted on his web site as of Nov. 2006.   The new     \nversion appears here as Schenk_IBMNA/c-73b.   The two matrices are very\nsimilar, but not identical.                                            \n
1591`QCD`conf5_0-4x4-10`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1592`QCD`conf5_0-4x4-14`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1593`QCD`conf5_0-4x4-18`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1594`QCD`conf5_0-4x4-22`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1595`QCD`conf5_0-4x4-26`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1596`QCD`conf6_0-4x4-20`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1597`QCD`conf6_0-4x4-30`3072`3072`119808`yes`3072`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1598`QCD`conf5_4-8x8-05`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1599`QCD`conf5_4-8x8-10`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1600`QCD`conf5_4-8x8-15`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1601`QCD`conf5_4-8x8-20`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1602`QCD`conf6_0-8x8-20`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1603`QCD`conf6_0-8x8-30`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1604`QCD`conf6_0-8x8-80`49152`49152`1916928`yes`49152`2`1`0`92%`46%`complex`unsymmetric`no`no`B. Medeke`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1999`theoretical/quantum chemistry problem`
1605`Cylshell`s1rmq4m1`5489`5489`262411`yes`5489`1`1`18700`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s1rmq4m1.mtx                                                            \n%TITLE Cyl shell R/t = 10 unif 30x30 quad mesh stab MITC4 elem with drill rot  \n%KEY   s1rmq4m1                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%REFERENCE   M. Benzi, R. Kouhia, M.Tuma: An assesment of some                 \n%            preconditioning techniques in shell problems                      \n%            Technical Report LA-UR-97-3892, Los Alamos National Laboratory    \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 10                                           \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 30 x 30 quadrilateral mesh               \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 2x2 Gauss-Legendre integration                                          \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1606`Cylshell`s2rmq4m1`5489`5489`263351`yes`5489`1`1`17760`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s2rmq4m1.mtx                                                            \n%TITLE Cyl shell R/t = 100 unif 30x30 quad mesh stab MITC4 elem with drill rot \n%KEY   s2rmq4m1                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%REFERENCE   M. Benzi, R. Kouhia, M.Tuma: An assesment of some                 \n%            preconditioning techniques in shell problems                      \n%            Technical Report LA-UR-97-3892, Los Alamos National Laboratory    \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 100                                          \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 30 x 30 quadrilateral mesh               \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 2x2 Gauss-Legendre integration                                          \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1607`Cylshell`s3rmq4m1`5489`5489`262943`yes`5489`1`1`18168`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s3rmq4m1.mtx                                                            \n%TITLE Cyl shell R/t=1000 unif 30x30 quad mesh stab MITC4 elem with drill rot  \n%KEY   s3rmq4m1                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%REFERENCE   M. Benzi, R. Kouhia, M.Tuma: An assesment of some                 \n%            preconditioning techniques in shell problems                      \n%            Technical Report LA-UR-97-3892, Los Alamos National Laboratory    \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 1000                                         \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 30 x 30 quadrilateral mesh               \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 2x2 Gauss-Legendre integration                                          \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1608`Cylshell`s1rmt3m1`5489`5489`217651`yes`5489`1`1`1870`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s1rmt3m1.mtx                                                            \n%TITLE Cyl shell R/t=10 unif 30x30 trian mesh stab MITC3 elem with drill rot   \n%KEY   s1rmt3m1                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 10                                           \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 30 x 30 triangular mesh                  \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 3-point integration                                                     \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1609`Cylshell`s2rmt3m1`5489`5489`217681`yes`5489`1`1`1840`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s2rmt3m1.mtx                                                            \n%TITLE Cyl shell R/t=100 unif 30x30 trian mesh stab MITC3 elem with drill rot  \n%KEY   s2rmt3m1                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 100                                          \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 30 x 30 triangular mesh                  \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 3-point integration                                                     \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1610`Cylshell`s3rmt3m1`5489`5489`217669`yes`5489`1`1`1852`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s3rmt3m1.mtx                                                            \n%TITLE Cyl shell R/t=1000 unif 30x30 trian mesh stab MITC3 elem with drill rot \n%KEY   s3rmt3m1                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 1000                                         \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with uniform 30 x 30 triangular mesh                  \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 3-point integration                                                     \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% and the FE mesh is  uniform there exist some zeros.                          \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1611`Cylshell`s3rmt3m3`5357`5357`207123`yes`5357`1`1`572`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`R. Boisvert, R. Pozo, K. Remington, B. Miller, R. Lipman, R. Barrett, J. Dongarra`1997`structural problem`\n%                                                                              \n%FILE  s3rmt3m3.mtx                                                            \n%TITLE Cyl shell R/t=1000 grad trian mesh 1666 stab MITC3 elem with drill rot  \n%KEY   s3rmt3m3                                                                \n%                                                                              \n%                                                                              \n%CONTRIBUTOR Reijo Kouhia (reijo.kouhia@hut.fi)                                \n%                                                                              \n%BEGIN DESCRIPTION                                                             \n% Matrix from a static analysis of a cylindrical shell                         \n% Radius to thickness ratio R/t = 1000                                         \n% Length to radius ratio    R/L = 1                                            \n% One octant discretized with graded triangular mesh (1666 elements)           \n% element:                                                                     \n% facet-type shell element where the bending part is formulated                \n% using the stabilized MITC theory (stabilization paramater 0.4)               \n% the membrane part includes drilling rotations using                          \n% the Hughes-Brezzi formulation with (regularizing parameter = G/1000,         \n% where G is the shear modulus)                                                \n% full 3-point integration                                                     \n% --------------------------------------------------------------------------   \n% Note:                                                                        \n% The sparsity pattern of the matrix is determined from the element            \n% connectivity data assuming that the element matrix is full.                  \n% Since this case the  material model is linear isotropically elastic          \n% there exist some zeros.                                                      \n% Since the removal of those zero elements is trivial                          \n% but the reconstruction of the current sparsity                               \n% pattern is impossible from the sparsified structure without any further      \n% knowledge of the element connectivity, the zeros are retained in this file.  \n% ---------------------------------------------------------------------------  \n%END DESCRIPTION                                                               \n%                                                                              \n%                                                                              \n
1612`Bai`cryg10000`10000`10000`49699`yes`10000`1`1`0`100%`0%`real`unsymmetric`no`no`C. Yang`Z. Bai, D. Day, J. Demmel, J. Dongarra`1996`materials problem`
1613`Bai`cryg2500`2500`2500`12349`yes`2500`1`1`0`99%`0%`real`unsymmetric`no`no`C. Yang`Z. Bai, D. Day, J. Demmel, J. Dongarra`1996`materials problem`
1614`Bai`dw2048`2048`2048`10114`yes`2048`1`1`0`98%`95%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
1615`Bai`dw8192`8192`8192`41746`yes`8192`1`1`0`96%`92%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
1616`Bai`dwa512`512`512`2480`yes`512`1`1`0`98%`91%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
1617`Bai`dwb512`512`512`2500`yes`512`1`1`0`97%`88%`real`unsymmetric`no`no`H. Dong`Z. Bai, D. Day, J. Demmel, J. Dongarra`1993`electromagnetics problem`
1618`Bai`dwg961a`961`961`3405`no`705`3`257`0`symmetric`36%`complex`symmetric`no`no`S. Gedney and U. Navasariwala`Z. Bai, D. Day, J. Demmel, J. Dongarra`1996`electromagnetics problem`
1619`Bai`dwg961b`961`961`10591`yes`961`1`1`0`symmetric`35%`complex`symmetric`no`no`S. Gedney and U. Navasariwala`Z. Bai, D. Day, J. Demmel, J. Dongarra`1996`electromagnetics problem`
1620`Bai`mhd1280a`1280`1280`47906`yes`1280`15`15`0`90%`31%`complex`unsymmetric`no`no`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
1621`Bai`mhd1280b`1280`1280`22778`yes`1280`20`20`0`symmetric`symmetric`complex`Hermitian`yes`yes`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
1622`Bai`mhd3200a`3200`3200`68026`yes`3200`8`8`0`77%`27%`real`unsymmetric`no`no`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
1623`Bai`mhd3200b`3200`3200`18316`yes`3200`14`14`0`symmetric`symmetric`real`symmetric`yes`yes`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
1624`Bai`mhd4800a`4800`4800`102252`yes`4800`8`8`0`77%`27%`real`unsymmetric`no`no`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
1625`Bai`mhd4800b`4800`4800`27520`yes`4800`14`14`0`symmetric`symmetric`real`symmetric`yes`yes`A. Booten, M. Kooper, H. van der Vorst, S. Poedts, J. Goedbloed`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`electromagnetics problem`
1626`Bai`qh1484`1484`1484`6110`yes`1484`3`3`0`symmetric`5%`real`unsymmetric`no`no`D. Ndereyimana`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`power network problem`
1627`Bai`qh768`768`768`2934`yes`768`43`1`0`93%`0%`real`unsymmetric`no`no`D. Ndereyimana`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`power network problem`
1628`Bai`rdb1250`1250`1250`7300`yes`1250`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1629`Bai`rdb1250l`1250`1250`7300`yes`1250`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1630`Bai`rdb200`200`200`1120`yes`200`1`1`0`symmetric`78%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1631`Bai`rdb200l`200`200`1120`yes`200`1`1`0`symmetric`78%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1632`Bai`rdb2048_noL`2048`2048`12032`yes`2048`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`\nThis matrix (Bai/rdb2048_noL) is the NEP RDB2048 matrix.  It      \ndiffers from the Bai/rdb2048 matrix.  The Bai/rdb2048 and NEP     \nRDB2048L matrices are identical.  See the notes in Bai/rdb2048 for\nmore details.                                                     \n
1633`Bai`rdb3200l`3200`3200`18880`yes`3200`1`1`0`symmetric`80%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1634`Bai`rdb450`450`450`2580`yes`450`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1635`Bai`rdb450l`450`450`2580`yes`450`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1636`Bai`rdb800l`800`800`4640`yes`800`1`1`0`symmetric`79%`real`unsymmetric`no`no`K. Meerbergen`Z. Bai, D. Day, J. Demmel, J. Dongarra`1994`computational fluid dynamics problem`
1637`Bai`tols1090`1090`1090`3546`yes`1090`1073`801`0`32%`0%`real`unsymmetric`no`no`S. Godet-Thobie`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`computational fluid dynamics problem`
1638`Bai`tols2000`2000`2000`5184`yes`2000`1983`1529`0`34%`0%`real`unsymmetric`no`no`S. Godet-Thobie`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`computational fluid dynamics problem`
1639`Bai`tols340`340`340`2196`yes`340`323`201`0`29%`0%`real`unsymmetric`no`no`S. Godet-Thobie`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`computational fluid dynamics problem`
1640`Bai`tols4000`4000`4000`8784`yes`4000`3983`3129`0`36%`0%`real`unsymmetric`no`no`S. Godet-Thobie`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`computational fluid dynamics problem`
1641`Bai`tols90`90`90`1746`yes`90`73`1`0`27%`0%`real`unsymmetric`no`no`S. Godet-Thobie`Z. Bai, D. Day, J. Demmel, J. Dongarra`1991`computational fluid dynamics problem`
1642`POLYFLOW`invextr1_new`30412`30412`1793881`yes`30412`1`1`0`97%`72%`real`unsymmetric`no`no`J. Marchal`J. Koster`2005`computational fluid dynamics problem`\nfrom Parasol, http://www.parallab.uib.no/projects/parasol/data\n
1643`POLYFLOW`mixtank_new`29957`29957`1990919`yes`29957`1`1`4122`symmetric`99%`real`unsymmetric`no`no`J. Marchal`J. Koster`2005`computational fluid dynamics problem`\nfrom Parasol, http://www.parallab.uib.no/projects/parasol/data\n
1644`INPRO`msdoor`415863`415863`19173163`yes`415863`11079`11079`1067772`symmetric`symmetric`real`symmetric`yes`yes`J. Weiher`J. Koster`2005`structural problem`\nfrom Parasol, http://www.parallab.uib.no/projects/parasol/data\n
1645`Mittelmann`nug08-3rd`19728`29856`148416`yes`19728`1`1`0`0%`0%`integer`rectangular`no`no`S. Karisch, F. Rendl`H. Mittelmann`1995`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset           \nminimize c'*x, subject to A*x=b and lo <= x <= hi                      \n                                                                       \nNUG:  computing LP lower bounds for quadratic assignment problems.  see\nS.E. KARISCH and F. RENDL. Lower bounds for the quadratic assignment   \nproblem via triangle decompositions.  Mathematical Programming,        \n71(2):137-152, 1995.                                                   \nK.G. Ramakrishnan, M.G.C. Resende, B. Ramachandran, and J.F. Pekny,    \n\"Tight QAP bounds via linear programming,\" Combinatorial and Global    \nOptimization, P.M. Pardalos, A. Migdalas, and R.E. Burkard, eds.,      \nWorld Scientific Publishing Co., Singapore, pp. 297-303, 2002.         \n
1646`Mittelmann`pds-30`49944`158489`340635`no`49788`967`157`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1647`Mittelmann`pds-40`66844`217531`466800`no`66641`1302`204`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1648`Mittelmann`pds-50`83060`275814`590833`no`82837`1405`224`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1649`Mittelmann`pds-60`99431`336421`719557`no`99204`1507`228`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1650`Mittelmann`pds-70`114944`390005`833465`no`114717`1533`228`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1651`Mittelmann`pds-80`129181`434580`927826`no`128954`1546`228`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1652`Mittelmann`pds-90`142823`475448`1014136`no`142596`1546`228`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1653`Mittelmann`pds-100`156243`514577`1096002`no`156016`1618`300`0`0%`0%`integer`rectangular`no`no`W. Carolan, J. Hill, J. Kennington, S. Niemi, S. Wichmann`H. Mittelmann`1990`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset       \nminimize c'*x, subject to A*x=b and lo <= x <= hi                  \n                                                                   \nPDS:  Patient distribution (evacuation) system. see                \nW. Carolan, J. Hill, J. Kennington, S. Niemi, and S. Wichmann, \"An \nEmpirical Evaluation of the KORBX Algorithms for Military Airlift,\"\nApplications, Operations Research, 38, (1990), 240-248.            \n
1654`Mittelmann`rail507`507`63516`409856`yes`507`1`1`0`0%`0%`integer`rectangular`no`no`P. Nobili`J. Beasley`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n                                                            \nRAIL: set covering problems from the Italian railroad, see  \nhttp://people.brunel.ac.uk/~mastjjb/jeb/orlib/scpinfo.html  \n
1655`Mittelmann`rail516`516`47827`315412`yes`516`1`14`0`0%`0%`integer`rectangular`no`no`P. Nobili`J. Beasley`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n                                                            \nRAIL: set covering problems from the Italian railroad, see  \nhttp://people.brunel.ac.uk/~mastjjb/jeb/orlib/scpinfo.html  \n
1656`Mittelmann`rail582`582`56097`402290`yes`582`1`1`0`0%`0%`integer`rectangular`no`no`P. Nobili`J. Beasley`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n                                                            \nRAIL: set covering problems from the Italian railroad, see  \nhttp://people.brunel.ac.uk/~mastjjb/jeb/orlib/scpinfo.html  \n
1657`Mittelmann`rail2586`2586`923269`8011362`yes`2586`1`8`0`0%`0%`integer`rectangular`no`no`P. Nobili`J. Beasley`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n                                                            \nRAIL: set covering problems from the Italian railroad, see  \nhttp://people.brunel.ac.uk/~mastjjb/jeb/orlib/scpinfo.html  \n
1658`Mittelmann`rail4284`4284`1096894`11284032`yes`4284`1`5`0`0%`0%`integer`rectangular`no`no`P. Nobili`J. Beasley`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n                                                            \nRAIL: set covering problems from the Italian railroad, see  \nhttp://people.brunel.ac.uk/~mastjjb/jeb/orlib/scpinfo.html  \n
1659`Mittelmann`sgpf5y6`246077`312540`831976`yes`246077`1`1`0`0%`0%`integer`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1660`Mittelmann`stormG2_1000`528185`1377306`3459881`no`526185`3002`5001`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1661`Mittelmann`watson_1`201155`386992`1055093`yes`201155`15326`1`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1662`Mittelmann`watson_2`352013`677224`1846391`yes`352013`26816`1`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1663`Mittelmann`cont11_l`1468599`1961394`5382999`yes`1468599`1`1`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1664`Mittelmann`cont1_l`1918399`1921596`7031999`yes`1918399`1`1`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1665`Mittelmann`fome11`12142`24460`71264`yes`12142`1`2`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1666`Mittelmann`fome12`24284`48920`142528`yes`24284`1`4`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1667`Mittelmann`fome13`48568`97840`285056`yes`48568`1`8`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1668`Mittelmann`fome20`33874`108175`232647`no`33798`853`77`0`0%`0%`integer`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1669`Mittelmann`fome21`67748`216350`465294`no`67596`1704`154`0`0%`0%`integer`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1670`Mittelmann`neos`479119`515905`1526794`yes`479119`1`1`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1671`Mittelmann`neos1`131581`133473`599590`yes`131581`1`1`0`0%`0%`integer`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1672`Mittelmann`neos2`132568`134128`685087`yes`132568`1`1`0`0%`0%`integer`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1673`Mittelmann`neos3`512209`518832`2055024`yes`512209`1`1`0`0%`0%`integer`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1674`Mittelmann`spal_004`10203`321696`46168124`yes`10203`1`1`0`0%`0%`real`rectangular`no`no`unknown`H. Mittelmann`2005`linear programming problem`\nHans Mittelmann test set, http://plato.asu.edu/ftp/lptestset\nminimize c'*x, subject to A*x=b and lo <= x <= hi           \n
1675`Meszaros`gams10am`114`171`407`yes`114`2`4`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1676`Meszaros`gams30am`354`531`1287`yes`354`2`4`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1677`Meszaros`gams60am`714`1071`2607`yes`714`2`4`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1678`Meszaros`gas11`459`862`2166`yes`459`8`11`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1679`Meszaros`aa01`823`8904`72965`yes`823`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1680`Meszaros`aa03`825`8627`70806`no`822`6`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1681`Meszaros`aa3`825`8627`70806`no`822`6`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1682`Meszaros`aa4`426`7195`52121`yes`426`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1683`Meszaros`aa5`801`8308`65953`no`800`2`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1684`Meszaros`aa6`646`7292`51728`yes`646`2`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1685`Meszaros`air02`50`6774`61555`yes`50`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1686`Meszaros`air03`124`10757`91028`yes`124`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1687`Meszaros`air04`823`8904`72965`yes`823`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1688`Meszaros`air05`426`7195`52121`yes`426`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1689`Meszaros`air06`825`8627`70806`no`822`6`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1690`Meszaros`aircraft`3754`7517`20267`yes`3754`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1691`Meszaros`bas1lp`5411`9825`587775`yes`5411`1`2`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1692`Meszaros`baxter`27441`30733`111576`no`24386`74`43`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1693`Meszaros`car4`16384`33052`63724`yes`16384`1`15685`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1694`Meszaros`cari`400`1200`152800`yes`400`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1695`Meszaros`ch`3700`8291`24102`yes`3700`19`19`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1696`Meszaros`co5`5774`12325`57993`yes`5774`60`75`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1697`Meszaros`co9`10789`22924`109651`yes`10789`96`123`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1698`Meszaros`complex`1023`1408`46463`yes`1023`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1699`Meszaros`cq5`5048`11748`51571`yes`5048`24`25`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1700`Meszaros`cq9`9278`21534`96653`yes`9278`32`33`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1701`Meszaros`cr42`905`1513`6614`yes`905`2`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1702`Meszaros`crew1`135`6469`46950`yes`135`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1703`Meszaros`dano3mip`3202`15851`81633`yes`3202`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1704`Meszaros`dbic1`43200`226317`1081843`yes`43200`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1705`Meszaros`dbir1`18804`45775`1077025`no`18802`2`2339`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1706`Meszaros`dbir2`18906`45877`1158159`no`18904`29`2366`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1707`Meszaros`df2177`630`10358`22336`yes`630`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1708`Meszaros`e18`24617`38602`156466`yes`24617`1`2`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2006`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1709`Meszaros`ex3sta1`17443`17516`68779`yes`17443`2`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1710`Meszaros`farm`7`17`41`yes`7`2`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1711`Meszaros`gams10a`114`171`407`yes`114`2`4`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1712`Meszaros`gams30a`354`531`1287`yes`354`2`4`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1713`Meszaros`ge`10099`16369`44825`yes`10099`482`3`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1714`Meszaros`iiasa`669`3639`7317`yes`669`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1715`Meszaros`jendrec1`2109`4228`89608`yes`2109`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1716`Meszaros`kl02`71`36699`212536`yes`71`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1717`Meszaros`l9`244`1483`4659`yes`244`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1718`Meszaros`lp22`2958`16392`68518`yes`2958`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1719`Meszaros`lpl2`3294`10881`32232`yes`3294`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1720`Meszaros`lpl3`10828`33686`100525`yes`10828`174`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1721`Meszaros`mod2`34774`66409`199810`yes`34774`420`420`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1722`Meszaros`model1`362`798`3028`yes`362`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1723`Meszaros`model2`379`1321`7607`yes`379`13`2`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1724`Meszaros`model3`1609`4578`23974`yes`1609`8`18`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1725`Meszaros`model4`1337`4962`45753`yes`1337`1`2`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1726`Meszaros`model5`1888`11802`89925`no`1744`10`145`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1727`Meszaros`model6`2096`5289`27628`no`2094`32`10`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1728`Meszaros`model7`3358`9582`51027`yes`3358`14`28`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1729`Meszaros`model8`2896`6464`25277`yes`2896`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1730`Meszaros`model9`2879`10939`55956`no`2787`43`190`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1731`Meszaros`model10`4400`16819`150372`yes`4400`5`2`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1732`Meszaros`nemsafm`334`2348`2826`yes`334`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1733`Meszaros`nemscem`651`1712`3840`yes`651`173`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1734`Meszaros`nemsemm1`3945`75352`1053986`yes`3945`59`134`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1735`Meszaros`nemsemm2`6943`48878`182012`yes`6943`22`35`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1736`Meszaros`nemspmm1`2372`8903`55867`no`2362`35`32`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1737`Meszaros`nemspmm2`2301`8734`68225`yes`2301`60`23`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1738`Meszaros`nemswrld`7138`28550`192283`no`6647`137`586`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1739`Meszaros`nl`7039`15325`47035`yes`7039`13`10`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1740`Meszaros`nw14`73`123409`904910`yes`73`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1741`Meszaros`p0033`15`48`113`yes`15`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1742`Meszaros`p0040`23`63`133`yes`23`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1743`Meszaros`p010`10090`19090`118000`yes`10090`20`10`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1744`Meszaros`p0201`133`334`2056`yes`133`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1745`Meszaros`p0282`241`523`2207`yes`241`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1746`Meszaros`p0291`252`543`2283`yes`252`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1747`Meszaros`p0548`176`724`1887`yes`176`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1748`Meszaros`p05`5090`9590`59045`yes`5090`15`10`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1749`Meszaros`p2756`755`3511`9692`yes`755`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1750`Meszaros`p6000`2095`7967`19826`yes`2095`3`23`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1751`Meszaros`pcb1000`1565`2820`20463`yes`1565`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1752`Meszaros`pcb3000`3960`7732`57479`yes`3960`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1753`Meszaros`pf2177`9728`10178`30984`yes`9728`1`271`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1754`Meszaros`primagaz`1554`10836`21665`yes`1554`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1755`Meszaros`problem`12`46`86`yes`12`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1756`Meszaros`progas`1650`1900`8897`yes`1650`15`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1757`Meszaros`qiulp`1192`1900`4492`yes`1192`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1758`Meszaros`r05`5190`9690`104145`yes`5190`25`20`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1759`Meszaros`refine`29`62`153`yes`29`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1760`Meszaros`rlfddd`4050`61521`264627`yes`4050`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1761`Meszaros`rlfdual`8052`74970`282031`yes`8052`1`5`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1762`Meszaros`rlfprim`58866`62716`320591`yes`58866`1`5`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1763`Meszaros`rosen1`520`1544`23794`yes`520`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1764`Meszaros`rosen2`1032`3080`47536`yes`1032`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1765`Meszaros`rosen7`264`776`8034`yes`264`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1766`Meszaros`rosen8`520`1544`16058`yes`520`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1767`Meszaros`rosen10`2056`6152`64192`yes`2056`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1768`Meszaros`route`20894`43019`206782`yes`20894`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1769`Meszaros`seymourl`4944`6316`38493`yes`4944`1`138`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1770`Meszaros`slptsk`2861`3347`72465`yes`2861`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1771`Meszaros`south31`18425`36321`112398`yes`18425`437`437`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1772`Meszaros`stat96v1`5995`197472`588798`yes`5995`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2005`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1773`Meszaros`stat96v2`29089`957432`2852184`yes`29089`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2005`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1774`Meszaros`stat96v3`33841`1113780`3317736`yes`33841`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2005`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1775`Meszaros`stat96v4`3173`63076`491336`yes`3173`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2005`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1776`Meszaros`stat96v5`2307`75779`233921`no`2305`3`3`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2005`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1777`Meszaros`t0331-4l`664`46915`430982`yes`664`1`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1778`Meszaros`testbig`17613`31223`61639`yes`17613`2`2`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1779`Meszaros`ulevimin`6590`46937`164538`yes`6590`197`184`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1780`Meszaros`us04`163`28016`297538`no`162`2`1`0`0%`0%`binary`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1781`Meszaros`world`34506`67147`198883`yes`34506`401`401`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1782`Meszaros`zed`116`142`666`yes`116`5`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1783`Meszaros`de063155`852`1848`4913`yes`852`1`253`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1784`Meszaros`de063157`936`1908`5119`yes`936`1`253`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1785`Meszaros`de080285`936`1908`5082`yes`936`1`253`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1786`Meszaros`gen1`769`2561`63086`yes`769`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1787`Meszaros`gen2`1121`3264`81855`yes`1121`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1788`Meszaros`gen4`1537`4298`107103`yes`1537`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1789`Meszaros`gen`769`2561`63086`yes`769`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1790`Meszaros`iprob`3001`3001`9000`yes`3001`1`1`0`symmetric`50%`real`unsymmetric`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1791`Meszaros`l30`2701`16281`52070`yes`2701`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1792`Meszaros`stoch_aircraft`3754`7517`20267`yes`3754`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1793`Meszaros`cep1`1521`4769`8233`yes`1521`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1794`Meszaros`deter0`1923`5468`11173`yes`1923`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1795`Meszaros`deter1`5527`15737`32187`yes`5527`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1796`Meszaros`deter2`6095`17313`35731`yes`6095`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1797`Meszaros`deter3`7647`21777`44547`yes`7647`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1798`Meszaros`deter4`3235`9133`19231`yes`3235`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1799`Meszaros`deter5`5103`14529`29715`yes`5103`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1800`Meszaros`deter6`4255`12113`24771`yes`4255`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1801`Meszaros`deter7`6375`18153`37131`yes`6375`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1802`Meszaros`deter8`3831`10905`22299`yes`3831`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1803`Meszaros`fxm2-6`1520`2845`12812`yes`1520`39`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1804`Meszaros`fxm2-16`3900`7335`32972`yes`3900`99`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1805`Meszaros`fxm3_6`6200`12625`57722`yes`6200`159`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1806`Meszaros`fxm3_16`41340`85575`392252`yes`41340`1059`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1807`Meszaros`fxm4_6`22400`47185`265442`yes`22400`159`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1808`Meszaros`pgp2`4034`13254`22474`yes`4034`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1809`Meszaros`stormg2-125`66185`172431`433256`no`65935`377`626`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1810`Meszaros`stormg2-27`14441`37485`94274`no`14387`83`136`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1811`Meszaros`stormg2-8`4409`11322`28553`no`4393`26`41`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1812`Meszaros`degme`185501`659415`8127528`yes`185501`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2006`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1813`Meszaros`karted`46502`133115`1770349`yes`46502`2`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2006`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1814`Meszaros`tp-6`142752`1014301`11537419`yes`142752`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2006`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1815`Meszaros`ts-palko`22002`47235`1076903`yes`22002`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2006`linear programming problem`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1816`Meszaros`delf`3170`6654`15397`yes`3170`1`1058`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1817`Meszaros`kleemin`8`16`44`yes`8`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1818`Meszaros`large`4282`8617`20635`yes`4282`1`1322`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1819`Meszaros`nsct`23003`37563`697738`no`23002`22`3698`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1820`Meszaros`nsic`465`897`3449`yes`465`7`7`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1821`Meszaros`nsir`4453`10057`154939`yes`4453`4`4`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1822`Meszaros`plddb`3069`5049`10839`yes`3069`199`397`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1823`Meszaros`rat`3136`9408`268908`yes`3136`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1824`Meszaros`small`677`1400`3207`yes`677`11`222`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \n
1825`Meszaros`pltexpa`26894`70364`143059`yes`26894`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1826`Meszaros`sc205-2r`35213`62423`123239`yes`35213`2`2`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1827`Meszaros`scagr7-2b`9743`13847`35885`yes`9743`2`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1828`Meszaros`scagr7-2c`2447`3479`9005`yes`2447`2`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1829`Meszaros`scagr7-2r`32847`46679`120141`yes`32847`2`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1830`Meszaros`scfxm1-2b`19036`33047`111052`yes`19036`771`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1831`Meszaros`scfxm1-2r`37980`65943`221388`yes`37980`1539`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1832`Meszaros`scrs8-2b`1820`3499`7367`yes`1820`262`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1833`Meszaros`scrs8-2c`1820`3499`7367`yes`1820`262`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1834`Meszaros`scrs8-2r`14364`27691`58439`yes`14364`2054`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1835`Meszaros`scsd8-2b`5130`35910`112770`yes`5130`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1836`Meszaros`scsd8-2c`5130`35910`112770`yes`5130`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1837`Meszaros`scsd8-2r`8650`60550`190210`yes`8650`1`1`0`0%`0%`real`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1838`Meszaros`sctap1-2b`15390`33858`99454`yes`15390`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1839`Meszaros`sctap1-2c`3390`7458`21854`yes`3390`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1840`Meszaros`sctap1-2r`28830`63426`186366`yes`28830`1`1`0`0%`0%`integer`rectangular`no`no`unknown`C. Meszaros`2004`linear programming problem sequence`\nhttp://www.sztaki.hu/~meszaros/public_ftp/lptestset      \nConverted to standard form via Resende and Veiga's mpsrd:\nminimize c'*x, subject to A*x=b and lo <= x <= hi        \nDeterminisitic equivalent of stochastic LP               \n
1841`Gleich`wb-cs-stanford`9914`9914`36854`unknown`unknown`unknown`4391`0`46%`46%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2001`directed graph`\nFor nodenames, see http://www.cise.ufl.edu/research/sparse/aux/Gleich\nThis graph is a subset of Gleich/wb-edu, with *.cs.stanford.edu only.\n
1842`Gleich`wb-edu`9845725`9845725`57156537`unknown`unknown`unknown`4269022`0`33%`33%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2001`directed graph`\nFor nodenames, see http://www.cise.ufl.edu/research/sparse/aux/Gleich\nThis graph is a subset of the webbase-2001 graph in the collection:  \nhttp://law.dsi.unimi.it/index.php?option=com_include&Itemid=65       \nThis was a web crawl performed at Stanford in 2001.                  \n
1843`Gleich`wikipedia-20051105`1634989`1634989`19753078`unknown`unknown`unknown`528698`0`12%`12%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2005`directed graph`\nFor nodenames, see http://www.cise.ufl.edu/research/sparse/aux/Gleich\nPages outside the \"Main\", \"Category\" and \"Portal\" namespace excluded.\n
1844`Gleich`wikipedia-20060925`2983494`2983494`37269096`unknown`unknown`unknown`975731`0`12%`12%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2006`directed graph`\nFor nodenames, see http://www.cise.ufl.edu/research/sparse/aux/Gleich\nPages outside the \"Main\", \"Category\" and \"Portal\" namespace excluded.\n
1845`Gleich`wikipedia-20061104`3148440`3148440`39383235`unknown`unknown`unknown`1040035`0`12%`12%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2006`directed graph`\nFor nodenames, see http://www.cise.ufl.edu/research/sparse/aux/Gleich\nPages outside the \"Main\", \"Category\" and \"Portal\" namespace excluded.\n
1846`Gleich`wikipedia-20070206`3566907`3566907`45030389`unknown`unknown`unknown`1203340`0`12%`12%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2007`directed graph`\nFor nodenames, see http://www.cise.ufl.edu/research/sparse/aux/Gleich\nPages outside the \"Main\", \"Category\" and \"Portal\" namespace excluded.\n
1847`UTEP`Dubcova1`16129`16129`253009`yes`16129`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`L. Dubcova, J. Cerveny, and P. Solin`T. Davis`2007`2D/3D problem`
1848`UTEP`Dubcova2`65025`65025`1030225`yes`65025`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`L. Dubcova, J. Cerveny, and P. Solin`T. Davis`2007`2D/3D problem`
1849`UTEP`Dubcova3`146689`146689`3636643`yes`146689`1`1`6`symmetric`symmetric`real`symmetric`yes`yes`L. Dubcova, J. Cerveny, and P. Solin`T. Davis`2007`2D/3D problem`
1850`BenElechi`BenElechi1`245874`245874`13150496`yes`245874`7`7`0`symmetric`symmetric`real`symmetric`yes`yes`S. Ben Elechi`T. Davis`2007`2D/3D problem`
1851`Botonakis`FEM_3D_thermal1`17880`17880`430740`yes`17880`1`1`0`symmetric`95%`real`unsymmetric`no`no`I. Botonakis`T. Davis`2007`thermal problem`\nThis is a very small test problem.\n
1852`Botonakis`FEM_3D_thermal2`147900`147900`3489300`yes`147900`1`1`0`symmetric`95%`real`unsymmetric`no`no`I. Botonakis`T. Davis`2007`thermal problem`\nThis is the smallest problem whose results are useful.\n
1853`Wissgott`parabolic_fem`525825`525825`3674625`yes`525825`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`P. Wissgott`T. Davis`2007`computational fluid dynamics problem`
1854`Watson`chem_master1`40401`40401`201201`yes`40401`1`1`0`symmetric`0%`real`unsymmetric`no`no`L. Watson and J. Zhang`T. Davis`2007`2D/3D problem`\nThe ODE system \frac{dp}{dt}=Qp is what we call a chemical master equation (a \nKolmogorov's backward/forward equation). Q is a sparse asymmetric matrix,     \nwhose off-diagonal entries are non-negative and row sum to zero. On each row, \nq_{ij}h gives the probability the system makes a transition from current state\ni to some other state j, in small time interval h. By \"state\", we mean a      \npossible combination of number of molecules in each chemical species. Now, h  \nis small enough so that only one reaction happens.  In this way q_{ij} is     \nnonzero only if there exists a chemical reaction that connects state i and j, \ni.e. j=i+s_k, s_k's are constant state vectors that correspond to every       \nreaction.  Say we have M reactions, then there are at most M+1 nonzero        \nentries on each row of Q.  On the other hand, the number of possible          \ncombination of molecules is huge, which means the dimension of Q is huge.     \nThe linear system we want to solve is (I - Q/lambda)x=b, and we have          \nto solve it several times. (Here lambda is a constant).  Problem.A is the Q   \nmatrix.  This is a small test problem; the largest has dimension 10^8.        \nIt has the nonzero pattern of a 201-by-201 mesh, minus 300 entries on the     \n+1 and -1 diagonal.                                                           \n
1855`Watson`Baumann`112211`112211`748331`yes`112211`2`2`12300`symmetric`0%`real`unsymmetric`no`no`L. Watson and J. Zhang`T. Davis`2007`2D/3D problem`\nThe ODE system \frac{dp}{dt}=Qp is what we call a chemical master equation (a \nKolmogorov's backward/forward equation). Q is a sparse asymmetric matrix,     \nwhose off-diagonal entries are non-negative and row sum to zero. On each row, \nq_{ij}h gives the probability the system makes a transition from current state\ni to some other state j, in small time interval h. By \"state\", we mean a      \npossible combination of number of molecules in each chemical species. Now, h  \nis small enough so that only one reaction happens.  In this way q_{ij} is     \nnonzero only if there exists a chemical reaction that connects state i and j, \ni.e. j=i+s_k, s_k's are constant state vectors that correspond to every       \nreaction.  Say we have M reactions, then there are at most M+1 nonzero        \nentries on each row of Q.  On the other hand, the number of possible          \ncombination of molecules is huge, which means the dimension of Q is huge.     \nThe linear system we want to solve is (I - Q/lambda)x=b, and we have          \nto solve it several times. (Here lambda is a constant).  Problem.A is the Q   \nmatrix.  This is a medium test problem; the largest has dimension 10^8.       \nIt has the nonzero pattern of a 11-by-101-by-101 mesh.                        \n
1856`Sinclair`3Dspectralwave`680943`680943`30290827`yes`680943`1`1`3359762`symmetric`symmetric`complex`Hermitian`yes`no`C. Sinclair`T. Davis`2007`materials problem`\nThe A matrix is produced using 3-D spectral-element elastic wave modelling in\nthe frequency domain. The medium is homogeneous and isotropic with elastic   \ncoefficients: c11 = 6.30,  c44 = 1.00 The B matrix represents a real         \ny-directed source, placed approximately in the centre.  The model size in    \nelements is 20x20x20. Each element is 1m x1m x 1m. Each element is a 4x4x4   \nGauss-Lobbato-Legendre mesh, so the height, width and depth of the system is \n61 nodes. There are 3 unknown components at each node - the x, y and z       \ndisplacements. The A matrix therefore has dimension 680943 x 680943, where   \n((20 x 4) - (20 - 1))^3 * 3 = 680943. The problem domain is earth sciences.  \nNote that A is complex and b is sparse and real (b has a single nonzero).    \n                                                                             \nThe A matrix was provided with a nonzero imaginary part, but was otherwise   \ncomplex Hermitian.  To save space in the Matrix Market and Rutherford/Boeing \nformats, the A matrix here has had this imaginary diagonal removed.  The     \nshift can be found in the aux.shift auxiliary matrix.  To reproduce the      \noriginal A matrix, use A = Problem.A + Problem.aux.shift ;                   \n
1857`Sinclair`3Dspectralwave2`292008`292008`12935272`yes`292008`1`1`1387472`symmetric`symmetric`complex`Hermitian`yes`no`C. Sinclair`T. Davis`2007`materials problem`\nThe A matrix is produced using 3-D spectral-element elastic wave modelling in\nthe frequency domain.The medium is homogeneous and isotropic with elastic    \ncoefficients: c11 = 6.30, c44 = 1.00. The B matrix contains only one non-zero\nentry, representing a real y-directed source, placed approximately in the    \ncentre.  The model size in elements is 10x10x10. Each element is 1m x1m x 1m.\nEach element is a 4x4x4 Gauss-Lobbato-Legendre mesh, so the height, width and\ndepth of the system is 31 nodes. There are 3 unknown complex components at   \neach node - the x, y and z displacements. The A matrix therefore has         \ndimension 89373 x 89373.  ((10 x 4) - (10 - 1))^3 * 3 = 89373.  The solution \nwill consist of x-z planes.  Note that A is complex and b is sparse and real \n(b has a single nonzero).                                                    \n                                                                             \nThe A matrix was provided with a nonzero imaginary part, but was otherwise   \ncomplex Hermitian.  To save space in the Matrix Market and Rutherford/Boeing \nformats, the A matrix here has had this imaginary diagonal removed.  The     \nshift can be found in the aux.shift auxiliary matrix.  To reproduce the      \noriginal A matrix, use A = Problem.A + Problem.aux.shift ;                   \n
1858`QLi`crashbasis`160000`160000`1750416`yes`160000`1`1`0`55%`0%`real`unsymmetric`no`no`Q. Li and M. Ferris`T. Davis`2007`optimization problem`\nQLi/crashbasis and QLi/majorbasis have the same nonzero pattern.  However,\nUMFPACK 5.1 is much slower for majorbasis than for crashbasis, because of \nthe extensive number of denormal floating-point values that occur in      \nmajorbasis (they do not occur in crashbasis).                             \n
1859`QLi`majorbasis`160000`160000`1750416`yes`160000`1`1`0`55%`0%`real`unsymmetric`no`no`Q. Li and M. Ferris`T. Davis`2007`optimization problem`\nQLi/crashbasis and QLi/majorbasis have the same nonzero pattern.  However,\nUMFPACK 5.1 is much slower for majorbasis than for crashbasis, because of \nthe extensive number of denormal floating-point values that occur in      \nmajorbasis (they do not occur in crashbasis).                             \n
1860`Springer`ESOC`327062`37830`6019939`no`37349`74`482`0`0%`0%`real`rectangular`no`no`T. Springer and F. Dilssner`T. Davis`2007`least squares problem`
1861`Koutsovasilis`F2`71505`71505`5294285`yes`71505`1`1`0`symmetric`symmetric`real`symmetric`yes`no`P. Koutsovasilis`T. Davis`2007`structural problem`\nStiffness matrix from an AUDI engine piston rod.  This matrix is an ill-     \ncondition symmetric indefinite matrix.  In MATLAB 7.4, the matrix is         \nfactorized three times in x=A\b.  Inside backslash, CHOLMOD is tried first   \nsince the matrix is symmetric and all diagonal entries are positive.  CHOLMOD\nfails since the matrix is indefinite.  Next, UMFPACK is used with default    \npivot tolerances which maintain sparsity at the (rare) expense of a slight   \ndecrease in accuracy.  This succeeds, but the result is flagged as           \npotentially inaccurate because the condition estimate is high.  UMFPACK is   \nthen used again with more conservative tolerances (but more fill-in).        \n
1862`Szczerba`Ill_Stokes`20896`20896`191368`yes`20896`1`1`0`99%`33%`real`unsymmetric`no`no`D. Szczerba`T. Davis`2007`computational fluid dynamics problem`\nThe matrix comes from a global formulation of the Stokes problem posed  \ndirectly (without pressure correction) on an unstructured tet mesh.  It \nincludes momentum equations (3 quadrants) and continuity equation (last \nquadrant).  Unknowns are organized as : vx, vy, vz, p. The last quadrant\ndoes not contain diagonal entries of course (continuity eq. does not    \ncontain pressure) and is the reason bicgstab and related methods do not \nwork.  Does not invert nicely with umfpack (strong oscillations in the  \n4th quadrant of the solution). LSQR produces better results (smaller    \noscillations) but takes ages. Dominik Szczerba, Ph.D. Computer Vision   \nLab, ETH. CH-8092 Zurich. http://www.vision.ee.ethz.ch/~domi            \n
1863`Rajat`Raj1`263743`263743`1300261`yes`263743`169`3`2203`100%`58%`real`unsymmetric`no`no`Raj`T. Davis`2007`circuit simulation problem`\nHigh fill-in with KLU, because the matrix is nearly singular and lots of \npartial pivoting occurs.  If the pattern of A+A' is considered to be the \nnonzero pattern of a symmetric positive definite matrix, then nnz(L) has \nonly 3728967 nonzeros using p=amd(A) and chol(A(p,p)), where A excludes\nthe explicit zeros in Problem.Zeros.  The flop count for the Cholesky    \nfactorization is only 340.9 million.  With a pivot tolerance of 2.2e-16, \nKLU Version 1.0 constructs and LU factorization with about 31 million    \nnonzeros, even though it uses AMD for the diagonal blocks of the BTF for \nwhich the expected nnz(L) is only 3.705 million (for the Cholesky factor-\nization of the large diagonal block).  The BTF form has little impact on \nthe factorization.                                                       \n
1864`Muite`Chebyshev1`261`261`2319`yes`261`1`1`0`50%`0%`real`unsymmetric`no`no`B. Muite`T. Davis`2007`structural problem`\nChebyshev integration matrix from Benson Muite, Oxford.  Details of the  \nmatrices can be found in a preprint at http://www.maths.ox.ac.uk/~muite  \nentitled \"A comparison of Chebyshev methods for solving fourth-order     \nsemilinear initial boundary value problems,\" June 2007.   These matrices \nare very ill-conditioned, partly because of the dense rows which are hard\nto scale when coupled with the rest of the matrix.                       \n
1865`Muite`Chebyshev2`2053`2053`18447`yes`2053`1`1`0`50%`0%`real`unsymmetric`no`no`B. Muite`T. Davis`2007`structural problem`\nChebyshev integration matrix from Benson Muite, Oxford.  Details of the  \nmatrices can be found in a preprint at http://www.maths.ox.ac.uk/~muite  \nentitled \"A comparison of Chebyshev methods for solving fourth-order     \nsemilinear initial boundary value problems,\" June 2007.   These matrices \nare very ill-conditioned, partly because of the dense rows which are hard\nto scale when coupled with the rest of the matrix.                       \n
1866`Muite`Chebyshev3`4101`4101`36879`yes`4101`1`1`0`50%`0%`real`unsymmetric`no`no`B. Muite`T. Davis`2007`structural problem`\nChebyshev integration matrix from Benson Muite, Oxford.  Details of the  \nmatrices can be found in a preprint at http://www.maths.ox.ac.uk/~muite  \nentitled \"A comparison of Chebyshev methods for solving fourth-order     \nsemilinear initial boundary value problems,\" June 2007.   These matrices \nare very ill-conditioned, partly because of the dense rows which are hard\nto scale when coupled with the rest of the matrix.                       \n
1867`Muite`Chebyshev4`68121`68121`5377761`yes`68121`1`1`0`30%`0%`real`unsymmetric`no`no`B. Muite`T. Davis`2007`structural problem`\nChebyshev integration matrix from Benson Muite, Oxford.  Details of the  \nmatrices can be found in a preprint at http://www.maths.ox.ac.uk/~muite  \nentitled \"A comparison of Chebyshev methods for solving fourth-order     \nsemilinear initial boundary value problems,\" June 2007.   These matrices \nare very ill-conditioned, partly because of the dense rows which are hard\nto scale when coupled with the rest of the matrix.                       \n
1868`Quaglino`viscoplastic1`4326`4326`61166`yes`4326`1`1`0`74%`0%`real`unsymmetric`no`no`A. Quaglino`T. Davis`2007`materials problem`\nThe matrix is in the form [A11 A12 ; A21 A22] where A11 and A22 are diagonal. \nOriginally, the matrices in this set were poorly scaled, but this was resolved\nby a scale factor of the form [A11 A12*e ; A21/e A4] where the scalar e is    \nof magnitude 1e2 but can be 1e6 or 1e7 for a stiff material.  The Problem.A   \nmatrix is the properly scaled problem.  The Problem.aux.C{1:7} matrices have  \nbeen \"unscaled\" with a factor e = 10.^(-(1:7)), to give a sequence of matrices\nthat are well scaled to poorly scaled, and thus well conditioned (C{1}) to    \npoorly conditioned (C{7}).  This mimics the original poorly scaled and ill-   \nconditioned problem, and may be of interest for those developing algorithms   \nfor automatic scaling.  From a FEM discretization of a viscoplastic collision \nproblem, Alessio Quaglino.                                                    \n
1869`Quaglino`viscoplastic2`32769`32769`381326`yes`32769`1`1`0`57%`0%`real`unsymmetric`no`no`A. Quaglino`T. Davis`2007`materials problem`\nThe matrix is in the form [A11 A12 ; A21 A22] where A11 and A22 are diagonal. \nOriginally, the matrices in this set were poorly scaled, but this was resolved\nby a scale factor of the form [A11 A12*e ; A21/e A4] where the scalar e is    \nof magnitude 1e2 but can be 1e6 or 1e7 for a stiff material.  The Problem.A   \nmatrix is the properly scaled problem.  The Problem.aux.C{1:7} matrices have  \nbeen \"unscaled\" with a factor e = 10.^(-(1:7)), to give a sequence of matrices\nthat are well scaled to poorly scaled, and thus well conditioned (C{1}) to    \npoorly conditioned (C{7}).  This mimics the original poorly scaled and ill-   \nconditioned problem, and may be of interest for those developing algorithms   \nfor automatic scaling.  From a FEM discretization of a viscoplastic collision \nproblem, Alessio Quaglino.                                                    \n
1870`YCheng`psse0`26722`11028`102432`yes`11028`1`1`0`0%`0%`real`rectangular`no`no`Y. Cheng`T. Davis`2007`power network problem`\nPower system state simulation matrix from Yunzhi Cheng, UT Arlington.\nIn MATLAB, the solution to x=A\b is desired, but this can be slow in \nMATLAB 7.3 because of the speed of sparse QR as compared to sparse   \nCholesky.  Using x=(A'*A)\(A'*b) is faster, but of course yields     \nslightly less accurate (but still acceptable) results.  Note that an \ninitial guess to the solution is provided, for use by an iterative   \nmethod.  However, sparse Cholesky with an AMD ordering is very fast  \nfor this matrix and thus iterative methods are unlikely to be        \ncompetitive.  In MATLAB 7.3 on a 3.2 Ghz Pentium 4 desktop,          \nx=(A'*A)\(A'*b) takes 0.07 seconds.                                  \n
1871`YCheng`psse1`14318`11028`57376`yes`11028`1722`1`0`0%`0%`real`rectangular`no`no`Y. Cheng`T. Davis`2007`power network problem`\nPower system state simulation matrix from Yunzhi Cheng, UT Arlington.\nIn MATLAB, the solution to x=A\b is desired, but this can be slow in \nMATLAB 7.3 because of the speed of sparse QR as compared to sparse   \nCholesky.  Using x=(A'*A)\(A'*b) is faster, but of course yields     \nslightly less accurate (but still acceptable) results.  Note that an \ninitial guess to the solution is provided, for use by an iterative   \nmethod.  However, sparse Cholesky with an AMD ordering is very fast  \nfor this matrix and thus iterative methods are unlikely to be        \ncompetitive.  In MATLAB 7.3 on a 3.2 Ghz Pentium 4 desktop,          \nx=(A'*A)\(A'*b) takes 0.05 seconds.                                  \n
1872`YCheng`psse2`28634`11028`115262`yes`11028`1`1`0`0%`0%`real`rectangular`no`no`Y. Cheng`T. Davis`2007`power network problem`\nPower system state simulation matrix from Yunzhi Cheng, UT Arlington.\nIn MATLAB, the solution to x=A\b is desired, but this can be slow in \nMATLAB 7.3 because of the speed of sparse QR as compared to sparse   \nCholesky.  Using x=(A'*A)\(A'*b) is faster, but of course yields     \nslightly less accurate (but still acceptable) results.  Note that an \ninitial guess to the solution is provided, for use by an iterative   \nmethod.  However, sparse Cholesky with an AMD ordering is very fast  \nfor this matrix and thus iterative methods are unlikely to be        \ncompetitive.  In MATLAB 7.3 on a 3.2 Ghz Pentium 4 desktop,          \nx=(A'*A)\(A'*b) takes 0.07 seconds.                                  \n
1873`Dehghani`light_in_tissue`29282`29282`406084`yes`29282`1`1`0`symmetric`0%`complex`unsymmetric`no`no`H. Dehghani`T. Davis`2007`electromagnetics problem`\n% The problem is solving the fluence (PHI) of light in soft tissue using\n% a simplified 3rd spherical harmonic expansion (SPN3) of the Radiative \n% Transport Equation.  There are two coupled equations to solve:        \n% M1*phi1 = Q + (M2*phi2)                                   eq(1)       \n% (M4 - (M3*inv(M1)*M2))*phi2 = -2/3*Q + M3*inv(M1)*Q       eq(2)       \n% PHI = phi1 - (1/3).*phi2                                  eq(3)       \n                                                                        \nProblem = UFget ('Dehghani/light_in_tissue') ;                          \nA = Problem.A ;                   % get the problem                     \nQ = Problem.aux.Q ;                                                     \nk = size (A,1) / 2 ;                                                    \nM1 = A (1:k,1:k) ;                                                      \nM2 = A (1:k,k+1:end) ;                                                  \nM3 = A (k+1:end, 1:k) ;                                                 \nM4 = A (k+1:end, k+1:end) ;                                             \nelements = Problem.aux.elements ;                                       \nnodes = Problem.aux.nodes ;                                             \n                                                                        \nQ2 = (-(2/3).*Q) + (M3*(M1\Q)) ;  % create rhs for equation 2           \nQ2 = [sparse(k,1) ; Q2] ;                                               \nphi2 = A\Q2 ;                     % solve for phi2                      \nphi2 = phi2 (end/2+1:end,:) ;                                           \nQ1 = Q + M2*phi2 ;                % calculate rhs for equation 1        \nphi1 = M1\Q1;                     % solve for phi1                      \nPHI = phi1 - (1/3).*phi2;                                               \nfigure (1) ; clf                  % plot results                        \ntrisurf(elements, nodes(:,1), nodes(:,2), nodes(:,3), log(abs(PHI))) ;  \nshading interp ;                                                        \nview (2) ;                                                              \ncolorbar('horiz') ;                                                     \naxis equal ;                                                            \naxis off ;                                                              \ncolormap hot ;                                                          \n
1874`HVDC`hvdc1`24842`24842`158426`yes`24842`31`7`1555`98%`10%`real`unsymmetric`no`no`A. Wang`T. Davis`2007`power network problem`
1875`HVDC`hvdc2`189860`189860`1339638`yes`189860`69`67`7635`99%`6%`real`unsymmetric`no`no`A. Wang`T. Davis`2007`power network problem`
1876`Zaoui`kkt_power`2063494`2063494`12771361`yes`2063494`9733`9611`1841302`symmetric`symmetric`real`symmetric`no`no`F. Zaoui`T. Davis`2007`optimization problem`
1877`Rost`RFdevice`74104`74104`365580`yes`74104`114`1`0`0%`0%`complex`unsymmetric`no`no`J. Rost`T. Davis`2007`semiconductor device problem`\nNumerical Methods Laboratory, Politehnica Univ., Bucharest, Romania.   \nJohann Rost, et al.  RF semiconductors and electronic device simulation\nin the frequency domain.  UMFPACK (x=A\b in MATLAB) experiences high   \nfill-in for this matrix.  KLU is worse.                                \n
1878`Lee`fem_filter`74062`74062`1731206`yes`74062`1`1`0`symmetric`61%`complex`unsymmetric`no`no`S.-H. Lee`T. Davis`2008`electromagnetics problem`\nFrom the Univ of Illinois at Urbana-Champaign, Center for Computational \nElectromagnetics (development and application of the finite element     \nmethod for analyzing antennas, high-frequency circuits, high-speed      \ncircuits, and so on).  The governing equations are Maxwell's equations. \nThe matrix results from the finite-element discretization of a bandpass \nmicrowave filter at 500 MHz. The first-order vector element is employed.\nThe absorbing boundary condition is applied on the outer boundary of the\nstructure for emulating the open space.  The port boundary condition is \napplied on each port of the circuit for the truncating the computational\ndomain and exciting the circuit. Due to these boundary conditions, the  \nfinite-element system matrix is complex.                                \n
1879`Mancktelow`viscorocks`37762`37762`1133641`yes`37762`773`773`28603`symmetric`28%`real`unsymmetric`no`no`N. Mancktelow`T. Davis`2007`materials problem`
1880`Rudnyi`water_tank`60740`60740`2035281`yes`60740`2`2`0`97%`92%`real`unsymmetric`no`no`E. Rudnyi`T. Davis`2007`computational fluid dynamics problem`
1881`Rucci`Rucci1`1977885`109900`7791168`yes`109900`1`1`0`0%`0%`real`rectangular`no`no`A. Rucci`T. Davis`2007`least squares problem`
1882`McRae`ecology1`1000000`1000000`4996000`yes`1000000`1`1`0`symmetric`symmetric`real`symmetric`yes`no`B. McRae`T. Davis`2008`2D/3D problem`\nLandscape ecology problem, using electrical network theory to model \nanimal movement an gene flow.  The McRae/ecology1 matrix comes from \na 2D, 1000-by-1000 mesh (5 pt stencil).  It is an ill-conditioned   \nsymmetric indefinite matrix.  Source: Brad McRae, National Center   \nfor Ecological Analysis and Synthesis Santa Barbara, CA.            \n
1883`McRae`ecology2`999999`999999`4995991`yes`999999`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`B. McRae`T. Davis`2008`2D/3D problem`\nLandscape ecology problem, using electrical network theory to model \nanimal movement an gene flow.  The McRae/ecology2 matrix comes from \na 2D, 1000-by-1000 mesh (5 pt stencil).  It is a symmetric positive \ndefinite matrix.  Source: Brad McRae, National Center for Ecological\nAnalysis and Synthesis Santa Barbara, CA.                           \n
1884`NYPA`Maragal_1`32`14`234`yes`14`1`1`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) == size(A,2))\nrank: 10 sprank: 14 columns: 14                  \n
1885`NYPA`Maragal_2`555`350`4357`no`220`13`110`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) < size(A,2))\nrank: 171 sprank: 220 columns: 350              \n
1886`NYPA`Maragal_3`1690`860`18391`no`765`35`11`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) < size(A,2))\nrank: 613 sprank: 765 columns: 860              \n
1887`NYPA`Maragal_4`1964`1034`26719`no`995`23`8`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) < size(A,2))\nrank: 801 sprank: 995 columns: 1034             \n
1888`NYPA`Maragal_5`4654`3320`93091`no`2690`163`25`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) < size(A,2))\nrank: 2147 sprank: 2690 columns: 3320           \n
1889`NYPA`Maragal_6`21255`10152`537694`no`10052`89`13`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) < size(A,2))\nsprank: 10052 columns: 10152                    \n
1890`NYPA`Maragal_7`46845`26564`1200537`no`25866`1294`41`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`\nrank deficient (rank(A) < sprank(A) < size(A,2))\nsprank: 25866 columns: 26564                    \n
1891`Marini`eurqsa`7245`7245`46142`yes`7245`3`3`0`symmetric`symmetric`real`symmetric`no`no`T. Di Fonzo, M. Marini`T. Davis`2008`economic problem`\nEconomic statistics are often published in the form of time series, as a   \ncollection of observations sampled at equally-spaced time periods (months, \nquarters). Economic concepts behind such statistics are often linked by a  \nsystem of linear relationships, deriving from the economic theory. However,\nthese restrictions are rarely met by the original time series for various  \nreasons.  Then, data sets of real-world variables generally show           \ndiscrepancies with respect to prior restrictions on their values.  The     \nadjustment of a set of data in order to satisfy a number of accounting     \nrestrictions -and thus to remove any discrepancy -is generally known as    \nthe reconciliation problem.                                                \n                                                                           \nThe matrix comes from a real application composed of 183 quarterly time    \nseries observed over 28 quarters, which form the system of European        \nnational accounts by institutional sectors (EURQSA). Then, the number of   \nobservations to be reconciled is n = 28 x 183 = 5124. The variables are    \nconnected by a system of 30 linear relationships. Moreover, each quarterly \ntime series must be in line with the same variables observed yearly (due   \nto different compilation practices quarterly and annual estimates might    \ndiffer). The total number of constraints of the system is k = 2121. On     \nthe whole, matrix A has dimension 7245, with block (11) of dimension 5124.\n
1892`Castrillon`denormal`89400`89400`1156224`yes`89400`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`J. Castrillon`T. Davis`2008`counter-example problem`\nThe problem is x=(A+alpha*I)\b as alpha varies from 0 to 100.  However,\nas this occurs, performance suffers because of the many denormals that \nappear below the diagonal in L.                                        \n
1893`QLi`largebasis`440020`440020`5240084`yes`440020`1`1`320016`symmetric`0%`real`unsymmetric`no`no`Q. Li`T. Davis`2008`optimization problem`
1894`MathWorks`QRpivot`660`749`3808`yes`660`9`1`0`0%`0%`real`rectangular`no`no`P. Quillen`T. Davis`2008`counter-example problem`\nCounter-example problem from The MathWorks, Pat Quillen                 \n                                                                        \nThis matrix was obtained from a MATLAB user.  It illustrates the        \nlimitations inherent in computing a basic solution to an under-         \ndetermined system without the use of column pivoting.                   \n                                                                        \nWith column pivoting (which can only be done in MATLAB with full        \nmatrices) the problem is solved properly.                               \n                                                                        \nWhen finding the min 2-norm solution (ignoring fill-in):                \n                                                                        \n    [Q,R] = qr (A') ;                                                   \n    x = Q*(R'\b) ;                                                      \n                                                                        \na good solution is found.  To reduce fill-in:                           \n                                                                        \n    p = colamd (A') ;                                                   \n    [Q,R] = qr (A (p,:)') ;                                             \n    x = Q*(R'\b(p)) ;                                                   \n                                                                        \nwhich also finds a good solution.                                       \n                                                                        \nHowever, x=A\b computes a basic solution, using this algorithm:         \n                                                                        \n    q = colamd (A) ;                                                    \n    [Q,R] = qr (A (:,q)) ;                                              \n    x = R\(Q'*b) ;                                                      \n    x (q) = q ;                                                         \n                                                                        \nwhich finds an error with norm(A*x-b) of 1e-9 in MATLAB 7.6.            \n                                                                        \nWith random permutations, and determining the cond(R1) of the leading   \ntrianglar part (R is \"squeezed\" and the columns can be partitioned into \n[R1 R2] where R1 is square and upper triangular) leads to the following \nresults.                                                                \n                                                                        \nNote that the error is high when condest(R1) is high.  Note in          \nparticular the last trial.                                              \n                                                                        \nSo this clinches the question.  MATLAB's QR, and my new sparse QR, both \nuse a rank-detection method (by Heath) that does not do column pivoting,\nand which is known to fail for some problems - for which Grimes & Lewis'\nmethod will likely succeed.                                             \n                                                                        \nThe advantage of my QR is that I now always return R as upper           \ntrapezoidal, so if the user is concerned, he/she can easily check       \ncondest(R(:,1:m)) if m < n.                                             \n                                                                        \n    err 7.71e-07 condest R1 2.18e+12                                    \n    err 1.25e-09 condest R1 9.82e+08                                    \n    err 2.47e-09 condest R1 2.46e+11                                    \n    err 4.00e-09 condest R1 4.03e+09                                    \n    err 9.88e-10 condest R1 4.73e+09                                    \n    err 2.25e-08 condest R1 5.34e+09                                    \n    err 2.00e-08 condest R1 1.04e+09                                    \n    err 1.09e-09 condest R1 6.83e+08                                    \n    err 6.18e-08 condest R1 8.13e+10                                    \n    err 3.13e-10 condest R1 4.23e+09                                    \n    err 6.64e-10 condest R1 2.46e+10                                    \n    err 5.76e-09 condest R1 4.31e+09                                    \n    err 7.61e-07 condest R1 5.08e+10                                    \n    err 2.27e-09 condest R1 4.94e+09                                    \n    err 3.99e-10 condest R1 2.80e+09                                    \n    err 1.37e-09 condest R1 3.13e+09                                    \n    err 6.93e-05 condest R1 1.84e+14                                    \n    err 1.35e-08 condest R1 7.18e+09                                    \n    err 1.09e-08 condest R1 1.79e+11                                    \n    err 1.81e-09 condest R1 2.99e+08                                    \n    err 1.55e-01 condest R1 2.45e+18                                    \n                                                                        \nIn summary, this is a \"feature\" not a \"bug\".  If you want a reliable    \nsolution to an underdetermined system, find the min 2norm solution      \nvia a QR factorization of A'.                                           \n
1895`Luong`photogrammetry`1388`390`11816`yes`390`1`1`0`0%`0%`real`rectangular`no`no`B. Luong`T. Davis`2008`computer graphics/vision problem`\nPhotogrammetry problem from Bruno Luong, FOGALE nanotech, France.     \nThe problem of interest is:                                           \n    [U S V]=svd(full(A),0);                                           \n    s=diag(S);                                                        \nThe spectrum has two parts:                                           \n- the singular values s(1) to s(end-7) are 1.7486e-004 to 3.4655e-007 \n(ratio 504.57).                                                       \n- the singular values s(end-6) to s(end) is smaller than 2.9614e-012  \n(ratio > 5.9e7).                                                      \nSo in this problem, the following are considered:                     \nK = span<U(:,end-6:end) > is the kernel of A, and                     \nL = span<U(:,1:end-7) > = orthogonal(K) is isomorph to Im(A).         \n
1896`YZhou`circuit204`1020`1020`5883`yes`1020`157`114`0`44%`37%`real`unsymmetric`no`no`Y. Zhou`T. Davis`2008`circuit simulation problem`\nblock size 204*204\n
1897`CEMW`t2em`921632`921632`4590832`yes`921632`4333`4333`0`100%`100%`integer`unsymmetric`no`no`D. Isaak`T. Davis`2008`electromagnetics problem`
1898`CEMW`tmt_unsym`917825`917825`4584801`yes`917825`1`1`0`symmetric`0%`real`unsymmetric`no`no`D. Isaak`T. Davis`2008`electromagnetics problem`
1899`CEMW`tmt_sym`726713`726713`5080961`yes`726713`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`D. Isaak`T. Davis`2008`electromagnetics problem`
1900`CEMW`vfem`93476`93476`1434636`yes`93476`1`1`0`symmetric`82%`complex`unsymmetric`no`no`D. Isaak`T. Davis`2008`electromagnetics problem`
1901`Schenk`nlpkkt80`1062400`1062400`28192672`yes`1062400`1`1`512000`symmetric`symmetric`real`symmetric`no`no`O. Schenk, A. Waechter, M. Weiser`T. Davis`2008`optimization problem`\nSymmetric indefinite KKT matrices, O. Schenk, Univ. of Basel,         \nSwitzerland                                                           \nNonlinear programming problems for a 3D PDE-constrained optimization  \nproblem with boundary control as a function of the discretization     \nparameter N using 2nd-order finite difference approximations.         \n                                                                      \nO. Schenk, A. W\"achter, and M. Weiser, Inertia Revealing             \nPreconditioning For Large-Scale Nonconvex Constrained Optimization,   \nTechnical Report, Unversity of Basel, 2008, submitted.                \n                                                                      \nAbstract: Fast nonlinear programming methods following the            \nall-at-once approach usually employ Newton's method for solving       \nlinearized Karush-Kuhn-Tucker (KKT) systems. In nonconvex problems,   \nthe Newton direction is only guaranteed to be a descent direction if  \nthe Hessian of the Lagrange function is positive definite on the      \nnullspace of the active constraints, otherwise some modifications to  \nNewton's method are necessary. This condition can be verified using   \nthe signs of the KKT's eigenvalues (inertia), which are usually       \navailable from direct solvers for the arising linear saddle point     \nproblems. Iterative solvers are mandatory for very large-scale        \nproblems, but in general do not provide the inertia. Here we present  \na preconditioner based on a multilevel incomplete LBL^T               \nfactorization, from which an approximation of the inertia can be      \nobtained. The suitability of the heuristics for application in        \noptimization methods is verified on an interior point method applied  \nto the CUTE and COPS test problems, on large-scale 3D PDE-constrained \noptimal control problems, as well as 3D PDE-constrained optimization  \nin biomedical cancer hyperthermia treatment planning.  The efficiency \nof the preconditioner is demonstrated on convex and nonconvex         \nproblems with 1503 state variables and 1502 control variables, both   \nsubject to bound constraints.                                         \n
1902`Schenk`nlpkkt120`3542400`3542400`95117792`yes`3542400`1`1`1728000`symmetric`symmetric`real`symmetric`no`no`O. Schenk, A. Waechter, M. Weiser`T. Davis`2008`optimization problem`\nSymmetric indefinite KKT matrices, O. Schenk, Univ. of Basel,         \nSwitzerland                                                           \nNonlinear programming problems for a 3D PDE-constrained optimization  \nproblem with boundary control as a function of the discretization     \nparameter N using 2nd-order finite difference approximations.         \n                                                                      \nO. Schenk, A. W\"achter, and M. Weiser, Inertia Revealing             \nPreconditioning For Large-Scale Nonconvex Constrained Optimization,   \nTechnical Report, Unversity of Basel, 2008, submitted.                \n                                                                      \nAbstract: Fast nonlinear programming methods following the            \nall-at-once approach usually employ Newton's method for solving       \nlinearized Karush-Kuhn-Tucker (KKT) systems. In nonconvex problems,   \nthe Newton direction is only guaranteed to be a descent direction if  \nthe Hessian of the Lagrange function is positive definite on the      \nnullspace of the active constraints, otherwise some modifications to  \nNewton's method are necessary. This condition can be verified using   \nthe signs of the KKT's eigenvalues (inertia), which are usually       \navailable from direct solvers for the arising linear saddle point     \nproblems. Iterative solvers are mandatory for very large-scale        \nproblems, but in general do not provide the inertia. Here we present  \na preconditioner based on a multilevel incomplete LBL^T               \nfactorization, from which an approximation of the inertia can be      \nobtained. The suitability of the heuristics for application in        \noptimization methods is verified on an interior point method applied  \nto the CUTE and COPS test problems, on large-scale 3D PDE-constrained \noptimal control problems, as well as 3D PDE-constrained optimization  \nin biomedical cancer hyperthermia treatment planning.  The efficiency \nof the preconditioner is demonstrated on convex and nonconvex         \nproblems with 1503 state variables and 1502 control variables, both   \nsubject to bound constraints.                                         \n
1903`Schenk`nlpkkt160`8345600`8345600`225422112`yes`8345600`1`1`4096000`symmetric`symmetric`real`symmetric`no`no`O. Schenk, A. Waechter, M. Weiser`T. Davis`2008`optimization problem`\nSymmetric indefinite KKT matrices, O. Schenk, Univ. of Basel,         \nSwitzerland                                                           \nNonlinear programming problems for a 3D PDE-constrained optimization  \nproblem with boundary control as a function of the discretization     \nparameter N using 2nd-order finite difference approximations.         \n                                                                      \nO. Schenk, A. W\"achter, and M. Weiser, Inertia Revealing             \nPreconditioning For Large-Scale Nonconvex Constrained Optimization,   \nTechnical Report, Unversity of Basel, 2008, submitted.                \n                                                                      \nAbstract: Fast nonlinear programming methods following the            \nall-at-once approach usually employ Newton's method for solving       \nlinearized Karush-Kuhn-Tucker (KKT) systems. In nonconvex problems,   \nthe Newton direction is only guaranteed to be a descent direction if  \nthe Hessian of the Lagrange function is positive definite on the      \nnullspace of the active constraints, otherwise some modifications to  \nNewton's method are necessary. This condition can be verified using   \nthe signs of the KKT's eigenvalues (inertia), which are usually       \navailable from direct solvers for the arising linear saddle point     \nproblems. Iterative solvers are mandatory for very large-scale        \nproblems, but in general do not provide the inertia. Here we present  \na preconditioner based on a multilevel incomplete LBL^T               \nfactorization, from which an approximation of the inertia can be      \nobtained. The suitability of the heuristics for application in        \noptimization methods is verified on an interior point method applied  \nto the CUTE and COPS test problems, on large-scale 3D PDE-constrained \noptimal control problems, as well as 3D PDE-constrained optimization  \nin biomedical cancer hyperthermia treatment planning.  The efficiency \nof the preconditioner is demonstrated on convex and nonconvex         \nproblems with 1503 state variables and 1502 control variables, both   \nsubject to bound constraints.                                         \n
1904`Schenk`nlpkkt200`16240000`16240000`440225632`yes`16240000`1`1`8000000`symmetric`symmetric`real`symmetric`no`no`O. Schenk, A. Waechter, M. Weiser`T. Davis`2008`optimization problem`\nSymmetric indefinite KKT matrices, O. Schenk, Univ. of Basel,         \nSwitzerland                                                           \nNonlinear programming problems for a 3D PDE-constrained optimization  \nproblem with boundary control as a function of the discretization     \nparameter N using 2nd-order finite difference approximations.         \n                                                                      \nO. Schenk, A. W\"achter, and M. Weiser, Inertia Revealing             \nPreconditioning For Large-Scale Nonconvex Constrained Optimization,   \nTechnical Report, Unversity of Basel, 2008, submitted.                \n                                                                      \nAbstract: Fast nonlinear programming methods following the            \nall-at-once approach usually employ Newton's method for solving       \nlinearized Karush-Kuhn-Tucker (KKT) systems. In nonconvex problems,   \nthe Newton direction is only guaranteed to be a descent direction if  \nthe Hessian of the Lagrange function is positive definite on the      \nnullspace of the active constraints, otherwise some modifications to  \nNewton's method are necessary. This condition can be verified using   \nthe signs of the KKT's eigenvalues (inertia), which are usually       \navailable from direct solvers for the arising linear saddle point     \nproblems. Iterative solvers are mandatory for very large-scale        \nproblems, but in general do not provide the inertia. Here we present  \na preconditioner based on a multilevel incomplete LBL^T               \nfactorization, from which an approximation of the inertia can be      \nobtained. The suitability of the heuristics for application in        \noptimization methods is verified on an interior point method applied  \nto the CUTE and COPS test problems, on large-scale 3D PDE-constrained \noptimal control problems, as well as 3D PDE-constrained optimization  \nin biomedical cancer hyperthermia treatment planning.  The efficiency \nof the preconditioner is demonstrated on convex and nonconvex         \nproblems with 1503 state variables and 1502 control variables, both   \nsubject to bound constraints.                                         \n
1905`Schenk`nlpkkt240`27993600`27993600`760648352`yes`27993600`1`1`13824000`symmetric`symmetric`real`symmetric`no`no`O. Schenk, A. Waechter, M. Weiser`T. Davis`2008`optimization problem`\nSymmetric indefinite KKT matrices, O. Schenk, Univ. of Basel,         \nSwitzerland                                                           \nNonlinear programming problems for a 3D PDE-constrained optimization  \nproblem with boundary control as a function of the discretization     \nparameter N using 2nd-order finite difference approximations.         \n                                                                      \nO. Schenk, A. W\"achter, and M. Weiser, Inertia Revealing             \nPreconditioning For Large-Scale Nonconvex Constrained Optimization,   \nTechnical Report, Unversity of Basel, 2008, submitted.                \n                                                                      \nAbstract: Fast nonlinear programming methods following the            \nall-at-once approach usually employ Newton's method for solving       \nlinearized Karush-Kuhn-Tucker (KKT) systems. In nonconvex problems,   \nthe Newton direction is only guaranteed to be a descent direction if  \nthe Hessian of the Lagrange function is positive definite on the      \nnullspace of the active constraints, otherwise some modifications to  \nNewton's method are necessary. This condition can be verified using   \nthe signs of the KKT's eigenvalues (inertia), which are usually       \navailable from direct solvers for the arising linear saddle point     \nproblems. Iterative solvers are mandatory for very large-scale        \nproblems, but in general do not provide the inertia. Here we present  \na preconditioner based on a multilevel incomplete LBL^T               \nfactorization, from which an approximation of the inertia can be      \nobtained. The suitability of the heuristics for application in        \noptimization methods is verified on an interior point method applied  \nto the CUTE and COPS test problems, on large-scale 3D PDE-constrained \noptimal control problems, as well as 3D PDE-constrained optimization  \nin biomedical cancer hyperthermia treatment planning.  The efficiency \nof the preconditioner is demonstrated on convex and nonconvex         \nproblems with 1503 state variables and 1502 control variables, both   \nsubject to bound constraints.                                         \n
1906`TKK`s4dkt3m2`90449`90449`3753461`yes`90449`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1907`TKK`g3rmt3m3`5357`5357`207695`yes`5357`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1908`TKK`t520`5563`5563`286341`yes`5563`1`1`0`symmetric`symmetric`integer`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1909`TKK`smt`25710`25710`3749582`yes`25710`1`1`3602`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki      \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html    \n                                                                       \nSurface mount transistor, 1704 reduced triquadratic elem, therm stress.\nThis is a stiffness matrix from a thermal stress analysis of           \na surface mounted transistor.  Due to symmetry only one half of        \nthe model is discretized in 1704 standard reduced triquadratic elements\n(20 node serendipity).  There are 5 different materials.               \nThe stiffness matrix is integrated by 3x3x3 Gaussian quadrature.       \nSeparate load vector file is also available.                           \nFigure of the FE model can be seen in a separate description,          \nor downloaded as a postscript file from the contributors www-pages.    \nContributor:                                                           \nReijo Kouhia, Helsinki University of Technology,                       \n               Laboratory of Structural Mechanics                      \n               PO Box 2100, 02015 HUT, Finland                         \n e-mail: reijo.kouhia@hut.fi                                           \n http://www.hut.fi/~kouhia                                             \n
1910`TKK`engine`143571`143571`4706073`yes`143571`1`1`0`symmetric`symmetric`integer`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1911`TKK`plbuckle`1282`1282`30644`yes`1282`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1912`TKK`cbuckle`13681`13681`676515`yes`13681`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1913`TKK`cyl6`13681`13681`714241`yes`13681`1`1`0`symmetric`symmetric`integer`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1914`TKK`tube1`21498`21498`897056`yes`21498`1`1`0`symmetric`symmetric`binary`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1915`TKK`tube2`21498`21498`897056`yes`21498`1`1`0`symmetric`symmetric`integer`symmetric`yes`no`R. Kouhia`T. Davis`2008`structural problem`\nMatrix problems from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1916`TKK`t2d_q4`9801`9801`87025`yes`9801`1`1`0`symmetric`69%`real`unsymmetric`no`no`R. Kouhia`T. Davis`2008`structural problem sequence`\nMatrix sequence from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1917`TKK`t2d_q9`9801`9801`87025`yes`9801`1`1`0`symmetric`69%`real`unsymmetric`no`no`R. Kouhia`T. Davis`2008`structural problem sequence`\nMatrix sequence from Reijo Kouhia, Structural Mechanics, Helsinki  \nUniversity of Technology.   http://users.tkk.fi/~kouhia/sparse.html\n
1918`Luong`photogrammetry2`4472`936`37056`yes`936`1`1`0`0%`0%`real`rectangular`no`no`B. Luong`T. Davis`2008`computer graphics/vision problem`\nPhotogrammetry problem from Bruno Luong, FOGALE nanotech, France.\nThis problem is nearly rank-deficient.                           \n
1919`Um`2cubes_sphere`101492`101492`1647264`yes`101492`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`E. Um`T. Davis`2008`electromagnetics problem`\nA matrix from Evan Um, Geophysics, Stanford.  Studying finite-element  \ntime domain solvers for electromagnetic diffusion equations. The 3-D   \ncomputational domain consists of 88213 tetrahedral elements.  The     \ncomputational domain consists of the two parts.  First, there are two  \n300m x 300m x 150m boxes where a fine mesh is used.  Second, the two   \nboxes are enclosed by a large sphere whose radius is 10 km.  An element\ngrowth factor is used to increase the mesh size gradually inside the   \nsphere.  This is because absorbing boundary conditions are not very    \ngood choices for these problems.  The finite element technique is      \nedge-based rather than node-based.  Therefore, the unknowns are        \namplitudes of electromagnetic fields on an edge of each element.       \n
1920`JGD_BIBD`bibd_9_3`36`84`252`yes`36`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.9.3.sms                           \n
1921`JGD_BIBD`bibd_9_5`36`126`1260`yes`36`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.9.5.sms                           \n
1922`JGD_BIBD`bibd_11_5`55`462`4620`yes`55`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.11.5.sms                          \n
1923`JGD_BIBD`bibd_12_4`66`495`2970`yes`66`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.12.4.sms                          \n
1924`JGD_BIBD`bibd_12_5`66`792`7920`yes`66`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_12_5_66x792                       \n
1925`JGD_BIBD`bibd_13_6`78`1716`25740`yes`78`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_13_6_78x1716                      \n
1926`JGD_BIBD`bibd_14_7`91`3432`72072`yes`91`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_14_7_91x3432.sms                  \n
1927`JGD_BIBD`bibd_15_3`105`455`1365`yes`105`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.15.3.sms                          \n
1928`JGD_BIBD`bibd_15_7`105`6435`135135`yes`105`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_15_7_105x6435.sms                 \n
1929`JGD_BIBD`bibd_16_8`120`12870`360360`yes`120`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_16_8_120x12870.sms                \n
1930`JGD_BIBD`bibd_17_3`136`680`2040`yes`136`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.17.3.sms                          \n
1931`JGD_BIBD`bibd_17_4b`136`2380`14280`yes`136`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_17_4_136x2380.sms                 \n
1932`JGD_BIBD`bibd_17_4`136`2380`14280`yes`136`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd.17.4.sms                          \n
1933`JGD_BIBD`bibd_17_8`136`24310`680680`yes`136`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_17_8_136x24310.sms                \n
1934`JGD_BIBD`bibd_18_9`153`48620`1750320`yes`153`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_18_9_153x48620.sms                \n
1935`JGD_BIBD`bibd_19_9`171`92378`3325608`yes`171`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_19_9_171x92378.sms                \n
1936`JGD_BIBD`bibd_20_10`190`184756`8314020`yes`190`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_20_10_190x184756.sms              \n
1937`JGD_BIBD`bibd_22_8`231`319770`8953560`yes`231`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/BIBD_22_8_231x319770                   \n
1938`JGD_BIBD`bibd_49_3`1176`18424`55272`yes`1176`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_49_3_1176x18424.sms               \n
1939`JGD_BIBD`bibd_81_2`3240`3240`3240`yes`3240`3240`3240`0`symmetric`symmetric`binary`symmetric`yes`yes`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_81_2_3240x3240.sms                \n
1940`JGD_BIBD`bibd_81_3`3240`85320`255960`yes`3240`1`1`0`0%`0%`binary`rectangular`no`no`M. Giesbrecht`J.-G. Dumas`2008`combinatorial problem`\nBalanced Incomplete Block Design from Mark Giesbrecht, Univ. of Waterloo\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nFilename in JGD collection: BIBD/bibd_81_3_3240x85320.sms               \n
1941`JGD_CAG`CAG_mat1916`1916`1916`195985`yes`1916`31`31`0`30%`21%`integer`unsymmetric`no`no`M. Monagan`J.-G. Dumas`2008`combinatorial problem`\nCAG matrix set from Michael Monagan, Simon Fraser Univ., Canada        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,           \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html              \n                                                                       \nStrongly Connected Graph Components and Computing                      \nCharacteristic Polynomials of Integer Matrices in Maple,               \nSimon Lo, Michael Monagan, Allan Wittkopf                              \n{sclo,mmonagan,wittkopf} at cecm.sfu.ca                                \nCentre for Experimental and Constructive Mathematics,                  \nDepartment of Mathematics, Simon Fraser University,                    \nBurnaby, B.C., V5A 1S6, Canada.                                        \n                                                                       \nabstract:                                                              \nLet A be an n x n matrix of integers. We present details of our Maple  \nimplementation of a simple modular method for computing the            \ncharacteristic polynomial of A.  We consider several different         \nrepresentations for the computation modulo primes, in particular, the  \nuse of double precision floats.  The algorithm used in Maple releases  \n7-10 is the Berkowitz algorithm. We present some timings comparing the \ntwo algorithms on a sequence of matrices arising from an application in\ncombinatorics of Jocelyn Quaintance. These matrices have a hidden block\nstructure. Once identified, we can further reduce the computing time   \ndramatically.  This work has been incorporated into Maple 11's         \nLinearAlgebra package.                                                 \n                                                                       \nhttp://www.cecm.sfu.ca/~monaganm/papers/CP8.pdf                        \n                                                                       \nFilename in JGD collection: CAG/mat1916.sms                            \n
1942`JGD_CAG`CAG_mat364`364`364`13585`yes`364`12`12`0`42%`28%`integer`unsymmetric`no`no`M. Monagan`J.-G. Dumas`2008`combinatorial problem`\nCAG matrix set from Michael Monagan, Simon Fraser Univ., Canada        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,           \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html              \n                                                                       \nStrongly Connected Graph Components and Computing                      \nCharacteristic Polynomials of Integer Matrices in Maple,               \nSimon Lo, Michael Monagan, Allan Wittkopf                              \n{sclo,mmonagan,wittkopf} at cecm.sfu.ca                                \nCentre for Experimental and Constructive Mathematics,                  \nDepartment of Mathematics, Simon Fraser University,                    \nBurnaby, B.C., V5A 1S6, Canada.                                        \n                                                                       \nabstract:                                                              \nLet A be an n x n matrix of integers. We present details of our Maple  \nimplementation of a simple modular method for computing the            \ncharacteristic polynomial of A.  We consider several different         \nrepresentations for the computation modulo primes, in particular, the  \nuse of double precision floats.  The algorithm used in Maple releases  \n7-10 is the Berkowitz algorithm. We present some timings comparing the \ntwo algorithms on a sequence of matrices arising from an application in\ncombinatorics of Jocelyn Quaintance. These matrices have a hidden block\nstructure. Once identified, we can further reduce the computing time   \ndramatically.  This work has been incorporated into Maple 11's         \nLinearAlgebra package.                                                 \n                                                                       \nhttp://www.cecm.sfu.ca/~monaganm/papers/CP8.pdf                        \n                                                                       \nFilename in JGD collection: CAG/mat364.sms                             \n
1943`JGD_CAG`CAG_mat72`72`72`1012`yes`72`6`6`0`56%`33%`integer`unsymmetric`no`no`M. Monagan`J.-G. Dumas`2008`combinatorial problem`\nCAG matrix set from Michael Monagan, Simon Fraser Univ., Canada        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,           \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html              \n                                                                       \nStrongly Connected Graph Components and Computing                      \nCharacteristic Polynomials of Integer Matrices in Maple,               \nSimon Lo, Michael Monagan, Allan Wittkopf                              \n{sclo,mmonagan,wittkopf} at cecm.sfu.ca                                \nCentre for Experimental and Constructive Mathematics,                  \nDepartment of Mathematics, Simon Fraser University,                    \nBurnaby, B.C., V5A 1S6, Canada.                                        \n                                                                       \nabstract:                                                              \nLet A be an n x n matrix of integers. We present details of our Maple  \nimplementation of a simple modular method for computing the            \ncharacteristic polynomial of A.  We consider several different         \nrepresentations for the computation modulo primes, in particular, the  \nuse of double precision floats.  The algorithm used in Maple releases  \n7-10 is the Berkowitz algorithm. We present some timings comparing the \ntwo algorithms on a sequence of matrices arising from an application in\ncombinatorics of Jocelyn Quaintance. These matrices have a hidden block\nstructure. Once identified, we can further reduce the computing time   \ndramatically.  This work has been incorporated into Maple 11's         \nLinearAlgebra package.                                                 \n                                                                       \nhttp://www.cecm.sfu.ca/~monaganm/papers/CP8.pdf                        \n                                                                       \nFilename in JGD collection: CAG/mat72.sms                              \n
1944`JGD_Forest`TF10`99`107`622`yes`99`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF10.txt2                \n
1945`JGD_Forest`TF11`216`236`1607`yes`216`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF11.txt2                \n
1946`JGD_Forest`TF12`488`552`4231`yes`488`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF12.txt2                \n
1947`JGD_Forest`TF13`1121`1302`11185`yes`1121`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF13.txt2                \n
1948`JGD_Forest`TF14`2644`3160`29862`yes`2644`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF14.txt2                \n
1949`JGD_Forest`TF15`6334`7742`80057`yes`6334`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF15.txt2                \n
1950`JGD_Forest`TF16`15437`19321`216173`yes`15437`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF16.txt2                \n
1951`JGD_Forest`TF17`38132`48630`586218`yes`38132`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF17.txt2                \n
1952`JGD_Forest`TF18`95368`123867`1597545`yes`95368`1`1`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF18.txt2                \n
1953`JGD_Forest`TF19`241029`317955`4370721`yes`241029`1`1`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nForests and Trees from Nicolas Thiery                       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nTF10 :  rank =    99 ,      0.0263529 s, Gauss: 0.00382595  \nTF11 :  rank =   216 ,      0.136469  s, Gauss: 0.0256469   \nTF12 :  rank =   488 ,      0.83511   s, Gauss: 0.295295    \nTF13 :  rank =  1121 ,      6.06873   s, Gauss: 4.97585     \nTF14 :  rank =  2644 ,     36.9781    s, Gauss: 81.5788     \nTF15 :  rank =  6334 ,    229.029     s, Gauss: 1309.48     \nTF16 :  rank = 15437 ,   1442.08      s, Gauss: 36000       \nTF17 :  rank = 38132 ,   9706.03      s, Gauss:             \n                                                            \nhttp://www.lapcs.univ-lyon1.fr/~nthiery                     \n                                                            \nFilename in JGD collection: Forest/TF19.txt2                \n
1954`JGD_Franz`Franz1`2240`768`5120`yes`768`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/big1sparse                             \n
1955`JGD_Franz`Franz2`4032`4480`21504`yes`4032`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/big2sparse                             \n
1956`JGD_Franz`Franz3`1280`2800`11520`yes`1280`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/1280x2800                              \n
1957`JGD_Franz`Franz4`6784`5252`46528`yes`5252`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/6784x5252                              \n
1958`JGD_Franz`Franz5`7382`2882`44056`yes`2882`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/7382x2882                              \n
1959`JGD_Franz`Franz6`7576`3016`45456`yes`3016`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/7576x3016                              \n
1960`JGD_Franz`Franz7`10164`1740`40424`yes`1740`1`6`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/10164x1740                             \n
1961`JGD_Franz`Franz8`16728`7176`100368`yes`7176`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/16728x7176                             \n
1962`JGD_Franz`Franz9`19588`4164`97508`yes`4164`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/19588x4164                             \n
1963`JGD_Franz`Franz10`19588`4164`97508`yes`4164`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/19588x4164bis                          \n
1964`JGD_Franz`Franz11`47104`30144`329728`yes`30144`1`1`0`0%`0%`integer`rectangular`no`no`M. Franz`J.-G. Dumas`2008`combinatorial problem`\nCohomology of various rings, from Matthias Franz, Univ. Konstanz, Germany\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nFilename in JGD collection: Franz/47104x30144bis                         \n
1965`JGD_G5`IG5-6`30`77`251`yes`30`1`35`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-6.txt2                                      \n
1966`JGD_G5`IG5-7`62`150`549`yes`62`1`76`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-7.txt2                                      \n
1967`JGD_G5`IG5-8`156`292`1711`yes`156`1`135`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-8.txt2                                      \n
1968`JGD_G5`IG5-9`342`540`4570`no`310`3`231`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-9.txt2                                      \n
1969`JGD_G5`IG5-10`652`976`10273`no`527`2`450`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-10.txt2                                     \n
1970`JGD_G5`IG5-11`1227`1692`22110`no`902`10`791`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-11.txt2                                     \n
1971`JGD_G5`IG5-12`2296`2875`46260`no`1578`2`1298`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-12.txt2                                     \n
1972`JGD_G5`IG5-13`3994`4731`91209`no`2532`3`2200`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-13.txt2                                     \n
1973`JGD_G5`IG5-14`6735`7621`173337`no`3906`11`3716`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-14.txt2                                     \n
1974`JGD_G5`IG5-15`11369`11987`323509`no`6146`3`5842`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-15.txt2                                     \n
1975`JGD_G5`IG5-16`18846`18485`588326`no`9519`2`8967`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-16.txt2                                     \n
1976`JGD_G5`IG5-17`30162`27944`1035008`no`14060`13`13885`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-17.txt2                                     \n
1977`JGD_G5`IG5-18`47894`41550`1790490`no`20818`2`20733`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nDecomposable subspaces at degree d of the invariant ring of G5, Nicolas Thiery.\nUniv. Paris Sud.                                                               \n                                                                               \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                      \n                                                                               \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra/                         \n                                                                               \nLinear Algebra for combinatorics                                               \n                                                                               \nAbstract:  Computations in algebraic combinatorics often boils down to         \nsparse linear algebra over some exact field. Such computations are             \nusually done in high level computer algebra systems like MuPAD or              \nMaple, which are reasonnably efficient when the ground field requires          \nsymbolic computations. However, when the ground field is, say Q  or            \nZ/pZ, the use of external specialized libraries becomes necessary. This        \ndocument, geared toward developpers of such libraries, present a brief         \noverview of my needs, which seems to be fairly typical in the                  \ncommunity.                                                                     \n                                                                               \nIG5-6: 30 x 77 : rang = 30  (Iteratif: 0.01 s, Gauss: 0.01 s)                  \nIG5-7: 62 x 150 : rang = 62  (Iteratif: 0.02 s, Gauss: 0.01 s)                 \nIG5-8: 156 x 292 : rang = 154  (Iteratif: 0.08 s, Gauss: 0.01 s)               \nIG5-9: 342 x 540 : rang = 308  (Iteratif: 0.46 s, Gauss: 0.02 s)               \nIG5-10: 652 x 976 : rang = 527  (Iteratif: 2.1 s, Gauss: 0.07 s)               \nIG5-11: 1227 x 1692 : rang = 902  (Iteratif: 7.5 s, Gauss: 0.22 s)             \nIG5-12: 2296 x 2875 : rang = 1578  (Iteratif: 26 s, Gauss: 0.93 s)             \nIG5-13: 3994 x 4731 : rang = 2532  (Iteratif: 80 s, Gauss: 3.35 s)             \nIG5-14: 6727 x 7621 : rang = 3906  (Iteratif: 244 s, Gauss: 10.06 s)           \nIG5-15: 11358 x 11987 : rang = 6146  (Iteratif: s, Gauss: 29.74 s)             \nIG5-16: 18485 x 18829 : rang = 9519  (Iteratif: s, Gauss: 621.97 s)            \nIG5-17: 27944 x 30131 : rang = 14060  (Iteratif: s, Gauss: 1973.8 s)           \n                                                                               \nFilename in JGD collection: G5/IG5-18.txt2                                     \n
1978`JGD_GL6`GL6_D_6`469`201`2526`no`199`2`7`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 6 mod GL_6(Z),\nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.            \n                                                                            \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                   \n                                                                            \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev   \n                                                                            \nD_6  Smith Invariants = [ 1:156 ]                                           \nD_7  Smith Invariants = [ 1:307 2:3 60:2 ]                                  \nD_8  Smith Invariants = [ 1:320 2:1 6:2 12:1 ]                              \nD_9  Smith Invariants = [ 1:217 2:3 ]                                       \nD_10 Smith Invariants = [ 1:120 ]                                           \n                                                                            \nFilename in JGD collection: GL6/D_6.sms                                     \n
1979`JGD_GL6`GL6_D_7`636`470`5378`no`467`2`3`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 6 mod GL_6(Z),\nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.            \n                                                                            \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                   \n                                                                            \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev   \n                                                                            \nD_6  Smith Invariants = [ 1:156 ]                                           \nD_7  Smith Invariants = [ 1:307 2:3 60:2 ]                                  \nD_8  Smith Invariants = [ 1:320 2:1 6:2 12:1 ]                              \nD_9  Smith Invariants = [ 1:217 2:3 ]                                       \nD_10 Smith Invariants = [ 1:120 ]                                           \n                                                                            \nFilename in JGD collection: GL6/D_7.sms                                     \n
1980`JGD_GL6`GL6_D_8`544`637`6153`no`542`2`8`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 6 mod GL_6(Z),\nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.            \n                                                                            \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                   \n                                                                            \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev   \n                                                                            \nD_6  Smith Invariants = [ 1:156 ]                                           \nD_7  Smith Invariants = [ 1:307 2:3 60:2 ]                                  \nD_8  Smith Invariants = [ 1:320 2:1 6:2 12:1 ]                              \nD_9  Smith Invariants = [ 1:217 2:3 ]                                       \nD_10 Smith Invariants = [ 1:120 ]                                           \n                                                                            \nFilename in JGD collection: GL6/D_8.sms                                     \n
1981`JGD_GL6`GL6_D_9`340`545`4349`no`337`3`5`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 6 mod GL_6(Z),\nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.            \n                                                                            \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                   \n                                                                            \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev   \n                                                                            \nD_6  Smith Invariants = [ 1:156 ]                                           \nD_7  Smith Invariants = [ 1:307 2:3 60:2 ]                                  \nD_8  Smith Invariants = [ 1:320 2:1 6:2 12:1 ]                              \nD_9  Smith Invariants = [ 1:217 2:3 ]                                       \nD_10 Smith Invariants = [ 1:120 ]                                           \n                                                                            \nFilename in JGD collection: GL6/D_9.sms                                     \n
1982`JGD_GL6`GL6_D_10`163`341`2053`no`158`2`5`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 6 mod GL_6(Z),\nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.            \n                                                                            \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                   \n                                                                            \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev   \n                                                                            \nD_6  Smith Invariants = [ 1:156 ]                                           \nD_7  Smith Invariants = [ 1:307 2:3 60:2 ]                                  \nD_8  Smith Invariants = [ 1:320 2:1 6:2 12:1 ]                              \nD_9  Smith Invariants = [ 1:217 2:3 ]                                       \nD_10 Smith Invariants = [ 1:120 ]                                           \n                                                                            \nFilename in JGD collection: GL6/D_10.sms                                    \n
1983`JGD_GL7d`GL7d10`1`60`8`yes`1`1`53`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d10.sms                                  \n
1984`JGD_GL7d`GL7d11`1019`60`1513`yes`60`1`238`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d11.sms                                  \n
1985`JGD_GL7d`GL7d12`8899`1019`37519`yes`1019`1`132`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d12.sms                                  \n
1986`JGD_GL7d`GL7d13`47271`8899`356232`no`8897`4`51`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d13.sms                                  \n
1987`JGD_GL7d`GL7d14`171375`47271`1831183`no`47266`4`11`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d14.sms                                  \n
1988`JGD_GL7d`GL7d15`460261`171375`6080381`no`171373`3`6`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d15.sms                                  \n
1989`JGD_GL7d`GL7d16`955128`460261`14488881`no`460091`3`4`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d16.sms                                  \n
1990`JGD_GL7d`GL7d17`1548650`955128`25978098`no`954861`3`4`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d17.sms                                  \n
1991`JGD_GL7d`GL7d18`1955309`1548650`35590540`no`1548499`4`7`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d18.sms                                  \n
1992`JGD_GL7d`GL7d19`1911130`1955309`37322725`yes`1911130`1`15`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d19.sms                                  \n
1993`JGD_GL7d`GL7d20`1437547`1911130`29893084`no`1437546`3`8`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d20.sms                                  \n
1994`JGD_GL7d`GL7d21`822922`1437547`18174775`no`822921`3`2`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d21.sms                                  \n
1995`JGD_GL7d`GL7d22`349443`822922`8251000`yes`349443`1`17`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d22.sms                                  \n
1996`JGD_GL7d`GL7d23`105054`349443`2695430`yes`105054`1`1`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d23.sms                                  \n
1997`JGD_GL7d`GL7d24`21074`105054`593892`yes`21074`1`6`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d24.sms                                  \n
1998`JGD_GL7d`GL7d25`2798`21074`81671`yes`2798`2`62`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d25.sms                                  \n
1999`JGD_GL7d`GL7d26`305`2798`7412`no`303`2`53`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms of rank 7 mod GL_7(Z)  \nequivalences, (related to the cohomology of GL_7(Z) and the K-theory of Z).  \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.             \n                                                                             \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                 \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                    \n                                                                             \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev    \n                                                                             \nmtx rank        n       m       ker         rank/min(n,m)   homology         \n10 1            60      1       59                                           \n11 59           1019    60      960         098333         0                \n12 960          8899    1019    7939        094210         1                \n13 7938         47271   8899    39333       089201         1                \n14 39332        171375  47271   132043      083205         0                \n15 132043       460261  171375  328218      077049         0                \n16 328218       955128  460261  626910      071311         0                \n17 626910       1548650 955128  921740      065636         0*               \n18 921740*      1955309 1548650 1033569*    060*           1/0*             \n19 103356(8/9)* 1911130 1955309 87756(2/1)* 054*           0/1*             \n20 877562       1437547 1911130 559985      061            0                \n21 559985       822922  1437547 262937      068048         0                \n22 262937       349443  822922  86506       075245         0                \n23 86505        105054  349443  18549       082343         1                \n24 18549        21074   105054  2525        088018         0                \n25 2525         2798    21074   273         090243         0                \n26 273          305     2798    32          089508         0                \n                                                                             \nfile    size              elements  rank    SF                               \nGL7d10  1 x 60            8         1       1 (1)                            \nGL7d11  60 x 1019         1513      59      1 (59)                           \nGL7d12  1019 x 8899       37519     960     1 (958), 2 (2)                   \nGL7d13  8899 x 47271      356232    7938    1 (7937), 2 (1)                  \nGL7d14  47271 x 171375    1831183   39332   1 (39300),2 (29),4 (3)           \nGL7d15  171375 x 460261   6080381   132043  1 (131993), 2*??? (46), 6*??? (4)\nGL7d16  955128 x 460261   14488881  328218                                   \nGL7d17  1548650 x 955128  25978098                                           \nGL7d18  1955309 x 1548650 35590540                                           \nGL7d19  1911130 x 1955309 37322725                                           \nGL7d20  1437547 x 1911130 29893084  877562                                   \nGL7d21  822922 x 1437547  18174775  559985                                   \nGL7d22  349443 x 822922   8251000   262937                                   \nGL7d23  105054 x 349443   2695430   86505   1 (86488), 2*??? (12), 6*??? (5) \nGL7d24  21074 x 105054    593892    18549   1 (18544),2 (4),4 (1)            \nGL7d25  21074 x 2798      81671     2525    1 (2507), 2 (18)                 \nGL7d26  2798 x 305        7412      273     1 (258), 2 (7), 6 (7), 36 (1)    \n                                                                             \nFilename in JGD collection: GL7d/GL7d26.sms                                  \n
2000`JGD_Groebner`c8_mat11`4562`5761`2462970`yes`4562`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/c8_mat11                \n
2001`JGD_Groebner`c8_mat11_I`4562`5761`2462970`yes`4562`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/c8_mat11.I              \n
2002`JGD_Groebner`f855_mat9`2456`2511`171214`yes`2456`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/f855_mat9               \n
2003`JGD_Groebner`f855_mat9_I`2456`2511`171214`yes`2456`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/f855_mat9.I             \n
2004`JGD_Groebner`HFE18_96_in`2372`4096`933343`no`2371`2`1726`0`0%`0%`binary`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/HFE18_96.in.sms         \n
2005`JGD_Groebner`rkat7_mat5`694`738`38114`yes`694`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/rkat7_mat5              \n
2006`JGD_Groebner`robot24c1_mat5`404`302`15118`yes`302`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/robot24c1_mat5          \n
2007`JGD_Groebner`robot24c1_mat5_J`302`404`15118`yes`302`1`1`0`0%`0%`integer`rectangular`no`no`J.-C. Faugeres`J.-G. Dumas`2008`combinatorial problem`\nGro\"bner basis from Jean-Charles Fauge`res,                 \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www-calfor.lip6.fr/~jcf/                             \n                                                            \nFilename in JGD collection: Grobner/robot24c1_mat5.J        \n
2008`JGD_Homology`ch3-3-b1`18`9`36`yes`9`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch3-3.b1.18x9.sms      \n
2009`JGD_Homology`ch3-3-b2`6`18`18`yes`6`1`6`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch3-3.b2.6x18.sms      \n
2010`JGD_Homology`ch4-4-b1`72`16`144`yes`16`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch4-4.b1.72x16.sms     \n
2011`JGD_Homology`ch4-4-b2`96`72`288`yes`72`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch4-4.b2.96x72.sms     \n
2012`JGD_Homology`ch4-4-b3`24`96`96`yes`24`1`24`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch4-4.b3.24x96.sms     \n
2013`JGD_Homology`ch5-5-b1`200`25`400`yes`25`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch5-5.b1.200x25.sms    \n
2014`JGD_Homology`ch5-5-b2`600`200`1800`yes`200`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch5-5.b2.600x200.sms   \n
2015`JGD_Homology`ch5-5-b3`600`600`2400`yes`600`1`1`0`2%`1%`integer`unsymmetric`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch5-5.b3.600x600.sms   \n
2016`JGD_Homology`ch5-5-b4`120`600`600`yes`120`1`120`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch5-5.b4.120x600.sms   \n
2017`JGD_Homology`ch6-6-b1`450`36`900`yes`36`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch6-6.b1.450x36.sms    \n
2018`JGD_Homology`ch6-6-b2`2400`450`7200`yes`450`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch6-6.b2.2400x450.sms  \n
2019`JGD_Homology`ch6-6-b3`5400`2400`21600`yes`2400`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch6-6.b3.5400x2400.sms \n
2020`JGD_Homology`ch6-6-b4`4320`5400`21600`yes`4320`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch6-6.b4.4320x5400.sms \n
2021`JGD_Homology`ch6-6-b5`720`4320`4320`yes`720`1`720`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch6-6.b5.720x4320.sms  \n
2022`JGD_Homology`ch7-6-b1`630`42`1260`yes`42`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-6.b1.630x42.sms    \n
2023`JGD_Homology`ch7-6-b2`4200`630`12600`yes`630`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-6.b2.4200x630.sms  \n
2024`JGD_Homology`ch7-6-b3`12600`4200`50400`yes`4200`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-6.b3.12600x4200.sms\n
2025`JGD_Homology`ch7-6-b4`15120`12600`75600`yes`12600`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.      \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection, \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html    \n                                                             \nhttp://www.mathematik.uni-marburg.de/~welker/                \n                                                             \nFilename in JGD collection: Homology/ch7-6.b4.15120x12600.sms\n
2026`JGD_Homology`ch7-6-b5`5040`15120`30240`yes`5040`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-6.b5.5040x15120.sms\n
2027`JGD_Homology`ch7-7-b1`882`49`1764`yes`49`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-7.b1.882x49.sms    \n
2028`JGD_Homology`ch7-7-b2`7350`882`22050`yes`882`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-7.b2.7350x882.sms  \n
2029`JGD_Homology`ch7-7-b5`35280`52920`211680`yes`35280`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.      \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection, \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html    \n                                                             \nhttp://www.mathematik.uni-marburg.de/~welker/                \n                                                             \nFilename in JGD collection: Homology/ch7-7.b5.35280x52920.sms\n
2030`JGD_Homology`ch7-8-b1`1176`56`2352`yes`56`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-8.b1.1176x56.sms   \n
2031`JGD_Homology`ch7-8-b2`11760`1176`35280`yes`1176`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-8.b2.11760x1176.sms\n
2032`JGD_Homology`ch7-8-b3`58800`11760`235200`yes`11760`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.      \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection, \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html    \n                                                             \nhttp://www.mathematik.uni-marburg.de/~welker/                \n                                                             \nFilename in JGD collection: Homology/ch7-8.b3.58800x11760.sms\n
2033`JGD_Homology`ch7-8-b4`141120`58800`705600`yes`58800`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/ch7-8.b4.141120x58800.sms\n
2034`JGD_Homology`ch7-8-b5`141120`141120`846720`yes`141120`1`1`0`0%`0%`integer`unsymmetric`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/ch7-8.b5.141120x141120.sms\n
2035`JGD_Homology`ch7-9-b1`1512`63`3024`yes`63`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-9.b1.1512x63.sms   \n
2036`JGD_Homology`ch7-9-b2`17640`1512`52920`yes`1512`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch7-9.b2.17640x1512.sms\n
2037`JGD_Homology`ch7-9-b3`105840`17640`423360`yes`17640`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/ch7-9.b3.105840x17640.sms\n
2038`JGD_Homology`ch7-9-b4`317520`105840`1587600`yes`105840`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/ch7-9.b4.317520x105840.sms\n
2039`JGD_Homology`ch7-9-b5`423360`317520`2540160`yes`317520`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/ch7-9.b5.423360x317520.sms\n
2040`JGD_Homology`ch8-8-b1`1568`64`3136`yes`64`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch8-8.b1.1568x64.sms   \n
2041`JGD_Homology`ch8-8-b2`18816`1568`56448`yes`1568`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/ch8-8.b2.18816x1568.sms\n
2042`JGD_Homology`ch8-8-b3`117600`18816`470400`yes`18816`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/ch8-8.b3.117600x18816.sms\n
2043`JGD_Homology`ch8-8-b4`376320`117600`1881600`yes`117600`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/ch8-8.b4.376320x117600.sms\n
2044`JGD_Homology`ch8-8-b5`564480`376320`3386880`yes`376320`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/ch8-8.b5.564480x376320.sms\n
2045`JGD_Homology`cis-n4c6-b1`210`21`420`yes`21`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/cis.n4c6.b1.210x21.sms \n
2046`JGD_Homology`cis-n4c6-b13`6300`25605`88200`yes`6300`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html       \n                                                                \nhttp://www.mathematik.uni-marburg.de/~welker/                   \n                                                                \nFilename in JGD collection: Homology/cis.n4c6.b13.6300x25605.sms\n
2047`JGD_Homology`cis-n4c6-b14`920`6300`13800`yes`920`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/cis.n4c6.b14.920x6300.sms\n
2048`JGD_Homology`cis-n4c6-b15`60`920`960`yes`60`1`20`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/cis.n4c6.b15.60x920.sms\n
2049`JGD_Homology`cis-n4c6-b2`1330`210`3990`yes`210`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.      \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection, \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html    \n                                                             \nhttp://www.mathematik.uni-marburg.de/~welker/                \n                                                             \nFilename in JGD collection: Homology/cis.n4c6.b2.1330x210.sms\n
2050`JGD_Homology`cis-n4c6-b3`5970`1330`23880`yes`1330`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/cis.n4c6.b3.5970x1330.sms\n
2051`JGD_Homology`cis-n4c6-b4`20058`5970`100290`yes`5970`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/cis.n4c6.b4.20058x5970.sms\n
2052`JGD_Homology`D6-6`120576`23740`146520`no`18660`2`75727`360`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/D6-6.sms               \nThe original file contains 720 duplicate entries,           \nand is the only file in the JGD collection with             \nduplicates.  The original triplets can be found             \nin Problem.aux.T, where the kth triplet is row k            \nof T: row index T(k,1), column index T(k,2), value T(k,3),  \nso that A = spconvert (Problem.aux.T)                       \n
2053`JGD_Homology`klein-b1`30`10`60`yes`10`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/klein.b1.30x10.sms     \n
2054`JGD_Homology`klein-b2`20`30`60`yes`20`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/klein.b2.20x30.sms     \n
2055`JGD_Homology`lutz30-23-b6`1716`3003`12012`yes`1716`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/lutz30-23.b6.1716x3003.sms\n
2056`JGD_Homology`m133-b3`200200`200200`800800`yes`200200`1`1`0`0%`0%`integer`unsymmetric`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/m133.b3.200200x200200.sms\n
2057`JGD_Homology`mk10-b1`630`45`1260`yes`45`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk10.b1.630x45.sms     \n
2058`JGD_Homology`mk10-b2`3150`630`9450`yes`630`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk10.b2.3150x630.sms   \n
2059`JGD_Homology`mk10-b3`4725`3150`18900`yes`3150`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk10.b3.4725x3150.sms  \n
2060`JGD_Homology`mk10-b4`945`4725`4725`yes`945`1`945`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk10.b4.945x4725.sms   \n
2061`JGD_Homology`mk11-b1`990`55`1980`yes`55`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk11.b1.990x55.sms     \n
2062`JGD_Homology`mk11-b2`6930`990`20790`yes`990`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk11.b2.6930x990.sms   \n
2063`JGD_Homology`mk11-b3`17325`6930`69300`yes`6930`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk11.b3.17325x6930.sms \n
2064`JGD_Homology`mk11-b4`10395`17325`51975`yes`10395`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk11.b4.10395x17325.sms\n
2065`JGD_Homology`mk11-b4b`9450`17325`47250`yes`9450`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk11.b4.9450x17325.sms \n
2066`JGD_Homology`mk12-b1`1485`66`2970`yes`66`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk12.b1.1485x66.sms    \n
2067`JGD_Homology`mk12-b2`13860`1485`41580`yes`1485`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk12.b2.13860x1485.sms \n
2068`JGD_Homology`mk12-b3`51975`13860`207900`yes`13860`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk12.b3.51975x13860.sms\n
2069`JGD_Homology`mk12-b4`62370`51975`311850`yes`51975`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk12.b4.62370x51975.sms\n
2070`JGD_Homology`mk12-b5`10395`62370`62370`yes`10395`1`10395`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk12.b5.10395x62370.sms\n
2071`JGD_Homology`mk13-b5`135135`270270`810810`yes`135135`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/mk13.b5.135135x270270.sms\n
2072`JGD_Homology`mk9-b1`378`36`756`yes`36`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk9.b1.378x36.sms      \n
2073`JGD_Homology`mk9-b2`1260`378`3780`yes`378`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk9.b2.1260x378.sms    \n
2074`JGD_Homology`mk9-b3`945`1260`3780`yes`945`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/mk9.b3.945x1260.sms    \n
2075`JGD_Homology`n2c6-b10`30`306`330`yes`30`1`6`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b10.30x306.sms    \n
2076`JGD_Homology`n2c6-b1`105`15`210`yes`15`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b1.105x15.sms     \n
2077`JGD_Homology`n2c6-b2`455`105`1365`yes`105`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b2.455x105.sms    \n
2078`JGD_Homology`n2c6-b3`1365`455`5460`yes`455`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b3.1365x455.sms   \n
2079`JGD_Homology`n2c6-b4`3003`1365`15015`yes`1365`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b4.3003x1365.sms  \n
2080`JGD_Homology`n2c6-b5`4945`3003`29670`yes`3003`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b5.4945x3003.sms  \n
2081`JGD_Homology`n2c6-b6`5715`4945`40005`yes`4945`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b6.5715x4945.sms  \n
2082`JGD_Homology`n2c6-b7`3990`5715`31920`yes`3990`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b7.3990x5715.sms  \n
2083`JGD_Homology`n2c6-b8`1470`3990`13230`yes`1470`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b8.1470x3990.sms  \n
2084`JGD_Homology`n2c6-b9`306`1470`3060`yes`306`1`66`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n2c6.b9.306x1470.sms   \n
2085`JGD_Homology`n3c4-b1`15`6`30`yes`6`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c4.b1.15x6.sms       \n
2086`JGD_Homology`n3c4-b2`20`15`60`yes`15`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c4.b2.20x15.sms      \n
2087`JGD_Homology`n3c4-b3`15`20`60`yes`15`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c4.b3.15x20.sms      \n
2088`JGD_Homology`n3c4-b4`6`15`30`yes`6`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c4.b4.6x15.sms       \n
2089`JGD_Homology`n3c5-b1`45`10`90`yes`10`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b1.45x10.sms      \n
2090`JGD_Homology`n3c5-b2`120`45`360`yes`45`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b2.120x45.sms     \n
2091`JGD_Homology`n3c5-b3`210`120`840`yes`120`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b3.210x120.sms    \n
2092`JGD_Homology`n3c5-b4`252`210`1260`yes`210`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b4.252x210.sms    \n
2093`JGD_Homology`n3c5-b5`210`252`1260`yes`210`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b5.210x252.sms    \n
2094`JGD_Homology`n3c5-b6`120`210`840`yes`120`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b6.120x210.sms    \n
2095`JGD_Homology`n3c5-b7`30`120`240`yes`30`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c5.b7.30x120.sms     \n
2096`JGD_Homology`n3c6-b10`675`2511`7425`yes`675`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b10.675x2511.sms  \n
2097`JGD_Homology`n3c6-b1`105`105`210`no`15`2`96`0`9%`8%`integer`unsymmetric`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b1.105x15.sms     \n
2098`JGD_Homology`n3c6-b11`60`675`720`yes`60`1`51`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b11.60x675.sms    \n
2099`JGD_Homology`n3c6-b2`455`105`1365`yes`105`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b2.455x105.sms    \n
2100`JGD_Homology`n3c6-b3`1365`455`5460`yes`455`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b3.1365x455.sms   \n
2101`JGD_Homology`n3c6-b4`3003`1365`15015`yes`1365`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b4.3003x1365.sms  \n
2102`JGD_Homology`n3c6-b5`5005`3003`30030`yes`3003`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b5.5005x3003.sms  \n
2103`JGD_Homology`n3c6-b6`6435`5005`45045`yes`5005`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b6.6435x5005.sms  \n
2104`JGD_Homology`n3c6-b7`6435`6435`51480`yes`6435`1`1`0`symmetric`53%`integer`unsymmetric`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b7.6435x6435.sms  \n
2105`JGD_Homology`n3c6-b8`4935`6435`44415`yes`4935`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b8.4935x6435.sms  \n
2106`JGD_Homology`n3c6-b9`2511`4935`25110`yes`2511`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n3c6.b9.2511x4935.sms  \n
2107`JGD_Homology`n4c5-b10`120`630`1320`yes`120`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b10.120x630.sms   \n
2108`JGD_Homology`n4c5-b1`105`15`210`yes`15`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b1.105x15.sms     \n
2109`JGD_Homology`n4c5-b11`10`120`120`yes`10`1`10`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b11.10x120.sms    \n
2110`JGD_Homology`n4c5-b2`455`105`1365`yes`105`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b2.455x105.sms    \n
2111`JGD_Homology`n4c5-b3`1350`455`5400`yes`455`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b3.1350x455.sms   \n
2112`JGD_Homology`n4c5-b4`2852`1350`14260`yes`1350`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b4.2852x1350.sms  \n
2113`JGD_Homology`n4c5-b5`4340`2852`26040`yes`2852`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b5.4340x2852.sms  \n
2114`JGD_Homology`n4c5-b6`4735`4340`33145`yes`4340`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b6.4735x4340.sms  \n
2115`JGD_Homology`n4c5-b7`3635`4735`29080`yes`3635`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b7.3635x4735.sms  \n
2116`JGD_Homology`n4c5-b8`1895`3635`17055`yes`1895`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b8.1895x3635.sms  \n
2117`JGD_Homology`n4c5-b9`630`1895`6300`yes`630`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c5.b9.630x1895.sms   \n
2118`JGD_Homology`n4c6-b10`132402`186558`1456422`yes`132402`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.        \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.mathematik.uni-marburg.de/~welker/                  \n                                                               \nFilename in JGD collection: Homology/n4c6.b10.132402x186558.sms\n
2119`JGD_Homology`n4c6-b11`69235`132402`830820`yes`69235`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/n4c6.b11.69235x132402.sms\n
2120`JGD_Homology`n4c6-b1`210`21`420`yes`21`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b1.210x21.sms     \n
2121`JGD_Homology`n4c6-b12`25605`69235`332865`yes`25605`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.      \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection, \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html    \n                                                             \nhttp://www.mathematik.uni-marburg.de/~welker/                \n                                                             \nFilename in JGD collection: Homology/n4c6.b12.25605x69235.sms\n
2122`JGD_Homology`n4c6-b13`6300`25605`88200`yes`6300`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b13.6300x25605.sms\n
2123`JGD_Homology`n4c6-b14`920`6300`13800`yes`920`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b14.920x6300.sms  \n
2124`JGD_Homology`n4c6-b15`60`920`960`yes`60`1`20`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b15.60x920.sms    \n
2125`JGD_Homology`n4c6-b2`1330`210`3990`yes`210`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b2.1330x210.sms   \n
2126`JGD_Homology`n4c6-b3`5970`1330`23880`yes`1330`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b3.5970x1330.sms  \n
2127`JGD_Homology`n4c6-b4`20058`5970`100290`yes`5970`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b4.20058x5970.sms \n
2128`JGD_Homology`n4c6-b5`51813`20058`310878`yes`20058`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.     \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,\nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html   \n                                                            \nhttp://www.mathematik.uni-marburg.de/~welker/               \n                                                            \nFilename in JGD collection: Homology/n4c6.b5.51813x20058.sms\n
2129`JGD_Homology`n4c6-b6`104115`51813`728805`yes`51813`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.      \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection, \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html    \n                                                             \nhttp://www.mathematik.uni-marburg.de/~welker/                \n                                                             \nFilename in JGD collection: Homology/n4c6.b6.104115x51813.sms\n
2130`JGD_Homology`n4c6-b7`163215`104115`1305720`yes`104115`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/n4c6.b7.163215x104115.sms\n
2131`JGD_Homology`n4c6-b8`198895`163215`1790055`yes`163215`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/n4c6.b8.198895x163215.sms\n
2132`JGD_Homology`n4c6-b9`186558`198895`1865580`yes`186558`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/n4c6.b9.186558x198895.sms\n
2133`JGD_Homology`shar_te2-b1`17160`286`34320`yes`286`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.       \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www.mathematik.uni-marburg.de/~welker/                 \n                                                              \nFilename in JGD collection: Homology/shar_te2.b1.17160x286.sms\n
2134`JGD_Homology`shar_te2-b2`200200`17160`600600`yes`17160`1`1`0`0%`0%`integer`rectangular`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,     \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html        \n                                                                 \nhttp://www.mathematik.uni-marburg.de/~welker/                    \n                                                                 \nFilename in JGD collection: Homology/shar_te2.b2.200200x17160.sms\n
2135`JGD_Homology`shar_te2-b3`200200`200200`800800`yes`200200`1`1`0`0%`0%`integer`unsymmetric`no`no`V. Welker`J.-G. Dumas`2008`combinatorial problem`\nSimplicial complexes from Homology from Volkmar Welker.           \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,      \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html         \n                                                                  \nhttp://www.mathematik.uni-marburg.de/~welker/                     \n                                                                  \nFilename in JGD collection: Homology/shar_te2.b3.200200x200200.sms\n
2136`QY`case39`40216`40216`1042160`yes`40216`2`2`0`symmetric`symmetric`real`symmetric`no`no`J. Quanyuan`T. Davis`2008`power network problem sequence`\nTransient stabilty constrained interior pt. optimal power flow, J. Quanyuan\nTwo problem sets from Dr. Jiang Quanyuan from Zhejiang University,         \nHangzhou, China, March, 2008, used in an electrical power system.          \nEach matrix A is solved sequentially with two right-hand-sides, b1 and     \nb2, one at a time.  In the UF collection, the sequence of all first        \nand second right-hand-sides is in Problem.aux.b2 and Problem.aux.b1.       \nThese matrices are symmetric indefinite (x=A\b uses MA57)                  \nNote that the last matrices in the sequence are ill-conditioned.           \n                                                                           \nTransient Stability Constrained Interior Point Optimal Power Flow Program  \n      Version 1.0 -- Developed by Dr. Jiang Quanyuan, March 2008           \n                                                                           \ncase39.m - TSOPF converges after 13 iterations                             \n object    = 2.696268E+04                                                  \n max_equ   = 5.684342E-14                                                  \n low_inequ = -1.110223E-16                                                 \n up_inequ  = None                                                          \n
2137`JGD_Kocay`Trec3`1`2`1`yes`1`2`2`0`0%`0%`binary`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec3.txt2                                    \n
2138`JGD_Kocay`Trec4`2`3`3`yes`2`3`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec4.txt2                                    \n
2139`JGD_Kocay`Trec5`3`7`12`yes`3`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec5.txt2                                    \n
2140`JGD_Kocay`Trec6`6`15`40`yes`6`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec6.txt2                                    \n
2141`JGD_Kocay`Trec7`11`36`147`yes`11`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec7.txt2                                    \n
2142`JGD_Kocay`Trec8`23`84`549`yes`23`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec8.txt2                                    \n
2143`JGD_Kocay`Trec9`47`201`2147`yes`47`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec9.txt2                                    \n
2144`JGD_Kocay`Trec10`106`478`8612`yes`106`1`4`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec10.txt2                                   \n
2145`JGD_Kocay`Trec11`235`1138`35705`yes`235`1`3`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec11.txt2                                   \n
2146`JGD_Kocay`Trec12`551`2726`151219`yes`551`1`3`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec12.txt2                                   \n
2147`JGD_Kocay`Trec13`1301`6561`654517`yes`1301`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec13.txt2                                   \n
2148`JGD_Kocay`Trec14`3159`15905`2872265`yes`3159`1`2`0`0%`0%`integer`rectangular`no`no`N. Thiery`J.-G. Dumas`2008`combinatorial problem`\nBrute force disjoint product matrices in tree algebra on n nodes, Nicolas Thiery\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,                    \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                       \n                                                                                \nhttp://www.lapcs.univ-lyon1.fr/~nthiery/LinearAlgebra                           \n                                                                                \nLinear algebra for combinatorics                                                \n                                                                                \nAbstract: Computations in algebraic combinatorics often boils down to           \nsparse linear algebra over some exact field. Such computations are              \nusually done in high level computer algebra systems like MuPAD or               \nMaple, which are reasonnably efficient when the ground field requires           \nsymbolic computations.  However, when the ground field is, say Q or             \nZ/pZ, the use of external specialized libraries becomes necessary. This         \ndocument, geared toward developpers of such libraries, present a brief          \noverview of my needs, which seems to be fairly typical in the                   \ncommunity.                                                                      \n                                                                                \nFilename in JGD collection: Kocay/Trec14.txt2                                   \n
2149`JGD_Margulies`cat_ears_2_1`85`85`254`no`82`15`1`0`3%`3%`binary`unsymmetric`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/cat_ears_2_1.sms                  \n
2150`JGD_Margulies`cat_ears_2_4`1009`2689`7982`yes`1009`2`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/cat_ears_2_4.sms                  \n
2151`JGD_Margulies`cat_ears_3_1`204`181`542`no`175`11`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/cat_ears_3_1.sms                  \n
2152`JGD_Margulies`cat_ears_3_4`5226`13271`39592`yes`5226`19`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/cat_ears_3_4.sms                  \n
2153`JGD_Margulies`cat_ears_4_1`377`313`938`no`304`14`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/cat_ears_4_1.sms                  \n
2154`JGD_Margulies`cat_ears_4_4`19020`44448`132888`yes`19020`81`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/cat_ears_4_4.sms                  \n
2155`JGD_Margulies`flower_4_1`121`129`386`yes`121`38`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_4_1.sms                    \n
2156`JGD_Margulies`flower_4_4`1837`5529`16466`yes`1837`2`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_4_4.sms                    \n
2157`JGD_Margulies`flower_5_1`211`201`602`no`191`13`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_5_1.sms                    \n
2158`JGD_Margulies`flower_5_4`5226`14721`43942`yes`5226`12`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_5_4.sms                    \n
2159`JGD_Margulies`flower_7_1`463`393`1178`no`379`17`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_7_1.sms                    \n
2160`JGD_Margulies`flower_7_4`27693`67593`202218`yes`27693`100`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_7_4.sms                    \n
2161`JGD_Margulies`flower_8_1`625`513`1538`no`497`19`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_8_1.sms                    \n
2162`JGD_Margulies`flower_8_4`55081`125361`375266`yes`55081`210`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/flower_8_4.sms                    \n
2163`JGD_Margulies`kneser_10_4_1`349651`330751`992252`no`323401`3`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/kneser_10_4_1.sms                 \n
2164`JGD_Margulies`kneser_6_2_1`601`676`2027`yes`601`182`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/kneser_6_2_1.sms                  \n
2165`JGD_Margulies`kneser_8_3_1`15737`15681`47042`no`14897`3`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/kneser_8_3_1.sms                  \n
2166`JGD_Margulies`wheel_3_1`21`25`74`yes`21`2`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/wheel_3_1.sms                     \n
2167`JGD_Margulies`wheel_4_1`36`41`122`yes`36`2`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/wheel_4_1.sms                     \n
2168`JGD_Margulies`wheel_5_1`57`61`182`yes`57`12`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/wheel_5_1.sms                     \n
2169`JGD_Margulies`wheel_601`902103`723605`2170814`no`723005`604`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/wheel_601.sms                     \n
2170`JGD_Margulies`wheel_6_1`83`85`254`no`80`9`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/wheel_6_1.sms                     \n
2171`JGD_Margulies`wheel_7_1`114`113`338`no`107`10`1`0`0%`0%`binary`rectangular`no`no`S. Margulies`J.-G. Dumas`2008`combinatorial problem`\nCombinatorial optimization as polynomial eqns, Susan Margulies, UC Davis\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,            \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html               \n                                                                        \nhttp://arxiv.org/abs/0706.0578                                          \n                                                                        \nExpressing Combinatorial Optimization Problems by Systems of Polynomial \nEquations and the Nullstellensatz                                       \n                                                                        \nAuthors: J.A. De Loera, J. Lee, Susan Margulies, S. Onn                 \n                                                                        \n(Submitted on 5 Jun 2007)                                               \n                                                                        \nAbstract: Systems of polynomial equations over the complex or real      \nnumbers can be used to model combinatorial problems. In this way, a     \ncombinatorial problem is feasible (e.g. a graph is 3-colorable,         \nhamiltonian, etc.) if and only if a related system of polynomial        \nequations has a solution. In the first part of this paper, we construct \nnew polynomial encodings for the problems of finding in a graph its     \nlongest cycle, the largest planar subgraph, the edge-chromatic number,  \nor the largest k-colorable subgraph.  For an infeasible polynomial      \nsystem, the (complex) Hilbert Nullstellensatz gives a certificate that  \nthe associated combinatorial problem is infeasible. Thus, unless P =    \nNP, there must exist an infinite sequence of infeasible instances of    \neach hard combinatorial problem for which the minimum degree of a       \nHilbert Nullstellensatz certificate of the associated polynomial system \ngrows.  We show that the minimum-degree of a Nullstellensatz            \ncertificate for the non-existence of a stable set of size greater than  \nthe stability number of the graph is the stability number of the graph. \nMoreover, such a certificate contains at least one term per stable set  \nof G. In contrast, for non-3- colorability, we found only graphs with   \nNullstellensatz certificates of degree four.                            \n                                                                        \nFilename in JGD collection: Margulies/wheel_7_1.sms                     \n
2172`JGD_Relat`rel3`12`5`18`no`3`2`9`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel3.mat                    \n
2173`JGD_Relat`rel4`66`12`104`no`10`2`41`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel4.mat                    \n
2174`JGD_Relat`rel5`340`35`656`no`33`2`171`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel5.mat                    \n
2175`JGD_Relat`rel6`2340`157`5101`no`155`2`1043`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel6.mat                    \n
2176`JGD_Relat`rel7`21924`1045`50636`no`1043`2`9157`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel7.mat                    \n
2177`JGD_Relat`rel8`345688`12347`821839`no`12345`2`139651`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel8.mat                    \n
2178`JGD_Relat`rel9`9888048`274669`23667183`no`274667`2`3966265`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/rel9.mat                    \n
2179`JGD_Relat`relat3`12`5`24`no`3`2`7`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat3.mat                  \n
2180`JGD_Relat`relat4`66`12`172`no`10`2`23`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat4.mat                  \n
2181`JGD_Relat`relat5`340`35`1058`no`33`2`67`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat5.mat                  \n
2182`JGD_Relat`relat6`2340`157`8108`no`155`2`280`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat6.mat                  \n
2183`JGD_Relat`relat7b`21924`1045`81355`no`1043`2`1427`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat7b.mat                 \n
2184`JGD_Relat`relat7`21924`1045`81355`no`1043`2`1427`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat7.mat                  \n
2185`JGD_Relat`relat8`345688`12347`1334038`no`12345`2`11329`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat8.mat                  \n
2186`JGD_Relat`relat9`12360060`549336`38955420`no`274667`2`2888498`0`0%`0%`integer`rectangular`no`no`F. Hiver`J.-G. Dumas`2008`combinatorial problem`\nRelations from Florent Hiver, Univ. Paris-Est Marne-La-Valle'e\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,  \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html     \n                                                              \nhttp://www-igm.univ-mlv.fr/~hivert/                           \n                                                              \n                                                              \nFilename in JGD collection: Relat/relat9.mat                  \n
2187`JGD_SL6`D_5`434`115`1832`no`114`3`6`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_5.sms                                  \n
2188`JGD_SL6`D_6`970`435`6491`no`433`2`6`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_6.sms                                  \n
2189`JGD_SL6`D_7`1270`971`12714`no`968`2`3`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_7.sms                                  \n
2190`JGD_SL6`D_8`1132`1271`14966`no`1126`3`12`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_8.sms                                  \n
2191`JGD_SL6`D_9`815`1133`12395`no`810`2`6`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_9.sms                                  \n
2192`JGD_SL6`D_10`460`816`7614`no`455`2`5`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_10.sms                                 \n
2193`JGD_SL6`D_11`169`461`2952`no`168`3`6`0`0%`0%`integer`rectangular`no`no`P. Elbaz-Vincent`J.-G. Dumas`2008`combinatorial problem`\nDifferentials of the Voronoi complex of perfect forms                    \nfrom Philippe Elbaz-Vincent, Institut Fourier, Grenoble, France.         \n                                                                         \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,             \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html                \n                                                                         \nhttp://www-fourier.ujf-grenoble.fr/-Informations-personnelles-.html?P=pev\n                                                                         \nD_5  Smith Invariants = [ 1:92 3:2 18:1 ]                                \nD_6  Smith Invariants = [ 1:338 2:1 ]                                    \nD_7  Smith Invariants = [ 1:621 2:5 6:1 60:2 ]                           \nD_8  Smith Invariants = [ 1:637 3:3 12:1 ]                               \nD_9  Smith Invariants = [ 1:491 ]                                        \nD_10 Smith Invariants = [ 1:318 2:3 4:2 ]                                \nD_11 Smith Invariants = [ 1:129 2:6 6:1 ]                                \n                                                                         \nFilename in JGD collection: SL6/D_11.sms                                 \n
2194`JGD_SPG`08blocks`300`300`592`yes`300`300`8`0`3%`0%`integer`unsymmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/08blocks.sms                        \n
2195`JGD_SPG`EX1`560`560`8736`yes`560`1`1`0`symmetric`symmetric`binary`symmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/EX1.sms                             \n
2196`JGD_SPG`EX2`560`560`8736`yes`560`1`1`0`symmetric`symmetric`binary`symmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/EX2.sms                             \n
2197`JGD_SPG`EX3`2600`2600`71760`yes`2600`1`1`0`symmetric`symmetric`binary`symmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/EX3.sms                             \n
2198`JGD_SPG`EX4`2600`2600`71760`yes`2600`1`1`0`symmetric`symmetric`binary`symmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/EX4.sms                             \n
2199`JGD_SPG`EX5`6545`6545`295680`yes`6545`1`1`0`symmetric`symmetric`binary`symmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/EX5.sms                             \n
2200`JGD_SPG`EX6`6545`6545`295680`yes`6545`1`1`0`symmetric`symmetric`binary`symmetric`no`no`G. Royle`J.-G. Dumas`2008`combinatorial problem`\nSymmetric powers of graphs from Gordon Royle, Univ Western Australia\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,        \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html           \n                                                                    \nhttp://www.csse.uwa.edu.au/~gordon/sympower.html                    \n                                                                    \nFilename in JGD collection: SPG/EX6.sms                             \n
2201`JGD_Taha`abtaha2`37932`331`137228`yes`331`1`1`0`0%`0%`integer`rectangular`no`no`A. Jarrah`J.-G. Dumas`2008`combinatorial problem`\nTaha matrix set from Abdul Salam Jarrah, New Mexico State Univ.\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.math.nmsu.edu/~ajarrah                              \n                                                               \nFilename in JGD collection: Taha/mat2_abtaha.sms               \n
2202`JGD_Taha`abtaha1`14596`209`51307`yes`209`1`1`0`0%`0%`integer`rectangular`no`no`A. Jarrah`J.-G. Dumas`2008`combinatorial problem`\nTaha matrix set from Abdul Salam Jarrah, New Mexico State Univ.\nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,   \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html      \n                                                               \nhttp://www.math.nmsu.edu/~ajarrah                              \n                                                               \nFilename in JGD collection: Taha/mat_abtaha.sms                \n
2203`JGD_Trefethen`Trefethen_20b`19`19`147`yes`19`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_20__19_minor.sms     \n
2204`JGD_Trefethen`Trefethen_20`20`20`158`yes`20`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_20.sms               \n
2205`JGD_Trefethen`Trefethen_150`150`150`2040`yes`150`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_150.sms              \n
2206`JGD_Trefethen`Trefethen_200b`199`199`2873`yes`199`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_200__199_minor.sms   \n
2207`JGD_Trefethen`Trefethen_200`200`200`2890`yes`200`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_200.sms              \n
2208`JGD_Trefethen`Trefethen_300`300`300`4678`yes`300`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_300.sms              \n
2209`JGD_Trefethen`Trefethen_500`500`500`8478`yes`500`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_500.sms              \n
2210`JGD_Trefethen`Trefethen_700`700`700`12654`yes`700`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_700.sms              \n
2211`JGD_Trefethen`Trefethen_2000`2000`2000`41906`yes`2000`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_2000.sms             \n
2212`JGD_Trefethen`Trefethen_20000b`19999`19999`554435`yes`19999`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.           \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,          \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html             \n                                                                      \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,    \nSIAM News, vol 35, no. 1.                                             \n                                                                      \n7. Let A be the 20000 x 20000 matrix whose entries are zero         \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the \nmain diagonal and the number 1 in all the positions A(i,j) with       \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?    \n                                                                      \nhttp://www.siam.org/news/news.php?id=388                              \n                                                                      \nFilename in JGD collection: Trefethen/trefethen_20000__19999_minor.sms\n
2213`JGD_Trefethen`Trefethen_20000`20000`20000`554466`yes`20000`1`1`0`symmetric`symmetric`integer`symmetric`yes`yes`N. Trefethen`J.-G. Dumas`2008`combinatorial problem`\nDiagonal matrices with primes, Nick Trefethen, Oxford Univ.          \nFrom Jean-Guillaume Dumas' Sparse Integer Matrix Collection,         \nhttp://ljk.imag.fr/membres/Jean-Guillaume.Dumas/simc.html            \n                                                                     \nProblem 7 of the Hundred-dollar, Hundred-digit Challenge Problems,   \nSIAM News, vol 35, no. 1.                                            \n                                                                     \n7. Let A be the 20000 x 20000 matrix whose entries are zero        \neverywhere except for the primes 2, 3, 5, 7, . . . , 224737 along the\nmain diagonal and the number 1 in all the positions A(i,j) with      \n|i-j| = 12,48, . . . ,16384.  What is the (11) entry of inv(A)?   \n                                                                     \nhttp://www.siam.org/news/news.php?id=388                             \n                                                                     \nFilename in JGD collection: Trefethen/trefethen_20000.sms            \n
2214`QY`case9`14454`14454`147972`yes`14454`2`2`0`symmetric`symmetric`real`symmetric`no`no`J. Quanyuan`T. Davis`2008`power network problem sequence`\nTransient stabilty constrained interior pt. optimal power flow, J. Quanyuan\nTwo problem sets from Dr. Jiang Quanyuan from Zhejiang University,         \nHangzhou, China, March, 2008, used in an electrical power system.          \nEach matrix A is solved sequentially with two right-hand-sides, b1 and     \nb2, one at a time.  In the UF collection, the sequence of all first        \nand second right-hand-sides is in Problem.aux.b2 and Problem.aux.b1.       \nThese matrices are symmetric indefinite (x=A\b uses MA57)                  \nNote that the last matrices in the sequence are ill-conditioned.           \n                                                                           \nTransient Stability Constrained Interior Point Optimal Power Flow Program  \n      Version 1.0 -- Developed by Dr. Jiang Quanyuan, March 2008           \n                                                                           \ncase9.m - TSOPF converges after 12 iterations                              \n object    = 3.945939E+03                                                  \n max_equ   = 3.287326E-11                                                  \n low_inequ = None                                                          \n up_inequ  = None                                                          \n
2215`FreeFieldTechnologies`mono_500Hz`169410`169410`5033796`yes`169410`2`2`2492`symmetric`82%`complex`unsymmetric`no`no`M. Gontier`T. Davis`2008`acoustics problem`\nFree Field Technologies, Mont-Saint Guibert, Belguim (http://www.fft.be)\n
2216`Freescale`Freescale1`3428755`3428755`17052626`yes`3428755`1061`1061`1867721`91%`39%`real`unsymmetric`no`no`K. Gullapalli`T. Davis`2008`circuit simulation problem`
2217`NYPA`Maragal_8`33212`75077`1308415`no`18456`1799`14353`0`0%`0%`real`rectangular`no`no`D. Maragal`T. Davis`2008`least squares problem`
2218`Bates`sls`1748122`62729`6804304`yes`62729`1`1`0`0%`0%`real`rectangular`no`no`D. Bates`T. Davis`2008`least squares problem`\nLarge least-squares problem from Doug Bates, Univ of Wisconsin-Madison\n                                                                      \nhttp://www.stat.wisc.edu/~bates                                       \n                                                                      \nThe data are 10 years of grade point scores at a large state          \nuniversity (not mine).  The covariates that are recorded with the     \nscores are the student id, the instructor id and the department.      \n                                                                      \nNumber of obs: 1685394, groups: id, 54711; instr, 7915; dept, 102     \n                                                                      \nEven though these scores are from different semesters and one of the  \nquestions of interest is whether grade inflation has taken place,     \ninitially I fit a simple model that has an effect for the student, an \neffect for the instructor and an effect for the department.  There is \nalso an overall average gradepoint.  The overall average is what we   \ncall a fixed effect. In computations terms this means it is estimated \nwithout a penalty. The other effects are what we call random effects. \nIn terms of parameters we estimate a variance for each group of random\neffects (student, instructor and department).  We assume that the     \nrandom effects come from a normal (or Gaussian) distribution, which   \nhas the effect of shrinking the estimates of the individual effects   \ntowards the origin.  If the variance of that distribution is large,   \nthere is little penalty and the estimates for each of the students or \neach of the instructors or each of the departments is close to the    \nleast squares estimate.  If the variance is small then they are much  \ncloser to zero.                                                       \n                                                                      \nOverall we will estimate 3 variances, 1 fixed-effect and 62728 = 54711\n+ 7915 + 102 random effects. The matrix we will decompose will be     \n62729 columns (the last column comes from the fixed-effect) and       \n1685394 + 62728 rows.  The 62728 rows come from the penalty part and  \nconsist of an identity matrix of size 62728 with a column of zeros    \nappended on the right.  The rows determined by the data (I think of   \nthese as being the top part of the matrix but it doesn't matter if    \nthey are on the top or the bottom) consist of 54711 columns of        \nindicators for the student followed by 7915 columns of indicators for \nthe instructor followed by 102 columns of indicators for the          \ndepartment followed by a column of 1's.  In general we will have      \ncolumns for random effects followed by columns for fixed effects.     \nHere the fixed-effects column is trivial but in general we may have   \nmore than 1 and they don't have to be as trivial as this.             \n                                                                      \nAt least as far as I have been able to analyze the computation, I can \nallow for permutations of the columns for the random effects but I    \ndon't want to mix up the columns for the random effects and the       \ncolumns for the fixed effects. I always want to keep the columns for  \nthe fixed effects as a block on the right. (Usually these columns are \ndense or close to it so it isn't a problem to force them to be on the \nright.) The reason is that I need the logarithm of the square of the  \ndeterminant of the triangular factor from the random effects columns  \nonly.                                                                 \n                                                                      \nDuring the optimization phase we fix values of the three variances,   \nupdate the numeric values in the matrix, decompose, calculate the     \ndeterminant of the leading part of the triangular factor, and evaluate\nthe penalized residual sum of squares.  The logarithm of the          \ndeterminant and the penalized residual sum of squares are combined to \ncreate a criterion called the profiled log-likelihood which is to be  \nmaximized                                                             \n                                                                      \nThe update operation changes the numerical values of the              \ndata-determined part according to three multipliers.  The first       \nmultiplier is applied to the first 54711 columns, the next multiplier \nis applied to the next 7915 columns and the last multiplier is applied\nto the next 102 columns.  The last column stays fixed.                \n                                                                      \nWe start from the factors for the student, instructor and department  \nthen generate the indicators to form Z.  The factors can be           \nrepresented as integers and the response is a grade point score       \n(allowed to be half integers).                                        \n
2219`TSOPF`TSOPF_RS_b2383`38120`38120`16171169`yes`38120`378`378`0`0%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2220`TSOPF`TSOPF_FS_b300`29214`29214`4400122`yes`29214`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2221`TSOPF`TSOPF_FS_b162_c1`10798`10798`608540`yes`10798`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2222`TSOPF`TSOPF_FS_b162_c3`30798`30798`1801300`yes`30798`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2223`TSOPF`TSOPF_FS_b162_c4`40798`40798`2398220`yes`40798`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2224`TSOPF`TSOPF_FS_b300_c1`29214`29214`4400122`yes`29214`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2225`TSOPF`TSOPF_FS_b300_c2`56814`56814`8767466`yes`56814`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2226`TSOPF`TSOPF_FS_b300_c3`84414`84414`13135930`yes`84414`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2227`TSOPF`TSOPF_FS_b39_c19`76216`76216`1977600`yes`76216`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2228`TSOPF`TSOPF_FS_b39_c30`120216`120216`3121160`yes`120216`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2229`TSOPF`TSOPF_FS_b39_c7`28216`28216`730080`yes`28216`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2230`TSOPF`TSOPF_FS_b9_c1`2454`2454`25032`yes`2454`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2231`TSOPF`TSOPF_FS_b9_c6`14454`14454`147972`yes`14454`2`2`0`symmetric`symmetric`real`symmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2232`TSOPF`TSOPF_RS_b162_c1`5374`5374`205399`yes`5374`126`126`0`3%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2233`TSOPF`TSOPF_RS_b162_c3`15374`15374`610299`yes`15374`326`326`0`3%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2234`TSOPF`TSOPF_RS_b162_c4`20374`20374`812749`yes`20374`426`426`0`3%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2235`TSOPF`TSOPF_RS_b2052_c1`25626`25626`6761100`yes`25626`262`262`0`0%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2236`TSOPF`TSOPF_RS_b2383_c1`38120`38120`16171169`yes`38120`378`378`0`0%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2237`TSOPF`TSOPF_RS_b300_c1`14538`14538`1474325`yes`14538`171`170`0`1%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2238`TSOPF`TSOPF_RS_b300_c2`28338`28338`2943887`yes`28338`271`270`0`1%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2239`TSOPF`TSOPF_RS_b300_c3`42138`42138`4413449`yes`42138`371`370`0`1%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2240`TSOPF`TSOPF_RS_b39_c19`38098`38098`684206`yes`38098`1911`1911`0`6%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2241`TSOPF`TSOPF_RS_b39_c30`60098`60098`1079986`yes`60098`3011`3011`0`6%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2242`TSOPF`TSOPF_RS_b39_c7`14098`14098`252446`yes`14098`711`711`0`6%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2243`TSOPF`TSOPF_RS_b678_c1`18696`18696`4396289`yes`18696`221`221`0`0%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2244`TSOPF`TSOPF_RS_b678_c2`35696`35696`8781949`yes`35696`271`271`0`0%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2245`TSOPF`TSOPF_RS_b9_c6`7224`7224`54082`yes`7224`1204`1204`0`15%`0%`real`unsymmetric`no`no`G. Geng`T. Davis`2009`power network problem`\nTransient stability-constrained optimal power flow (TSOPF) problems from     \nGuangchao Geng, Institute of Power System, College of Electrical Engineering,\nZhejiang University, Hangzhou, 310027, China.  (genggc AT gmail DOT com).    \nMatrices in the  Full-Space (FS) group are symmetric indefinite, and are best\nsolved with MA57.  Matrices in the the Reduced-Space (RS) group are best     \nsolved with KLU, which for these matrices can be 10 times faster than UMFPACK\nor SuperLU.                                                                  \n
2246`Lee`fem_hifreq_circuit`491100`491100`20239237`yes`491100`1`1`0`100%`50%`complex`unsymmetric`no`no`S.-H. Lee`T. Davis`2009`electromagnetics problem`
2247`Buss`connectus`512`394792`1127525`no`458`8`256`0`0%`0%`binary`rectangular`no`no`S. Buss`T. Davis`2009`undirected bipartite graph`\nThis is a matrix from Steven Buss, for a website recommendation system (to\nbe called www.connectious.com).  Each row of the matrix is a unique user. \nEachc olumn of the matrix is a web page.  A(i,j)=1 if user i has tagged   \nweb page j as favorable, and a 0 represents no opinion.  The data was     \nobtained from digg.com.  Note that the matrix A*A' contains one           \nconnected component of size 342, and 170 singletons (nodes with no edges) \nThis means that a group of 341 users share some interests, at least       \nindirectly, and that there are 171 other users that share no interests    \nat all with any other users (they have no pages in common with anyone).   \n
2248`Yoshiyasu`image_interp`240000`120000`711683`yes`120000`1`7516`0`0%`0%`real`rectangular`no`no`Y Yoshiyasu`T. Davis`2009`computer graphics/vision problem`\nThe problem is template-mesh deformation to match with silhouettes.  In this \nprocess, there are two kinds of linear systems to solve.  This system        \n(Yoshiyasu/image_interp) is a smooth vector field construction from images,  \nwhich is harmonic interpolation (minimizing laplacian: Lx=0) of intensity    \ngradient field p.  This can be solved by normal equation and cholesky        \nfactorization, x=(A1'*A1)/(A1'*b1), where A1=[L;C] and                       \nb1=[zeros(size(length(L),1);1);C*p]. C is a square diagonal matrix containing\nweights.  This is for a 400x300 image, so Ix=reshape(x,400300) must be done \nto get the vector field. After solving y direction for Iy, the result is     \nvisualized with quiver(Ix,Iy).   At each iteration the both C submatrix and  \nthe right-hand-side change but L remains unchanged.  [Note by T. Davis:      \nsince C is of high rank, update/downdate will not be effective, since it is  \nmeant for low-rank changes.]                                                 \n
2249`Yoshiyasu`mesh_deform`234023`9393`853829`yes`9393`1`1`0`0%`0%`real`rectangular`no`no`Y Yoshiyasu`T. Davis`2009`computer graphics/vision problem`\nThis problem one is template deformation using the vector field from the   \nYoshiyasu/image_interp problem, solved with v=(A2'*D*A2)/(A2'*D*b2), where \nD is a diagonal matrix containing weights.  Structures of A2 and b2 are a  \nlittle bit more complex than A1 and b1 (in the image_interp problem), but  \nthey are similar.  Both systems are not very time-consuming themselves, but\nthis process iterates more than 10 times for 10 views.  [Note by T. Davis: \nsince C is of high rank, update/downdate will not be effective, since it is\nmeant for low-rank changes.]                                               \n
2250`Priebel`130bit`584`575`6120`no`566`45`9`0`0%`0%`binary`rectangular`no`no`D. Priebel`T. Davis`2009`combinatorial problem`\nEach column in the matrix corresponds to a number in the factor base     \nless than some bound B.  Each row corresponds to a smooth number (able   \nto be completely factored over the factor base).  Each value in a row    \nbinary vector corresponds to the exponent of the factor base mod 2.      \nFor example:                                                             \n                                                                         \n    factor base: 2 7 23                                                  \n    smooth numbers: 46, 28, 322                                          \n    2^1       * 23^1 = 46                                                \n    2^2 * 7^1        = 28                                                \n    2^1 * 7^1 * 23^1 = 322                                               \n    Matrix:                                                              \n        101                                                              \n        010                                                              \n        111                                                              \n                                                                         \nA solution to the matrix is considered to be a set of rows which when    \ncombined in GF2 produce a null vector. Thus, if you multiply each of     \nthe smooth numbers which correspond to that particular set of rows you   \nwill get a number with only even exponents, making it a perfect          \nsquare. In the above example you can see that combining the 3 vectors    \nresults in a null vector and, indeed, it is a perfect square: 644^2.     \n                                                                         \nProblem.A: A GF(2) matrix constructed from the exponents of the          \nfactorization of the smooth numbers over the factor base. A solution of  \nthis matrix is a kernel (nullspace). Such a solution has a 1/2 chance of \nbeing a factorization of N.                                              \n                                                                         \nProblem.aux.factor_base: The factor base used. factor_base(j) corresponds\nto column j of the matrix. Note that a given column may or may not have  \nnonzero elements in the matrix.                                          \n                                                                         \nProblem.aux.smooth_number: The smooth numbers, smooth over the factor    \nbase.  smooth_number(i) corresponds to row i of the matrix.              \n                                                                         \nProblem.aux.solution: A sample solution to the matrix. Combine, in GF(2) \nthe rows with these indicies to produce a solution to the matrix with the\nadditional property that it factors N (a matrix solution only has 1/2    \nprobability of factoring N).                                             \n                                                                         \nProblem specific information:                                            \n                                                                         \nn = 787911249838484617926390474950774839909 (130-bits)                   \npasses primality test, n is composite, continuing...                     \n1) Initial bound: 10000, pi(10000) estimate: 1085,                       \n    largest found: 8707 (actual bound)                                   \n2) Number of quadratic residues estimate: 725, actual number found: 574  \n3) Modular square roots found: 1148(2x residues)                         \n4) Constructing smooth number list [sieving] (can take a while)...       \nSieving for: 584                                                         \n5. Constructing a matrix of size: 584x575                                \nMatrix solution found with: 261 combinations                             \nDivisor: 23850290715477455017 (probably prime)                           \nDivisor: 33035708421246870877 (probably prime)                           \n
2251`Priebel`145bit`1002`993`11315`no`964`119`28`0`0%`0%`binary`rectangular`no`no`D. Priebel`T. Davis`2009`combinatorial problem`\nEach column in the matrix corresponds to a number in the factor base     \nless than some bound B.  Each row corresponds to a smooth number (able   \nto be completely factored over the factor base).  Each value in a row    \nbinary vector corresponds to the exponent of the factor base mod 2.      \nFor example:                                                             \n                                                                         \n    factor base: 2 7 23                                                  \n    smooth numbers: 46, 28, 322                                          \n    2^1       * 23^1 = 46                                                \n    2^2 * 7^1        = 28                                                \n    2^1 * 7^1 * 23^1 = 322                                               \n    Matrix:                                                              \n        101                                                              \n        010                                                              \n        111                                                              \n                                                                         \nA solution to the matrix is considered to be a set of rows which when    \ncombined in GF2 produce a null vector. Thus, if you multiply each of     \nthe smooth numbers which correspond to that particular set of rows you   \nwill get a number with only even exponents, making it a perfect          \nsquare. In the above example you can see that combining the 3 vectors    \nresults in a null vector and, indeed, it is a perfect square: 644^2.     \n                                                                         \nProblem.A: A GF(2) matrix constructed from the exponents of the          \nfactorization of the smooth numbers over the factor base. A solution of  \nthis matrix is a kernel (nullspace). Such a solution has a 1/2 chance of \nbeing a factorization of N.                                              \n                                                                         \nProblem.aux.factor_base: The factor base used. factor_base(j) corresponds\nto column j of the matrix. Note that a given column may or may not have  \nnonzero elements in the matrix.                                          \n                                                                         \nProblem.aux.smooth_number: The smooth numbers, smooth over the factor    \nbase.  smooth_number(i) corresponds to row i of the matrix.              \n                                                                         \nProblem.aux.solution: A sample solution to the matrix. Combine, in GF(2) \nthe rows with these indicies to produce a solution to the matrix with the\nadditional property that it factors N (a matrix solution only has 1/2    \nprobability of factoring N).                                             \n                                                                         \nProblem specific information:                                            \n                                                                         \nn = 27393004579711727757848513391018843988362569 (145-bits)              \npasses primality test, n is composite, continuing...                     \n1) Initial bound: 20000, pi(20000) estimate: 2019,                       \n    largest found: 17569 (actual bound)                                  \n2) Number of quadratic residues estimate: 1347, actual number found: 992 \n3) Modular square roots found: 1984(2x residues)                         \n4) Constructing smooth number list [sieving] (can take a while)...       \nSieving for: 1002                                                        \n5. Constructing a matrix of size: 1002x993                               \nSet a total of 11315 exponents, with 503 negatives                       \nMatrix solution found with: 385 combinations                             \nDivisor: 4762476283061573160587 (probably prime)                         \nDivisor: 5751840629031342254587 (probably prime)                         \n
2252`Priebel`162bit`3606`3597`37118`no`3460`376`122`0`0%`0%`binary`rectangular`no`no`D. Priebel`T. Davis`2009`combinatorial problem`\nEach column in the matrix corresponds to a number in the factor base     \nless than some bound B.  Each row corresponds to a smooth number (able   \nto be completely factored over the factor base).  Each value in a row    \nbinary vector corresponds to the exponent of the factor base mod 2.      \nFor example:                                                             \n                                                                         \n    factor base: 2 7 23                                                  \n    smooth numbers: 46, 28, 322                                          \n    2^1       * 23^1 = 46                                                \n    2^2 * 7^1        = 28                                                \n    2^1 * 7^1 * 23^1 = 322                                               \n    Matrix:                                                              \n        101                                                              \n        010                                                              \n        111                                                              \n                                                                         \nA solution to the matrix is considered to be a set of rows which when    \ncombined in GF2 produce a null vector. Thus, if you multiply each of     \nthe smooth numbers which correspond to that particular set of rows you   \nwill get a number with only even exponents, making it a perfect          \nsquare. In the above example you can see that combining the 3 vectors    \nresults in a null vector and, indeed, it is a perfect square: 644^2.     \n                                                                         \nProblem.A: A GF(2) matrix constructed from the exponents of the          \nfactorization of the smooth numbers over the factor base. A solution of  \nthis matrix is a kernel (nullspace). Such a solution has a 1/2 chance of \nbeing a factorization of N.                                              \n                                                                         \nProblem.aux.factor_base: The factor base used. factor_base(j) corresponds\nto column j of the matrix. Note that a given column may or may not have  \nnonzero elements in the matrix.                                          \n                                                                         \nProblem.aux.smooth_number: The smooth numbers, smooth over the factor    \nbase.  smooth_number(i) corresponds to row i of the matrix.              \n                                                                         \nProblem.aux.solution: A sample solution to the matrix. Combine, in GF(2) \nthe rows with these indicies to produce a solution to the matrix with the\nadditional property that it factors N (a matrix solution only has 1/2    \nprobability of factoring N).                                             \n                                                                         \nProblem specific information:                                            \n                                                                         \nn = 3408489886335277144344023699527218196631767672957 (162-bits)         \npasses primality test, n is composite, continuing...                     \n1) Initial bound: 80000, pi(80000) estimate: 7086,                       \n    largest found: 71549 (actual bound)                                  \n2) Number of quadratic residues estimate: 4725, actual number found: 3596\n3) Modular square roots found: 7192(2x residues)                         \n4) Constructing smooth number list [sieving] (can take a while)...       \nSieving for: 3606                                                        \n5. Constructing a matrix of size: 3606x3597                              \nSet a total of 37118 exponents, with 1815 negatives                      \nMatrix solution found with: 1474 combinations                            \nDivisor: 1816046478796474796528999 (probably prime)                      \nDivisor: 1876873706775468629074043 (probably prime)                      \n
2253`Priebel`176bit`7441`7431`82270`no`7110`893`282`0`0%`0%`binary`rectangular`no`no`D. Priebel`T. Davis`2009`combinatorial problem`\nEach column in the matrix corresponds to a number in the factor base     \nless than some bound B.  Each row corresponds to a smooth number (able   \nto be completely factored over the factor base).  Each value in a row    \nbinary vector corresponds to the exponent of the factor base mod 2.      \nFor example:                                                             \n                                                                         \n    factor base: 2 7 23                                                  \n    smooth numbers: 46, 28, 322                                          \n    2^1       * 23^1 = 46                                                \n    2^2 * 7^1        = 28                                                \n    2^1 * 7^1 * 23^1 = 322                                               \n    Matrix:                                                              \n        101                                                              \n        010                                                              \n        111                                                              \n                                                                         \nA solution to the matrix is considered to be a set of rows which when    \ncombined in GF2 produce a null vector. Thus, if you multiply each of     \nthe smooth numbers which correspond to that particular set of rows you   \nwill get a number with only even exponents, making it a perfect          \nsquare. In the above example you can see that combining the 3 vectors    \nresults in a null vector and, indeed, it is a perfect square: 644^2.     \n                                                                         \nProblem.A: A GF(2) matrix constructed from the exponents of the          \nfactorization of the smooth numbers over the factor base. A solution of  \nthis matrix is a kernel (nullspace). Such a solution has a 1/2 chance of \nbeing a factorization of N.                                              \n                                                                         \nProblem.aux.factor_base: The factor base used. factor_base(j) corresponds\nto column j of the matrix. Note that a given column may or may not have  \nnonzero elements in the matrix.                                          \n                                                                         \nProblem.aux.smooth_number: The smooth numbers, smooth over the factor    \nbase.  smooth_number(i) corresponds to row i of the matrix.              \n                                                                         \nProblem.aux.solution: A sample solution to the matrix. Combine, in GF(2) \nthe rows with these indicies to produce a solution to the matrix with the\nadditional property that it factors N (a matrix solution only has 1/2    \nprobability of factoring N).                                             \n                                                                         \nProblem specific information:                                            \n                                                                         \nn = 73363722971930954428433124842779099222294372095286387 (176-bits)     \npasses primality test, n is composite, continuing...                     \n1) Initial bound: 180000, pi(180000) estimate: 14875,                    \n    largest found: 162359 (actual bound)                                 \n2) Number of quadratic residues estimate: 9918, actual number found: 7431\n3) Modular square roots found: 14862(2x residues)                        \n4) Constructing smooth number list [sieving] (can take a while)...       \nSieving for: 7441                                                        \n5. Constructing a matrix of size: 7441x7432                              \nSet a total of 82270 exponents, with 3725 negatives                      \nMatrix solution found with: 2983 combinations                            \nDivisor: 236037985789994529800050193 (probably prime)                    \nDivisor: 310813205452462332837525059 (probably prime)                    \n
2254`Priebel`192bit`13691`13682`154303`no`13006`1903`590`0`0%`0%`binary`rectangular`no`no`D. Priebel`T. Davis`2009`combinatorial problem`\nEach column in the matrix corresponds to a number in the factor base       \nless than some bound B.  Each row corresponds to a smooth number (able     \nto be completely factored over the factor base).  Each value in a row      \nbinary vector corresponds to the exponent of the factor base mod 2.        \nFor example:                                                               \n                                                                           \n    factor base: 2 7 23                                                    \n    smooth numbers: 46, 28, 322                                            \n    2^1       * 23^1 = 46                                                  \n    2^2 * 7^1        = 28                                                  \n    2^1 * 7^1 * 23^1 = 322                                                 \n    Matrix:                                                                \n        101                                                                \n        010                                                                \n        111                                                                \n                                                                           \nA solution to the matrix is considered to be a set of rows which when      \ncombined in GF2 produce a null vector. Thus, if you multiply each of       \nthe smooth numbers which correspond to that particular set of rows you     \nwill get a number with only even exponents, making it a perfect            \nsquare. In the above example you can see that combining the 3 vectors      \nresults in a null vector and, indeed, it is a perfect square: 644^2.       \n                                                                           \nProblem.A: A GF(2) matrix constructed from the exponents of the            \nfactorization of the smooth numbers over the factor base. A solution of    \nthis matrix is a kernel (nullspace). Such a solution has a 1/2 chance of   \nbeing a factorization of N.                                                \n                                                                           \nProblem.aux.factor_base: The factor base used. factor_base(j) corresponds  \nto column j of the matrix. Note that a given column may or may not have    \nnonzero elements in the matrix.                                            \n                                                                           \nProblem.aux.smooth_number: The smooth numbers, smooth over the factor      \nbase.  smooth_number(i) corresponds to row i of the matrix.                \n                                                                           \nProblem.aux.solution: A sample solution to the matrix. Combine, in GF(2)   \nthe rows with these indicies to produce a solution to the matrix with the  \nadditional property that it factors N (a matrix solution only has 1/2      \nprobability of factoring N).                                               \n                                                                           \nProblem specific information:                                              \n                                                                           \nn = 4232562527578032866150921497850842593296760823796443077101 (192-bits)  \npasses primality test, n is composite, continuing...                       \n1) Initial bound: 350000, pi(350000) estimate: 27417,                      \n    largest found: 317729 (actual bound)                                   \n2) Number of quadratic residues estimate: 18279, actual number found: 13681\n3) Modular square roots found: 27362(2x residues)                          \n4) Constructing smooth number list [sieving] (can take a while)...         \nSieving for: 13691                                                         \n5. Constructing a matrix of size: 13691x13682                              \nSet a total of 154303 exponents, with 6893 negatives                       \nMatrix solution found with: 5210 combinations                              \nDivisor: 83135929635332984850508004533 (probably prime)                    \nDivisor: 50911351399373573113182167897 (probably prime)                    \n
2255`Priebel`208bit`24430`24421`299756`no`22981`3671`1231`0`0%`0%`binary`rectangular`no`no`D. Priebel`T. Davis`2009`combinatorial problem`\nEach column in the matrix corresponds to a number in the factor base          \nless than some bound B.  Each row corresponds to a smooth number (able        \nto be completely factored over the factor base).  Each value in a row         \nbinary vector corresponds to the exponent of the factor base mod 2.           \nFor example:                                                                  \n                                                                              \n    factor base: 2 7 23                                                       \n    smooth numbers: 46, 28, 322                                               \n    2^1       * 23^1 = 46                                                     \n    2^2 * 7^1        = 28                                                     \n    2^1 * 7^1 * 23^1 = 322                                                    \n    Matrix:                                                                   \n        101                                                                   \n        010                                                                   \n        111                                                                   \n                                                                              \nA solution to the matrix is considered to be a set of rows which when         \ncombined in GF2 produce a null vector. Thus, if you multiply each of          \nthe smooth numbers which correspond to that particular set of rows you        \nwill get a number with only even exponents, making it a perfect               \nsquare. In the above example you can see that combining the 3 vectors         \nresults in a null vector and, indeed, it is a perfect square: 644^2.          \n                                                                              \nProblem.A: A GF(2) matrix constructed from the exponents of the               \nfactorization of the smooth numbers over the factor base. A solution of       \nthis matrix is a kernel (nullspace). Such a solution has a 1/2 chance of      \nbeing a factorization of N.                                                   \n                                                                              \nProblem.aux.factor_base: The factor base used. factor_base(j) corresponds     \nto column j of the matrix. Note that a given column may or may not have       \nnonzero elements in the matrix.                                               \n                                                                              \nProblem.aux.smooth_number: The smooth numbers, smooth over the factor         \nbase.  smooth_number(i) corresponds to row i of the matrix.                   \n                                                                              \nProblem.aux.solution: A sample solution to the matrix. Combine, in GF(2)      \nthe rows with these indicies to produce a solution to the matrix with the     \nadditional property that it factors N (a matrix solution only has 1/2         \nprobability of factoring N).                                                  \n                                                                              \nProblem specific information:                                                 \n                                                                              \nn = 239380926372595066574100671394554319947805305453767699448870971 (208-bits)\npasses primality test, n is composite, continuing...                          \n1) Initial bound: 650000, pi(650000) estimate: 48562,                         \n    largest found: 592903 (actual bound)                                      \n2) Number of quadratic residues estimate: 32376, actual number found: 24420   \n3) Modular square roots found: 48840(2x residues)                             \n4) Constructing smooth number list [sieving] (can take a while)...            \nSieving for: 24430                                                            \n5. Constructing a matrix of size: 24430x24421                                 \nSet a total of 299756 exponents, with 12070 negatives                         \nMatrix solution found with: 8741 combinations                                 \nDivisor: 12216681953629826483019726942851 (probably prime)                    \nDivisor: 19594594283554225566102143686121 (probably prime)                    \n
2256`MathWorks`TS`2142`2142`45262`no`2140`92`183`0`95%`4%`real`unsymmetric`no`no`P. Quillen`T. Davis`2009`counter-example problem`\nThis is a structurally singular matrix that triggers a bug in the   \n2-by-2 pivoting strategy in UMFPACK versions 4.1 through 5.3.       \nThe bug thus exists in MATLAB R2006b through R2009a.  It was        \nfixed in UMFPACK 5.4 and MATLAB R2009b.  Contributed by Pat Quillen,\nThe MathWorks, Inc.  The sprank(A) and rank(A) are 2140.            \n
2257`Botonakis`thermomech_TC`102158`102158`711558`yes`102158`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`I. Botonakis`T. Davis`2009`thermal problem`\nTC and TK are for temperature, dM and dK for deformation\n
2258`Botonakis`thermomech_TK`102158`102158`711558`yes`102158`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`I. Botonakis`T. Davis`2009`thermal problem`\nTC and TK are for temperature, dM and dK for deformation\n
2259`Botonakis`thermomech_dM`204316`204316`1423116`yes`204316`2`2`0`symmetric`symmetric`real`symmetric`yes`yes`I. Botonakis`T. Davis`2009`thermal problem`\nTC and TK are for temperature, dM and dK for deformation\n
2260`Botonakis`thermomech_dK`204316`204316`2846228`yes`204316`1`1`0`symmetric`67%`real`unsymmetric`no`no`I. Botonakis`T. Davis`2009`thermal problem`\nTC and TK are for temperature, dM and dK for deformation\n
2261`MaxPlanck`shallow_water1`81920`81920`327680`yes`81920`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`K. Leppkes, U. Naumann`T. Davis`2009`computational fluid dynamics problem`\nThe two shallow_water* matrices arise from weather shallow water equations   \n(see http://www.icon.enes.org), from the Max-Plank Institute of Meteorology. \nThe problem gives rise to an automatic differentiation problem.  An iterative\nsolver is used for the larger problem, but a direct sovler is used for       \nfinding the adjoints of a linear problem.  The velocity field is integrated  \nover a time loop with a semi-implicit method.  The implicit part leads to    \na linear problem A*x=b, whose entries vary with time.  Two of these matrices \nA are in this collection, with shallow_water1 at dtime=100 and shallow_water2\nat dtime=200.  The nonzero patterns of the two matrices are the same, but    \nshallow_water1 is much slower.  The reason is that many denormals appear     \nduring factorization, which greatly slows down the BLAS.  This can be solved \nby compiling with gcc -ffast-math, to flush denormals to zero.               \n
2262`MaxPlanck`shallow_water2`81920`81920`327680`yes`81920`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`K. Leppkes, U. Naumann`T. Davis`2009`computational fluid dynamics problem`\nThe two shallow_water* matrices arise from weather shallow water equations   \n(see http://www.icon.enes.org), from the Max-Plank Institute of Meteorology. \nThe problem gives rise to an automatic differentiation problem.  An iterative\nsolver is used for the larger problem, but a direct sovler is used for       \nfinding the adjoints of a linear problem.  The velocity field is integrated  \nover a time loop with a semi-implicit method.  The implicit part leads to    \na linear problem A*x=b, whose entries vary with time.  Two of these matrices \nA are in this collection, with shallow_water1 at dtime=100 and shallow_water2\nat dtime=200.  The nonzero patterns of the two matrices are the same, but    \nshallow_water1 is much slower.  The reason is that many denormals appear     \nduring factorization, which greatly slows down the BLAS.  This can be solved \nby compiling with gcc -ffast-math, to flush denormals to zero.               \n
2263`Buss`12month1`12471`872622`22624727`no`12418`82`13`0`0%`0%`binary`rectangular`no`no`S. Buss`T. Davis`2009`undirected bipartite graph`\nA full year of data from July 2008 to July 12, 2009, representing 12646\nusers from digg.com.  Each row is a user, each column is a web page.    \nFrom Steven Buss, for the Connectious project.                          \n
2264`Clark`tomographic1`73159`59498`647495`no`42208`3546`27546`0`0%`0%`real`rectangular`no`no`T. Clark`T. Davis`2009`computer graphics/vision problem`\nTomographic reconstruction of a particle field in fluid flow, T. Clark  \nSee http://www.mathworks.com/matlabcentral/newsreader/view_thread/254747\nfor a discussion.  The problem can be solved via lsqlin in MATLAB:      \nlb = zeros (n,1) ;                                                      \nx = lsqlin (A, b, [ ], [ ], [ ], [ ], lb) ;                             \n
2265`Bourchtein`atmosmodd`1270432`1270432`8814880`yes`1270432`1`1`0`symmetric`67%`real`unsymmetric`no`no`A. Bourchtein`T. Davis`2009`computational fluid dynamics problem`\nAtmospheric modeling problems from Andrei Bourchtein                      \n                                                                          \nThese matrices arise in the numerical weather prediction and atmospheric  \nmodeling.  Such matrices usually appear in semi-implicit schemes applied  \nto three-dimensional Euler or Navier-Stokes equations (called             \nnonhydrostatic models in the atmospheric sciences) or to their simplified \nform with hydrostatic balance equation instead of vertical momentum       \nequation (called hydrostatic or primitive equation models in the          \natmospheric sciences).                                                    \n                                                                          \nSuch linear systems represent discretization of three-dimensional elliptic\nproblems (frequently Dirichlet or Neumann problems for Helmholtz or       \nquasi-Helmholtz equations), arising at each time step of semi-implicit    \nalgorithms due to implicit time approximation of some linear terms in the \ngoverning equations.  If spectral spatial approximation is applied, then  \nthe elliptic problem is usually transformed to the linear system with a   \ndiagonal matrix solved trivially.  If finite-difference or finite-element \napproximation is used, then the linear systems with the sparse matrices of\nthe coefficients similar to the four submitted matrices arise.  However,  \nthe semi-implicit schemes usually do not require explicit construction of \nthe matrix of coefficients, neither do iterative methods used to solve    \nthese systems in the atmospheric models.  Besides, avoiding construction  \nof the matrix of coefficients allows reducing the required computer       \nmemory.  Due to these reasons, as far as I know, the explicit form of     \nmatrices of coefficients usually is not described, except for the local   \nstructure of the respective difference equations.                         \n                                                                          \nThe two right-hand sides b(:,1) and b(:,2) refer to the long wave or      \nshort wave perturbation of atmospheric fields, respectively.              \n                                                                          \nThe description of such semi-implicit algorithms together with arising    \nelliptic problems can be found, for example, in the following recent      \npapers (and references therein):                                          \n                                                                          \n1. Steppeler J., Hess R., Schattler U., Bonaventura L.: Review of         \nnumerical methods for nonhydrostatic weather prediction models. Met. Atm  \nPhys. 82 (2003) 287-301.                                                  \n                                                                          \n    This is a review paper on nonhydrostatic models, including            \n    particularly, semi-implicit time differencing.  Some description of   \n    arising elliptic problems and their solvers used in atmospheric models\n    can be found on pp.294-296.                                           \n                                                                          \n2. Cote J., Gravel S., Methot A., Patoine A., Roch M., Staniforth A.: The \nCMC-MRB global environmental multiscale (GEM) model. Part I: Design       \nconsiderations and formulation. Mon. Wea. Rev. 126 (1998) 1373-1395.      \n                                                                          \n3. Yeh K.S., Cote J., Gravel S., Methot A., Patoine A., Roch M.,          \nStaniforth A.: The CMC-MRB global environmental multiscale (GEM) model.   \nPart III: Nonhydrostatic formulation. Mon. Wea. Rev. 130 (2002) 339-356.  \n                                                                          \n    This pair of papers is about hydrostatic and nonhydrostatic versions  \n    of the modern semi-implicit Canadian model.  Some description of      \n    elliptic problems and their solution can be found on p.1389 of the    \n    first paper and p.343 of the second paper.                            \n                                                                          \n4. Davies T., Cullen M.J.P., Malcolm A.J., Mawson M.H., Staniforths A.,   \nWhite A.A., Wood N.: A new dynamical core for the Met Office’s global and \nregional modeling.  Q. J. Roy. Met. Soc. 131 (2005) 1759-1782.            \n                                                                          \n    This is a brief report on United Kingdom modern semi-implicit model.  \n    Some description of elliptic problem can be found on p.1778 and its   \n    solution on pp.1771-1772.                                             \n
2266`Bourchtein`atmosmodj`1270432`1270432`8814880`yes`1270432`1`1`0`symmetric`67%`real`unsymmetric`no`no`A. Bourchtein`T. Davis`2009`computational fluid dynamics problem`\nAtmospheric modeling problems from Andrei Bourchtein                      \n                                                                          \nThese matrices arise in the numerical weather prediction and atmospheric  \nmodeling.  Such matrices usually appear in semi-implicit schemes applied  \nto three-dimensional Euler or Navier-Stokes equations (called             \nnonhydrostatic models in the atmospheric sciences) or to their simplified \nform with hydrostatic balance equation instead of vertical momentum       \nequation (called hydrostatic or primitive equation models in the          \natmospheric sciences).                                                    \n                                                                          \nSuch linear systems represent discretization of three-dimensional elliptic\nproblems (frequently Dirichlet or Neumann problems for Helmholtz or       \nquasi-Helmholtz equations), arising at each time step of semi-implicit    \nalgorithms due to implicit time approximation of some linear terms in the \ngoverning equations.  If spectral spatial approximation is applied, then  \nthe elliptic problem is usually transformed to the linear system with a   \ndiagonal matrix solved trivially.  If finite-difference or finite-element \napproximation is used, then the linear systems with the sparse matrices of\nthe coefficients similar to the four submitted matrices arise.  However,  \nthe semi-implicit schemes usually do not require explicit construction of \nthe matrix of coefficients, neither do iterative methods used to solve    \nthese systems in the atmospheric models.  Besides, avoiding construction  \nof the matrix of coefficients allows reducing the required computer       \nmemory.  Due to these reasons, as far as I know, the explicit form of     \nmatrices of coefficients usually is not described, except for the local   \nstructure of the respective difference equations.                         \n                                                                          \nThe two right-hand sides b(:,1) and b(:,2) refer to the long wave or      \nshort wave perturbation of atmospheric fields, respectively.              \n                                                                          \nThe description of such semi-implicit algorithms together with arising    \nelliptic problems can be found, for example, in the following recent      \npapers (and references therein):                                          \n                                                                          \n1. Steppeler J., Hess R., Schattler U., Bonaventura L.: Review of         \nnumerical methods for nonhydrostatic weather prediction models. Met. Atm  \nPhys. 82 (2003) 287-301.                                                  \n                                                                          \n    This is a review paper on nonhydrostatic models, including            \n    particularly, semi-implicit time differencing.  Some description of   \n    arising elliptic problems and their solvers used in atmospheric models\n    can be found on pp.294-296.                                           \n                                                                          \n2. Cote J., Gravel S., Methot A., Patoine A., Roch M., Staniforth A.: The \nCMC-MRB global environmental multiscale (GEM) model. Part I: Design       \nconsiderations and formulation. Mon. Wea. Rev. 126 (1998) 1373-1395.      \n                                                                          \n3. Yeh K.S., Cote J., Gravel S., Methot A., Patoine A., Roch M.,          \nStaniforth A.: The CMC-MRB global environmental multiscale (GEM) model.   \nPart III: Nonhydrostatic formulation. Mon. Wea. Rev. 130 (2002) 339-356.  \n                                                                          \n    This pair of papers is about hydrostatic and nonhydrostatic versions  \n    of the modern semi-implicit Canadian model.  Some description of      \n    elliptic problems and their solution can be found on p.1389 of the    \n    first paper and p.343 of the second paper.                            \n                                                                          \n4. Davies T., Cullen M.J.P., Malcolm A.J., Mawson M.H., Staniforths A.,   \nWhite A.A., Wood N.: A new dynamical core for the Met Office’s global and \nregional modeling.  Q. J. Roy. Met. Soc. 131 (2005) 1759-1782.            \n                                                                          \n    This is a brief report on United Kingdom modern semi-implicit model.  \n    Some description of elliptic problem can be found on p.1778 and its   \n    solution on pp.1771-1772.                                             \n
2267`Bourchtein`atmosmodl`1489752`1489752`10319760`yes`1489752`1`1`0`symmetric`67%`real`unsymmetric`no`no`A. Bourchtein`T. Davis`2009`computational fluid dynamics problem`\nAtmospheric modeling problems from Andrei Bourchtein                      \n                                                                          \nThese matrices arise in the numerical weather prediction and atmospheric  \nmodeling.  Such matrices usually appear in semi-implicit schemes applied  \nto three-dimensional Euler or Navier-Stokes equations (called             \nnonhydrostatic models in the atmospheric sciences) or to their simplified \nform with hydrostatic balance equation instead of vertical momentum       \nequation (called hydrostatic or primitive equation models in the          \natmospheric sciences).                                                    \n                                                                          \nSuch linear systems represent discretization of three-dimensional elliptic\nproblems (frequently Dirichlet or Neumann problems for Helmholtz or       \nquasi-Helmholtz equations), arising at each time step of semi-implicit    \nalgorithms due to implicit time approximation of some linear terms in the \ngoverning equations.  If spectral spatial approximation is applied, then  \nthe elliptic problem is usually transformed to the linear system with a   \ndiagonal matrix solved trivially.  If finite-difference or finite-element \napproximation is used, then the linear systems with the sparse matrices of\nthe coefficients similar to the four submitted matrices arise.  However,  \nthe semi-implicit schemes usually do not require explicit construction of \nthe matrix of coefficients, neither do iterative methods used to solve    \nthese systems in the atmospheric models.  Besides, avoiding construction  \nof the matrix of coefficients allows reducing the required computer       \nmemory.  Due to these reasons, as far as I know, the explicit form of     \nmatrices of coefficients usually is not described, except for the local   \nstructure of the respective difference equations.                         \n                                                                          \nThe two right-hand sides b(:,1) and b(:,2) refer to the long wave or      \nshort wave perturbation of atmospheric fields, respectively.              \n                                                                          \nThe description of such semi-implicit algorithms together with arising    \nelliptic problems can be found, for example, in the following recent      \npapers (and references therein):                                          \n                                                                          \n1. Steppeler J., Hess R., Schattler U., Bonaventura L.: Review of         \nnumerical methods for nonhydrostatic weather prediction models. Met. Atm  \nPhys. 82 (2003) 287-301.                                                  \n                                                                          \n    This is a review paper on nonhydrostatic models, including            \n    particularly, semi-implicit time differencing.  Some description of   \n    arising elliptic problems and their solvers used in atmospheric models\n    can be found on pp.294-296.                                           \n                                                                          \n2. Cote J., Gravel S., Methot A., Patoine A., Roch M., Staniforth A.: The \nCMC-MRB global environmental multiscale (GEM) model. Part I: Design       \nconsiderations and formulation. Mon. Wea. Rev. 126 (1998) 1373-1395.      \n                                                                          \n3. Yeh K.S., Cote J., Gravel S., Methot A., Patoine A., Roch M.,          \nStaniforth A.: The CMC-MRB global environmental multiscale (GEM) model.   \nPart III: Nonhydrostatic formulation. Mon. Wea. Rev. 130 (2002) 339-356.  \n                                                                          \n    This pair of papers is about hydrostatic and nonhydrostatic versions  \n    of the modern semi-implicit Canadian model.  Some description of      \n    elliptic problems and their solution can be found on p.1389 of the    \n    first paper and p.343 of the second paper.                            \n                                                                          \n4. Davies T., Cullen M.J.P., Malcolm A.J., Mawson M.H., Staniforths A.,   \nWhite A.A., Wood N.: A new dynamical core for the Met Office’s global and \nregional modeling.  Q. J. Roy. Met. Soc. 131 (2005) 1759-1782.            \n                                                                          \n    This is a brief report on United Kingdom modern semi-implicit model.  \n    Some description of elliptic problem can be found on p.1778 and its   \n    solution on pp.1771-1772.                                             \n
2268`Bourchtein`atmosmodm`1489752`1489752`10319760`yes`1489752`1`1`0`symmetric`67%`integer`unsymmetric`no`no`A. Bourchtein`T. Davis`2009`computational fluid dynamics problem`\nAtmospheric modeling problems from Andrei Bourchtein                      \n                                                                          \nThese matrices arise in the numerical weather prediction and atmospheric  \nmodeling.  Such matrices usually appear in semi-implicit schemes applied  \nto three-dimensional Euler or Navier-Stokes equations (called             \nnonhydrostatic models in the atmospheric sciences) or to their simplified \nform with hydrostatic balance equation instead of vertical momentum       \nequation (called hydrostatic or primitive equation models in the          \natmospheric sciences).                                                    \n                                                                          \nSuch linear systems represent discretization of three-dimensional elliptic\nproblems (frequently Dirichlet or Neumann problems for Helmholtz or       \nquasi-Helmholtz equations), arising at each time step of semi-implicit    \nalgorithms due to implicit time approximation of some linear terms in the \ngoverning equations.  If spectral spatial approximation is applied, then  \nthe elliptic problem is usually transformed to the linear system with a   \ndiagonal matrix solved trivially.  If finite-difference or finite-element \napproximation is used, then the linear systems with the sparse matrices of\nthe coefficients similar to the four submitted matrices arise.  However,  \nthe semi-implicit schemes usually do not require explicit construction of \nthe matrix of coefficients, neither do iterative methods used to solve    \nthese systems in the atmospheric models.  Besides, avoiding construction  \nof the matrix of coefficients allows reducing the required computer       \nmemory.  Due to these reasons, as far as I know, the explicit form of     \nmatrices of coefficients usually is not described, except for the local   \nstructure of the respective difference equations.                         \n                                                                          \nThe two right-hand sides b(:,1) and b(:,2) refer to the long wave or      \nshort wave perturbation of atmospheric fields, respectively.              \n                                                                          \nThe description of such semi-implicit algorithms together with arising    \nelliptic problems can be found, for example, in the following recent      \npapers (and references therein):                                          \n                                                                          \n1. Steppeler J., Hess R., Schattler U., Bonaventura L.: Review of         \nnumerical methods for nonhydrostatic weather prediction models. Met. Atm  \nPhys. 82 (2003) 287-301.                                                  \n                                                                          \n    This is a review paper on nonhydrostatic models, including            \n    particularly, semi-implicit time differencing.  Some description of   \n    arising elliptic problems and their solvers used in atmospheric models\n    can be found on pp.294-296.                                           \n                                                                          \n2. Cote J., Gravel S., Methot A., Patoine A., Roch M., Staniforth A.: The \nCMC-MRB global environmental multiscale (GEM) model. Part I: Design       \nconsiderations and formulation. Mon. Wea. Rev. 126 (1998) 1373-1395.      \n                                                                          \n3. Yeh K.S., Cote J., Gravel S., Methot A., Patoine A., Roch M.,          \nStaniforth A.: The CMC-MRB global environmental multiscale (GEM) model.   \nPart III: Nonhydrostatic formulation. Mon. Wea. Rev. 130 (2002) 339-356.  \n                                                                          \n    This pair of papers is about hydrostatic and nonhydrostatic versions  \n    of the modern semi-implicit Canadian model.  Some description of      \n    elliptic problems and their solution can be found on p.1389 of the    \n    first paper and p.343 of the second paper.                            \n                                                                          \n4. Davies T., Cullen M.J.P., Malcolm A.J., Mawson M.H., Staniforths A.,   \nWhite A.A., Wood N.: A new dynamical core for the Met Office’s global and \nregional modeling.  Q. J. Roy. Met. Soc. 131 (2005) 1759-1782.            \n                                                                          \n    This is a brief report on United Kingdom modern semi-implicit model.  \n    Some description of elliptic problem can be found on p.1778 and its   \n    solution on pp.1771-1772.                                             \n
2269`Puri`ABACUS_shell_ud`23412`23412`218484`yes`23412`1`1`0`symmetric`98%`real`unsymmetric`no`no`S. Puri`T. Davis`2009`model reduction problem`
2270`Puri`ABACUS_shell_ld`23412`23412`218484`yes`23412`1`1`0`symmetric`89%`complex`unsymmetric`no`no`S. Puri`T. Davis`2009`model reduction problem`
2271`Puri`ABACUS_shell_md`23412`23412`218484`yes`23412`1`1`0`symmetric`89%`complex`unsymmetric`no`no`S. Puri`T. Davis`2009`model reduction problem`
2272`Puri`ABACUS_shell_hd`23412`23412`218484`yes`23412`1`1`0`symmetric`89%`complex`unsymmetric`no`no`S. Puri`T. Davis`2009`model reduction problem`
2273`Stevenson`LargeRegFile`2111154`801374`4944201`yes`801374`32778`2`0`0%`0%`real`rectangular`no`no`J. Stevenson`T. Davis`2010`circuit simulation problem`\nThis is a sparse matrix from a geometric program representing a circuit\noptimization.  The circuit is a large register file: 256 registers, 64 \nbits each.  2 read ports, 1 write port.  Some background on this       \ncircuit optimization method can be found here: D. Patil, O. Azizi, M.  \nHorowitz, R.  Ho, and R. Ananthraman. Robust energy-efficient adder    \ntopologies. In ARITH07: Proceedings of the 18th IEEE Symposium on      \nComputer Arithmetic, pages 16-28, Washington, DC, USA, 2007. IEEE      \nComputer Society.  and here: D.  Patil, S. J. Kim, and M. Horowitz.    \nJoint supply, threshold voltage and sizing optimization for design of  \nrobust digital circuits.  Technical report, Department of Electrical   \nEngineering, Stanford University.                                      \n                                                                       \nThe term \"geometric programming\" is similar to \"linear programming\" but\nit refers to a slightly different problem form.  I need to clarify one \nthing:  you can't use a simple LP solver to solve a GP, but, GPs can be\nhandled efficiently with more advanced algorithms (Boyd's paper refers \nto these but does not describe them).                                  \n                                                                       \nThis website is about as concise as I can imagine in introducing the   \ntopic: http://www.stanford.edu/~boyd/papers/gp_digital_ckt.html        \n                                                                       \nThe problem matrix that I sent you refers to problems that are         \ndescribed in the above, but, in brief, it goes something like this:    \nGiven a fixed topology digital circuit, minimize circuit delay subject \nto constraints on power and area.  The optimization variables are the  \nset of all transistor sizes, the supply voltage, and the n/p threshold \nvoltages.                                                              \n                                                                       \nThis problem is can be formulated as a GP by using some very standard  \napproximations.  The results are quite good in terms of accuracy; this \nmethod is not well integrated with industry standard tools though.     \n                                                                       \nSo it is not combinatorial, nor is it SPICE like.  The results are     \nclose to SPICE results (within ~10% for delay and ~1% for power).  The \ntime it takes to find an optimal point is something like               \n1e-15*time-required-by-spice (i.e., it takes too long to do this       \noptimization in SPICE, unless the circuit is really really small).     \n
2274`Freescale`memchip`2707524`2707524`13343948`yes`2707524`63`53`1466254`91%`40%`real`unsymmetric`no`no`K. Gullapalli`T. Davis`2010`circuit simulation problem`
2275`Freescale`transient`178866`178866`961368`yes`178866`21`21`422`100%`24%`real`unsymmetric`no`no`K. Gullapalli`T. Davis`2010`circuit simulation problem`\nSmall circuit from Kiran Gullapalli, Freescale Semiconductor       \nFactorization is fast, but dominates the transient simulation time.\n
2276`Freescale`circuit5M`5558326`5558326`59524291`yes`5558326`1094`647`0`100%`42%`real`unsymmetric`no`no`K. Gullapalli`T. Davis`2010`circuit simulation problem`\nLarge circuit from Kiran Gullapalli, Freescale Semiconductor\nLittle fill-in during factorization, if ordered properly..  \n
2277`Freescale`circuit5M_dc`3523317`3523317`14865409`yes`3523317`1062`1062`4328784`91%`72%`real`unsymmetric`no`no`K. Gullapalli`T. Davis`2010`circuit simulation problem`\nLarge circuit from Kiran Gullapalli, Freescale Semiconductor\nDC analysis, related to Freescale/circuit5M matrix.         \n
2278`Grund`poli3`16955`16955`37849`yes`16955`16794`16794`0`1%`0%`real`unsymmetric`no`no`F. Grund`T. Davis`2010`economic problem`
2279`Grund`poli4`33833`33833`73249`yes`33833`33628`33628`0`0%`0%`real`unsymmetric`no`no`F. Grund`T. Davis`2010`economic problem`
2280`Belcastro`human_gene1`22283`22283`24669643`unknown`unknown`unknown`410`0`symmetric`symmetric`real`symmetric`yes`no`V. Belcastro`T. Davis`2010`undirected weighted graph`\nHuman gene regulatory network, from analyzing gene expression profiles.\nThis version of the human gene network is probe-set oriented.          \n
2281`Belcastro`human_gene2`14340`14340`18068388`unknown`unknown`unknown`320`0`symmetric`symmetric`real`symmetric`yes`no`V. Belcastro`T. Davis`2010`undirected weighted graph`\nHuman gene regulatory network, from analyzing gene expression profiles.\nThis version of the human gene network is gene oriented.               \n
2282`Belcastro`mouse_gene`45101`45101`28967291`unknown`unknown`unknown`2072`0`symmetric`symmetric`real`symmetric`yes`no`V. Belcastro`T. Davis`2010`undirected weighted graph`\nMouse gene regulatory network, from analyzing gene expression profiles.\n
2283`Um`offshore`259789`259789`4242673`yes`259789`1`1`0`symmetric`symmetric`real`symmetric`yes`yes`E. Um`T. Davis`2010`electromagnetics problem`\nThis is a finite-element system matrix deriving from the 3D transient\nelectric field diffusion equation. The matrix results from the       \ndiscretization of offshore conductivity structures using tetrahedral \nelements.  Evan Um, Geophysics, Stanford.                            \n
2284`SNAP`soc-Epinions1`75888`75888`508837`unknown`unknown`unknown`42185`0`41%`41%`binary`unsymmetric`no`no`M. Richardson and R. Agrawal and P. Domingos`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nEpinions social network                                                        \n                                                                               \nDataset information                                                            \n                                                                               \nThis is a who-trust-whom online social network of a a general consumer review  \nsite Epinions.com. Members of the site can decide whether to ''trust'' each    \nother. All the trust relationships interact and form the Web of Trust which is \nthen combined with review ratings to determine which reviews are shown to the  \nuser.                                                                          \n                                                                               \nDataset statistics                                                             \n                                                                               \nNodes   75879                                                                  \nEdges   508837                                                                 \nNodes in largest WCC    75877 (1.000)                                          \nEdges in largest WCC    508836 (1.000)                                         \nNodes in largest SCC    32223 (0.425)                                          \nEdges in largest SCC    443506 (0.872)                                         \nAverage clustering coefficient  0.2283                                         \nNumber of triangles     1624481                                                \nFraction of closed triangles    0.06568                                        \nDiameter (longest shortest path)    13                                         \n90-percentile effective diameter    5                                          \n                                                                               \nSource (citation)                                                              \n                                                                               \nM. Richardson and R. Agrawal and P. Domingos. Trust Management for the Semantic\nWeb. ISWC, 2003.                                                               \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nsoc-Epinions1.txt.gz    Directed Epinions social network                       \n
2285`SNAP`soc-LiveJournal1`4847571`4847571`68993773`unknown`unknown`unknown`971232`0`75%`75%`binary`unsymmetric`no`no`L. Backstrom, D. Huttenlocher, J. Kleinberg, X. Lan`J. Leskovec`2006`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nLiveJournal social network                                                     \n                                                                               \nDataset information                                                            \n                                                                               \nLiveJournal is a free on-line community with almost 10 million members; a      \nsignificant fraction of these members are highly active. (For example, roughly \n300000 update their content in any given 24-hour period.) LiveJournal allows  \nmembers to maintain journals, individual and group blogs, and it allows people \nto declare which other members are their friends they belong.                  \n                                                                               \nDataset statistics                                                             \nNodes   4847571                                                                \nEdges   68993773                                                               \nNodes in largest WCC    4843953 (0.999)                                        \nEdges in largest WCC    68983820 (1.000)                                       \nNodes in largest SCC    3828682 (0.790)                                        \nEdges in largest SCC    65825429 (0.954)                                       \nAverage clustering coefficient  0.3123                                         \nNumber of triangles     285730264                                              \nFraction of closed triangles    0.2882                                         \nDiameter (longest shortest path)    18                                         \n90-percentile effective diameter    6.5                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nL. Backstrom, D. Huttenlocher, J. Kleinberg, X. Lan. Group Formation in        \nLarge Social Networks: Membership, Growth, and Evolution. KDD, 2006.           \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \n                                                                               \nFiles                                                                          \n                                                                               \nFile    Description                                                            \nsoc-LiveJournal1.txt.gz     Directed LiveJournal friednship social network     \n
2286`SNAP`soc-Slashdot0811`77360`77360`905468`unknown`unknown`unknown`6724`0`87%`87%`binary`unsymmetric`no`no`J. Leskovec, K. Lang, A. Dasgupta, M. Mahoney`J. Leskovec`2008`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nSlashdot social network, November 2008                                         \n                                                                               \nDataset information                                                            \n                                                                               \nSlashdot is a technology-related news website know for its specific user       \ncommunity. The website features user-submitted and editor-evaluated current    \nprimarily technology oriented news. In 2002 Slashdot introduced the Slashdot   \nZoo feature which allows users to tag each other as friends or foes. The       \nnetwork cotains friend/foe links between the users of Slashdot. The network was\nobtained in November 2008.                                                     \n                                                                               \nDataset statistics                                                             \nNodes   77360                                                                  \nEdges   905468                                                                 \nNodes in largest WCC    77360 (1.000)                                          \nEdges in largest WCC    905468 (1.000)                                         \nNodes in largest SCC    70355 (0.909)                                          \nEdges in largest SCC    888662 (0.981)                                         \nAverage clustering coefficient  0.0555                                         \nNumber of triangles     551724                                                 \nFraction of closed triangles    0.02416                                        \nDiameter (longest shortest path)    10                                         \n90-percentile effective diameter    4.7                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \n                                                                               \nFile    Description                                                            \nSlashdot0811.txt.gz     Slashdot Zoo social network from Noveber 6 2008        \n
2287`SNAP`soc-Slashdot0902`82168`82168`948464`unknown`unknown`unknown`10559`0`84%`84%`binary`unsymmetric`no`no`J. Leskovec, K. Lang, A. Dasgupta, M. Mahoney`J. Leskovec`2009`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nSlashdot social network, February 2009                                         \n                                                                               \nDataset information                                                            \n                                                                               \nSlashdot is a technology-related news website know for its specific user       \ncommunity. The website features user-submitted and editor-evaluated current    \nprimarily technology oriented news. In 2002 Slashdot introduced the Slashdot   \nZoo feature which allows users to tag each other as friends or foes. The       \nnetwork cotains friend/foe links between the users of Slashdot. The network was\nobtained in February 2009.                                                     \n                                                                               \nDataset statistics                                                             \nNodes   82168                                                                  \nEdges   948464                                                                 \nNodes in largest WCC    82168 (1.000)                                          \nEdges in largest WCC    948464 (1.000)                                         \nNodes in largest SCC    71307 (0.868)                                          \nEdges in largest SCC    912381 (0.962)                                         \nAverage clustering coefficient  0.0617                                         \nNumber of triangles     602592                                                 \nFraction of closed triangles    0.02411                                        \nDiameter (longest shortest path)    12                                         \n90-percentile effective diameter    4.7                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nSlashdot0902.txt.gz     Slashdot Zoo social network from February 0 2009       \n
2288`SNAP`wiki-Vote`8297`8297`103689`unknown`unknown`unknown`6998`0`6%`6%`binary`unsymmetric`no`no`J. Leskovec, D. Huttenlocher, J. Kleinberg`J. Leskovec`2008`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nWikipedia vote network                                                         \n                                                                               \nDataset information                                                            \n                                                                               \nWikipedia is a free encyclopedia written collaboratively by volunteers around  \nthe world. A small part of Wikipedia contributors are administrators, who are  \nusers with access to additional technical features that aid in maintenance. In \norder for a user to become an administrator a Request for adminship (RfA) is   \nissued and the Wikipedia community via a public discussion or a vote decides   \nwho to promote to adminship. Using the latest complete dump of Wikipedia page  \nedit history (from January 3 2008) we extracted all administrator elections and\nvote history data. This gave us 2794 elections with 103663 total votes and   \n7066 users participating in the elections (either casting a vote or being     \nvoted on). Out of these 1235 elections resulted in a successful promotion,    \nwhile 1559 elections did not result in the promotion. About half of the votes \nin the dataset are by existing admins, while the other half comes from ordinary\nWikipedia users.                                                               \n                                                                               \nThe network contains all the users and discussion from the inception of        \nWikipedia till January 2008. Nodes in the network represent wikipedia users and\na directed edge from node i to node j represents that user i voted on user j.  \n                                                                               \nDataset statistics                                                             \nNodes   7115                                                                   \nEdges   103689                                                                 \nNodes in largest WCC    7066 (0.993)                                           \nEdges in largest WCC    103663 (1.000)                                         \nNodes in largest SCC    1300 (0.183)                                           \nEdges in largest SCC    39456 (0.381)                                          \nAverage clustering coefficient  0.2089                                         \nNumber of triangles     608389                                                 \nFraction of closed triangles    0.1255                                         \nDiameter (longest shortest path)    7                                          \n90-percentile effective diameter    3.8                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg. Signed Networks in Social Media.   \nCHI 2010.                                                                      \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg. Predicting Positive and Negative   \nLinks in Online Social Networks. WWW 2010.                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nWiki-Vote.txt.gz    Wikipedia adminship vote network till January 2008         \n
2289`SNAP`email-EuAll`265214`265214`420045`unknown`unknown`unknown`231000`0`26%`26%`binary`unsymmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2005`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nEU email communication network                                                 \n                                                                               \nDataset information                                                            \n                                                                               \nThe network was generated using email data from a large European research      \ninstitution. For a period from October 2003 to May 2005 (18 months) we have    \nanonymized information about all incoming and outgoing email of the research   \ninstitution. For each sent or received email message we know the time, the     \nsender and the recipient of the email. Overall we have 3038531 emails between\n287755 different email addresses. Note that we have a complete email graph for\nonly 1258 email addresses that come from the research institution.            \nFurthermore, there are 34203 email addresses that both sent and received email\nwithin the span of our dataset. All other email addresses are either           \nnon-existing, mistyped or spam.                                                \n                                                                               \nGiven a set of email messages, each node corresponds to an email address. We   \ncreate a directed edge between nodes i and j, if i sent at least one message to\nj.                                                                             \n                                                                               \nDataset statistics                                                             \n                                                                               \nNodes   265214                                                                 \nEdges   420045                                                                 \nNodes in largest WCC    224832 (0.848)                                         \nEdges in largest WCC    395270 (0.941)                                         \nNodes in largest SCC    34203 (0.129)                                          \nEdges in largest SCC    151930 (0.362)                                         \nAverage clustering coefficient  0.3093                                         \nNumber of triangles     267313                                                 \nFraction of closed triangles    0.004106                                       \nDiameter (longest shortest path)    13                                         \n90-percentile effective diameter    4.5                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and \nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM    \nTKDD), 1(1), 2007.                                                             \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nemail-EuAll.txt.gz  Email network of a large European Research Institution     \n
2290`SNAP`email-Enron`36692`36692`367662`unknown`unknown`unknown`1065`0`symmetric`symmetric`binary`symmetric`no`no`L. Kaelbling, M. Gervasio, W. Cohen`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nEnron email network                                                            \n                                                                               \nDataset information                                                            \n                                                                               \nEnron email communication network covers all the email communication within a  \ndataset of around half million emails. This data was originally made public,   \nand posted to the web, by the Federal Energy Regulatory Commission during its  \ninvestigation. Nodes of the network are email addresses and if an address i    \nsent at least one email to address j, the graph contains a directed edge from i\nto j. Note that non-Enron email addresses act as sinks and sources in the      \nnetwork as we only observe their communication with the Enron email addresses. \n                                                                               \nThe Enron email data was originally released by William Cohen at CMU.          \n                                                                               \nDataset statistics                                                             \nNodes   36692                                                                  \nEdges   367662                                                                 \nNodes in largest WCC    33696 (0.918)                                          \nEdges in largest WCC    361622 (0.984)                                         \nNodes in largest SCC    33696 (0.918)                                          \nEdges in largest SCC    361622 (0.984)                                         \nAverage clustering coefficient  0.4970                                         \nNumber of triangles     727044                                                 \nFraction of closed triangles    0.08531                                        \nDiameter (longest shortest path)    12                                         \n90-percentile effective diameter    4.8                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification    \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International  \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                 \n                                                                               \nFile    Description                                                            \nemail-Enron.txt.gz  Enron email network                                        \nEnron email data    Complete Enron email dataset (includes full email message  \n                    text and attachments), at http://www.cs.cmu.edu/~enron/    \n                                                                               \n
2291`SNAP`wiki-Talk`2394385`2394385`5021410`unknown`unknown`unknown`2281879`0`14%`14%`binary`unsymmetric`no`no`J. Leskovec, D. Huttenlocher, J. Kleinberg`J. Leskovec`2008`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nWikipedia Talk network                                                         \n                                                                               \nDataset information                                                            \n                                                                               \nWikipedia is a free encyclopedia written collaboratively by volunteers around  \nthe world. Each registered user has a talk page, that she and other users can  \nedit in order to communicate and discuss updates to various articles on        \nWikipedia. Using the latest complete dump of Wikipedia page edit history (from \nJanuary 3 2008) we extracted all user talk page changes and created a network. \n                                                                               \nThe network contains all the users and discussion from the inception of        \nWikipedia till January 2008. Nodes in the network represent Wikipedia users and\na directed edge from node i to node j represents that user i at least once     \nedited a talk page of user j.                                                  \n                                                                               \nDataset statistics                                                             \nNodes   2394385                                                                \nEdges   5021410                                                                \nNodes in largest WCC    2388953 (0.998)                                        \nEdges in largest WCC    5018445 (0.999)                                        \nNodes in largest SCC    111881 (0.047)                                         \nEdges in largest SCC    1477893 (0.294)                                        \nAverage clustering coefficient  0.1958                                         \nNumber of triangles     9203519                                                \nFraction of closed triangles    -0.09476                                       \nDiameter (longest shortest path)    9                                          \n90-percentile effective diameter    4                                          \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg. Signed Networks in Social Media.   \nCHI 2010.                                                                      \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg. Predicting Positive and Negative   \nLinks in Online Social Networks. WWW 2010.                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nWiki-Talk.txt.gz    Wikipedia talk graph till January 2008                     \n
2292`SNAP`cit-HepPh`34546`34546`421578`unknown`unknown`unknown`21608`0`0%`0%`binary`unsymmetric`no`no`J. Gehrke, P. Ginsparg, J. Kleinberg`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,      \nJure Leskovec http://snap.stanford.edu/data/index.html                          \nemail jure at cs.stanford.edu                                                   \n                                                                                \nHigh-energy physics citation network                                            \nDataset information                                                             \n                                                                                \nArxiv HEP-PH (high energy physics phenomenology ) citation graph is from the    \ne-print arXiv and covers all the citations within a dataset of 34546 papers    \nwith 421578 edges. If a paper i cites paper j, the graph contains a directed   \nedge from i to j. If a paper cites, or is cited by, a paper outside the         \ndataset, the graph does not contain any information about this.                 \n                                                                                \nThe data covers papers in the period from January 1993 to April 2003 (124       \nmonths). It begins within a few months of the inception of the arXiv, and thus  \nrepresents essentially the complete history of its HEP-PH section.              \n                                                                                \nThe data was originally released as a part of 2003 KDD Cup.                     \n                                                                                \nDataset statistics                                                              \nNodes   34546                                                                   \nEdges   421578                                                                  \nNodes in largest WCC    34401 (0.996)                                           \nEdges in largest WCC    421485 (1.000)                                          \nNodes in largest SCC    12711 (0.368)                                           \nEdges in largest SCC    139981 (0.332)                                          \nAverage clustering coefficient  0.2962                                          \nNumber of triangles     1276868                                                 \nFraction of closed triangles    0.1457                                          \nDiameter (longest shortest path)    12                                          \n90-percentile effective diameter    5                                           \n                                                                                \nSource (citation)                                                               \n                                                                                \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification     \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International   \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                  \n                                                                                \nJ. Gehrke, P. Ginsparg, J. M. Kleinberg. Overview of the 2003 KDD Cup. SIGKDD   \nExplorations 5(2): 149-151, 2003.                                               \n                                                                                \nFiles                                                                           \nFile    Description                                                             \ncit-HepPh.txt.gz    Paper citation network of Arxiv High Energy Physics category\ncit-HepPh-dates.txt.gz  Time of nodes (paper submission time to Arxiv)          \n
2293`SNAP`cit-HepTh`27770`27770`352807`unknown`unknown`unknown`20086`0`0%`0%`binary`unsymmetric`no`no`J. Gehrke, P. Ginsparg, J. Kleinberg`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nHigh-energy physics theory citation network                                    \n                                                                               \nDataset information                                                            \n                                                                               \nArxiv HEP-TH (high energy physics theory) citation graph is from the e-print   \narXiv and covers all the citations within a dataset of 27770 papers with      \n352807 edges. If a paper i cites paper j, the graph contains a directed edge  \nfrom i to j. If a paper cites, or is cited by, a paper outside the dataset, the\ngraph does not contain any information about this.                             \n                                                                               \nThe data covers papers in the period from January 1993 to April 2003 (124      \nmonths). It begins within a few months of the inception of the arXiv, and thus \nrepresents essentially the complete history of its HEP-TH section.             \n                                                                               \nThe data was originally released as a part of 2003 KDD Cup.                    \n                                                                               \nDataset statistics                                                             \nNodes   27770                                                                  \nEdges   352807                                                                 \nNodes in largest WCC    27400 (0.987)                                          \nEdges in largest WCC    352542 (0.999)                                         \nNodes in largest SCC    7464 (0.269)                                           \nEdges in largest SCC    116268 (0.330)                                         \nAverage clustering coefficient  0.3295                                         \nNumber of triangles     1478735                                                \nFraction of closed triangles    0.1196                                         \nDiameter (longest shortest path)    14                                         \n90-percentile effective diameter    5.4                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification    \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International  \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                 \n                                                                               \nJ. Gehrke, P. Ginsparg, J. M. Kleinberg. Overview of the 2003 KDD Cup. SIGKDD  \nExplorations 5(2): 149-151, 2003.                                              \n                                                                               \nFiles                                                                          \nFile    Description                                                            \ncit-HepTh.txt.gz    Paper citation network of Arxiv High Energy Physics Theory \n                    category                                                   \ncit-HepTh-dates.txt.gz  Time of nodes (paper submission time to Arxiv)         \ncit-HepTh-abstracts.tar.gz  Paper meta information (see below)                 \n                                                                               \nExample of paper meta information:                                             \n                                                                               \n    Paper: hep-th/0002031                                                      \n    From: Maulik K. Parikh                                                     \n    Date: Fri, 4 Feb 2000 17:04:51 GMT (10kb)                                  \n                                                                               \n    Title: Confinement and the AdS/CFT Correspondence                          \n    Authors: D. S. Berman and Maulik K. Parikh                                 \n    Comments: 12 pages, 1 figure, RevTeX                                       \n    Report-no: SPIN-1999/25, UG-1999/42                                        \n    Journal-ref: Phys.Lett. B483 (2000) 271-276                                \n    \\                                                                         \n      We study the thermodynamics of the confined and unconfined phases of     \n    superconformal Yang-Mills in finite volume and at large N using the AdS/CFT\n    correspondence. We discuss the necessary conditions for a smooth phase     \n    crossover and obtain an N-dependent curve for the phase boundary.          \n    \\                                                                         \n                                                                               \n                                                                               \n                                                                               \nNOTE: an identical version this problem already appears in the UF Collection:  \n                                                                               \ncit-HepTh           Pajek/HEP-th-new is identical to the                       \n                    SNAP/cit-HeptTh graph.  Since it's small, I have           \n                    decided to include both in the collection, to              \n                    keep the SNAP/ collection complete.                        \n                                    n: 27770    nz:  352807                  \n                                                                               \n
2294`SNAP`cit-Patents`3774768`3774768`16518948`unknown`unknown`unknown`3774768`0`0%`0%`binary`unsymmetric`no`no`B. Hall, A. Jaffe, M. Trajtenberg`J. Leskovec`1999`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nPatent citation network                                                        \n                                                                               \nDataset information                                                            \n                                                                               \nU.S. patent dataset is maintained by the National Bureau of Economic Research. \nThe data set spans 37 years (January 1, 1963 to December 30, 1999), and        \nincludes all the utility patents granted during that period, totaling 3923922\npatents. The citation graph includes all citations made by patents granted     \nbetween 1975 and 1999, totaling 16522438 citations. For the patents dataset  \nthere are 1803511 nodes for which we have no information about their         \ncitations (we only have the in-links).                                         \n                                                                               \nThe data was originally released by NBER.                                      \n                                                                               \nDataset statistics                                                             \nNodes   3774768                                                                \nEdges   16518948                                                               \nNodes in largest WCC    3764117 (0.997)                                        \nEdges in largest WCC    16511741 (1.000)                                       \nNodes in largest SCC    1 (0.000)                                              \nEdges in largest SCC    0 (0.000)                                              \nAverage clustering coefficient  0.0919                                         \nNumber of triangles     7515023                                                \nFraction of closed triangles    0.06714                                        \nDiameter (longest shortest path)    22                                         \n90-percentile effective diameter    9.4                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification    \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International  \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                 \n                                                                               \nHall, B. H., A. B. Jaffe, and M. Trajtenberg (2001). \"The NBER Patent Citation \nData File: Lessons, Insights and Methodological Tools.\" NBER Working Paper     \n8498.  http://papers.nber.org/papers/w8498.pdf                                 \n                                                                               \nFiles                                                                          \nFile    Description                                                            \ncit-Patents.txt.gz  US Patent citation network 1975-1999                       \nNBER Patents    Complete US Patent data (includes time, classification, and    \n                patent invernetor data), at http://www.nber.org/patents/       \n                                                                               \n                                                                               \nNOTE: a similar version this problem already appears in the UF Collection:     \n                                                                               \ncit-Patents         in SNAP         n: 3774768   nz: 16518948              \n                    Pajek/patents   n: same        nz: 14970767              \n                                                                               \n                    Both of these come from the NBER data.  However,           \n                    the edges are not the same.  The SNAP/cit-Patents          \n                    data is a strict superset of the Pajek/patents graph.      \n                    If A0 = Pajek/patents and A1 = SNAP/cit-Patents,           \n                    then nnz(A1-A0) = nnz(A1)-nnz(A0) = 1548181.             \n                    All edges in A0 appear in A1.                              \n                                                                               \n                    The aux data is not the same.  Pajek/patents contains      \n                    more auxiliary data for each node.  This data can be       \n                    used to interpret the SNAP/cit-Patents graph as well,      \n                    since the nodes match up from one graph to the other.      \n                                                                               \n
2295`SNAP`ca-AstroPh`18772`18772`396160`unknown`unknown`unknown`290`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2003`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nAstro Physics collaboration network                                           \n                                                                              \nDataset information                                                           \n                                                                              \nArxiv ASTRO-PH (Astro Physics) collaboration network is from the e-print arXiv\nand covers scientific collaborations between authors papers submitted to Astro\nPhysics category. If an author i co-authored a paper with author j, the graph \ncontains a undirected edge from i to j. If the paper is co-authored by k      \nauthors this generates a completely connected (sub)graph on k nodes.          \n                                                                              \nThe data covers papers in the period from January 1993 to April 2003 (124     \nmonths). It begins within a few months of the inception of the arXiv, and thus\nrepresents essentially the complete history of its ASTRO-PH section.          \n                                                                              \nDataset statistics                                                            \nNodes   18772                                                                 \nEdges   396160                                                                \nNodes in largest WCC    17903 (0.954)                                         \nEdges in largest WCC    394003 (0.995)                                        \nNodes in largest SCC    17903 (0.954)                                         \nEdges in largest SCC    394003 (0.995)                                        \nAverage clustering coefficient  0.6306                                        \nNumber of triangles     1351441                                               \nFraction of closed triangles    0.318                                         \nDiameter (longest shortest path)    14                                        \n90-percentile effective diameter    5.1                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nFiles                                                                         \nFile    Description                                                           \nca-AstroPh.txt.gz   Collaboration network of Arxiv Astro Physics category     \n
2296`SNAP`ca-CondMat`23133`23133`186936`unknown`unknown`unknown`567`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2003`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nCondense Matter collaboration network                                         \n                                                                              \nDataset information                                                           \n                                                                              \nArxiv COND-MAT (Condense Matter Physics) collaboration network is from the    \ne-print arXiv and covers scientific collaborations between authors papers     \nsubmitted to Condense Matter category. If an author i co-authored a paper with\nauthor j, the graph contains a undirected edge from i to j. If the paper is   \nco-authored by k authors this generates a completely connected (sub)graph on k\nnodes.                                                                        \n                                                                              \nThe data covers papers in the period from January 1993 to April 2003 (124     \nmonths). It begins within a few months of the inception of the arXiv, and thus\nrepresents essentially the complete history of its COND-MAT section.          \n                                                                              \nDataset statistics                                                            \nNodes   23133                                                                 \nEdges   186936                                                                \nNodes in largest WCC    21363 (0.923)                                         \nEdges in largest WCC    182628 (0.977)                                        \nNodes in largest SCC    21363 (0.923)                                         \nEdges in largest SCC    182628 (0.977)                                        \nAverage clustering coefficient  0.6334                                        \nNumber of triangles     173361                                                \nFraction of closed triangles    0.2643                                        \nDiameter (longest shortest path)    15                                        \n90-percentile effective diameter    6.6                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nFiles                                                                         \nFile    Description                                                           \nca-CondMat.txt.gz   Collaboration network of Arxiv Condensed Matter category  \n                                                                              \n
2297`SNAP`ca-GrQc`5242`5242`28980`unknown`unknown`unknown`355`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2003`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nGeneral Relativity and Quantum Cosmology collaboration network                 \n                                                                               \nDataset information                                                            \n                                                                               \nArxiv GR-QC (General Relativity and Quantum Cosmology) collaboration network is\nfrom the e-print arXiv and covers scientific collaborations between authors    \npapers submitted to General Relativity and Quantum Cosmology category. If an   \nauthor i co-authored a paper with author j, the graph contains a undirected    \nedge from i to j. If the paper is co-authored by k authors this generates a    \ncompletely connected (sub)graph on k nodes.                                    \n                                                                               \nThe data covers papers in the period from January 1993 to April 2003 (124      \nmonths). It begins within a few months of the inception of the arXiv, and thus \nrepresents essentially the complete history of its GR-QC section.              \n                                                                               \nDataset statistics                                                             \nNodes   5242                                                                   \nEdges   28980                                                                  \nNodes in largest WCC    4158 (0.793)                                           \nEdges in largest WCC    26850 (0.927)                                          \nNodes in largest SCC    4158 (0.793)                                           \nEdges in largest SCC    26850 (0.927)                                          \nAverage clustering coefficient  0.5296                                         \nNumber of triangles     48260                                                  \nFraction of closed triangles    0.6298                                         \nDiameter (longest shortest path)    17                                         \n90-percentile effective diameter    7.6                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and \nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM    \nTKDD), 1(1), 2007.                                                             \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nca-GrQc.txt.gz  Collaboration network of Arxiv General Relativity category     \n
2298`SNAP`ca-HepPh`12008`12008`237010`unknown`unknown`unknown`278`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2003`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nHigh Energy Physics - Phenomenology collaboration network                      \n                                                                               \nDataset information                                                            \n                                                                               \nArxiv HEP-PH (High Energy Physics - Phenomenology) collaboration network is    \nfrom the e-print arXiv and covers scientific collaborations between authors    \npapers submitted to High Energy Physics - Phenomenology category. If an author \ni co-authored a paper with author j, the graph contains a undirected edge from \ni to j. If the paper is co-authored by k authors this generates a completely   \nconnected (sub)graph on k nodes.                                               \n                                                                               \nThe data covers papers in the period from January 1993 to April 2003 (124      \nmonths). It begins within a few months of the inception of the arXiv, and thus \nrepresents essentially the complete history of its HEP-PH section.             \n                                                                               \nDataset statistics                                                             \nNodes   12008                                                                  \nEdges   237010                                                                 \nNodes in largest WCC    11204 (0.933)                                          \nEdges in largest WCC    235268 (0.993)                                         \nNodes in largest SCC    11204 (0.933)                                          \nEdges in largest SCC    235268 (0.993)                                         \nAverage clustering coefficient  0.6115                                         \nNumber of triangles     3358499                                                \nFraction of closed triangles    0.6595                                         \nDiameter (longest shortest path)    13                                         \n90-percentile effective diameter    5.8                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and \nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM    \nTKDD), 1(1), 2007.                                                             \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nca-HepPh.txt.gz     Collaboration network of Arxiv High Energy Physics category\n
2299`SNAP`ca-HepTh`9877`9877`51971`unknown`unknown`unknown`429`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2003`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nHigh Energy Physics - Theory collaboration network                             \n                                                                               \nDataset information                                                            \n                                                                               \nArxiv HEP-TH (High Energy Physics - Theory) collaboration network is from the  \ne-print arXiv and covers scientific collaborations between authors papers      \nsubmitted to High Energy Physics - Theory category. If an author i co-authored \na paper with author j, the graph contains a undirected edge from i to j. If the\npaper is co-authored by k authors this generates a completely connected        \n(sub)graph on k nodes.                                                         \n                                                                               \nThe data covers papers in the period from January 1993 to April 2003 (124      \nmonths). It begins within a few months of the inception of the arXiv, and thus \nrepresents essentially the complete history of its HEP-TH section.             \n                                                                               \nDataset statistics                                                             \nNodes   9877                                                                   \nEdges   51971                                                                  \nNodes in largest WCC    8638 (0.875)                                           \nEdges in largest WCC    49633 (0.955)                                          \nNodes in largest SCC    8638 (0.875)                                           \nEdges in largest SCC    49633 (0.955)                                          \nAverage clustering coefficient  0.4714                                         \nNumber of triangles     28339                                                  \nFraction of closed triangles    0.284                                          \nDiameter (longest shortest path)    17                                         \n90-percentile effective diameter    7.5                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and \nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM    \nTKDD), 1(1), 2007.                                                             \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nca-HepTh.txt.gz     Collaboration network of Arxiv High Energy Physics         \n                     Theory category                                           \n
2300`SNAP`web-BerkStan`685230`685230`7600595`unknown`unknown`unknown`109406`0`25%`25%`binary`unsymmetric`no`no`S. Kamvar`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nBerkeley-Stanford web graph                                                    \n                                                                               \nNOTE:  This is an earlier version (2002) of the data obtained from             \nSep Kamvar, Stanford (2003) (the Kamvar/Stanford_Berkeley graph                \nin the UF collection, matrix ID 980).                                          \n                                                                               \nDataset information                                                            \n                                                                               \nNodes represent pages from berkely.edu and stanford.edu domains and directed   \nedges represent hyperlinks between them. The data was collected in 2002.       \n                                                                               \nDataset statistics                                                             \nNodes   685230                                                                 \nEdges   7600595                                                                \nNodes in largest WCC    654782 (0.956)                                         \nEdges in largest WCC    7499425 (0.987)                                        \nNodes in largest SCC    334857 (0.489)                                         \nEdges in largest SCC    4523232 (0.595)                                        \nAverage clustering coefficient  0.6149                                         \nNumber of triangles     64690980                                               \nFraction of closed triangles    0.08769                                        \nDiameter (longest shortest path)    669                                        \n90-percentile effective diameter    10                                         \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nweb-BerkStan.txt.gz     Berkely-Stanford web graph from 2002                   \n                                                                               \nNOTE: a near duplicate of this problem already appears in the UF Collection:   \n                                                                               \nweb-BerkStan        Kamvar/Stanford_Berkeley                                   \n                    in SNAP/:       n: 685230   nz: 7600595                 \n                    in Kamvar/      n: 683446   nz: 7583376                 \n                                                                               \n                    I obtained the Kamvar/Stanford_Berkeley directly           \n                    from Sep Kamvar.  It is slightly smaller than the          \n                    version in SNAP.  It is thus likely that Sep created       \n                    multiple versions of the graph.                            \n
2301`SNAP`web-Google`916428`916428`5105039`unknown`unknown`unknown`412479`0`31%`31%`binary`unsymmetric`no`no`Google`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nGoogle web graph                                                               \n                                                                               \nDataset information                                                            \n                                                                               \nNodes represent web pages and directed edges represent hyperlinks between them.\nThe data was released in 2002 by Google as a part of Google Programming        \nContest.                                                                       \n                                                                               \nDataset statistics                                                             \nNodes   875713                                                                 \nEdges   5105039                                                                \nNodes in largest WCC    855802 (0.977)                                         \nEdges in largest WCC    5066842 (0.993)                                        \nNodes in largest SCC    434818 (0.497)                                         \nEdges in largest SCC    3419124 (0.670)                                        \nAverage clustering coefficient  0.6047                                         \nNumber of triangles     13391903                                               \nFraction of closed triangles    0.05523                                        \nDiameter (longest shortest path)    22                                         \n90-percentile effective diameter    8.1                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nGoogle programming contest, 2002                                               \nhttp://www.google.com/programming-contest/                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nweb-Google.txt.gz   Webgraph from the Google programming contest, 2002         \n
2302`SNAP`web-NotreDame`325729`325729`1497134`unknown`unknown`unknown`203609`0`52%`52%`binary`unsymmetric`no`no`Albert, Jeong and Barabasi`J. Leskovec`1999`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nNotre Dame web graph                                                          \n                                                                              \nDataset information                                                           \n                                                                              \nNOTE:  see also the version from the Pajek dataset:                           \nBarabasi/NotreDame_www (matrix ID 1510) in the UF Collection.                 \n                                                                              \nNodes represent pages from University of Notre Dame (domain nd.edu) and       \ndirected edges represent hyperlinks between them. The data was collected in   \n1999 by Albert, Jeong and Barabasi.                                           \n                                                                              \nDataset statistics                                                            \nNodes   325729                                                                \nEdges   1497134                                                               \nNodes in largest WCC    325729 (1.000)                                        \nEdges in largest WCC    1497134 (1.000)                                       \nNodes in largest SCC    53968 (0.166)                                         \nEdges in largest SCC    304685 (0.204)                                        \nAverage clustering coefficient  0.4540                                        \nNumber of triangles     8910005                                               \nFraction of closed triangles    0.08767                                       \nDiameter (longest shortest path)    46                                        \n90-percentile effective diameter    9.3                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nR. Albert, H. Jeong, A.-L. Barabasi. Diameter of the World-Wide Web. Nature,  \n1999.                                                                         \n                                                                              \nFiles                                                                         \nFile    Description                                                           \nweb-NotreDame.txt.gz    University of Notre Dame web graph from 1999          \n                                                                              \nNOTE: a similar version of this problem already appears in the UF Collection: \n                                                                              \nweb-NotreDame       Barabasi/NotreDame_www                                    \n                    in SNAP/:       n: 325729   nz: 1497134                \n                    in Barabasi/:   n: same      nz:   929849                \n                                                                              \n                    The Barabasi/NotreDame_www is an exact copy of            \n                    the graph of that name in the Pajek data set.             \n                    The SNAP collection has a different version of this       \n                    graph, of which SNAP/web-NotreDame is an exact copy.      \n                    It is possible that Barabasi's version of the graph is yet\n                    a 3rd version of this graph.                              \n
2303`SNAP`web-Stanford`281903`281903`2312497`unknown`unknown`unknown`29914`0`28%`28%`binary`unsymmetric`no`no`S. Kamvar`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nStanford web graph                                                             \n                                                                               \nNOTE:  see Kamvar/Stanford (matrix ID 979) in the UF Collection                \n                                                                               \nDataset information                                                            \n                                                                               \nNodes represent pages from Stanford University (stanford.edu) and directed     \nedges represent hyperlinks between them. The data was collected in 2002.       \n                                                                               \nDataset statistics                                                             \nNodes   281903                                                                 \nEdges   2312497                                                                \nNodes in largest WCC    255265 (0.906)                                         \nEdges in largest WCC    2234572 (0.966)                                        \nNodes in largest SCC    150532 (0.534)                                         \nEdges in largest SCC    1576314 (0.682)                                        \nAverage clustering coefficient  0.6109                                         \nNumber of triangles     11329473                                               \nFraction of closed triangles    -0.09686                                       \nDiameter (longest shortest path)    740                                        \n90-percentile effective diameter    9.8                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nweb-Stanford.txt.gz     Stanford web graph from 2002                           \n                                                                               \nNOTE: a similar version this problem already appears in the UF Collection:     \n                                                                               \nweb-Stanford        Kamvar/Stanford (same size and nnz)                        \n                                    n: 281903   nz:  2312497                \n                                                                               \n                    The SNAP/web-Stanford graph and the Kamvar/Stanford        \n                    graphs have the same number of nodes and edges.            \n                    However, they differ in nonzero pattern.                   \n
2304`SNAP`amazon0302`262111`262111`1234877`unknown`unknown`unknown`6594`0`54%`54%`binary`unsymmetric`no`no`J. Leskovec, L. Adamic and B. Adamic`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nAmazon product co-purchasing network, March 02 2003                            \n                                                                               \nDataset information                                                            \n                                                                               \nNetwork was collected by crawling Amazon website. It is based on Customers Who \nBought This Item Also Bought feature of the Amazon website. If a product i is  \nfrequently co-purchased with product j, the graph contains a directed edge from\ni to j.                                                                        \n                                                                               \nThe data was collected in March 02 2003.                                       \n                                                                               \nDataset statistics                                                             \nNodes   262111                                                                 \nEdges   1234877                                                                \nNodes in largest WCC    262111 (1.000)                                         \nEdges in largest WCC    1234877 (1.000)                                        \nNodes in largest SCC    241761 (0.922)                                         \nEdges in largest SCC    1131217 (0.916)                                        \nAverage clustering coefficient  0.4240                                         \nNumber of triangles     717719                                                 \nFraction of closed triangles    0.2361                                         \nDiameter (longest shortest path)    29                                         \n90-percentile effective diameter    11                                         \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, L. Adamic and B. Adamic. The Dynamics of Viral Marketing. ACM     \nTransactions on the Web (ACM TWEB), 1(1), 2007.                                \n                                                                               \nFiles                                                                          \nFile    Description                                                            \namazon0302.txt.gz   Amazon product co-purchasing network from March 02 2003    \n
2305`SNAP`amazon0312`400727`400727`3200440`unknown`unknown`unknown`13292`0`53%`53%`binary`unsymmetric`no`no`J. Leskovec, L. Adamic and B. Adamic`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nAmazon product co-purchasing network, March 12 2003                            \n                                                                               \nDataset information                                                            \n                                                                               \nNetwork was collected by crawling Amazon website. It is based on Customers Who \nBought This Item Also Bought feature of the Amazon website. If a product i is  \nfrequently co-purchased with product j, the graph contains a directed edge from\ni to j.                                                                        \n                                                                               \nThe data was collected in March 12 2003.                                       \n                                                                               \nDataset statistics                                                             \nNodes   400727                                                                 \nEdges   3200440                                                                \nNodes in largest WCC    400727 (1.000)                                         \nEdges in largest WCC    3200440 (1.000)                                        \nNodes in largest SCC    380167 (0.949)                                         \nEdges in largest SCC    3069889 (0.959)                                        \nAverage clustering coefficient  0.4113                                         \nNumber of triangles     3686467                                                \nFraction of closed triangles    0.1605                                         \nDiameter (longest shortest path)    18                                         \n90-percentile effective diameter    7.7                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, L. Adamic and B. Adamic. The Dynamics of Viral Marketing. ACM     \nTransactions on the Web (ACM TWEB), 1(1), 2007.                                \n                                                                               \nFiles                                                                          \nFile    Description                                                            \namazon0312.txt.gz   Amazon product co-purchaisng network from March 12 2003    \n
2306`SNAP`amazon0505`410236`410236`3356824`unknown`unknown`unknown`13928`0`55%`55%`binary`unsymmetric`no`no`J. Leskovec, L. Adamic and B. Adamic`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nAmazon product co-purchasing network, May 05 2003                              \n                                                                               \nDataset information                                                            \n                                                                               \nNetwork was collected by crawling Amazon website. It is based on Customers Who \nBought This Item Also Bought feature of the Amazon website. If a product i is  \nfrequently co-purchased with product j, the graph contains a directed edge from\ni to j.                                                                        \n                                                                               \nThe data was collected in May 05 2003.                                         \nDataset statistics                                                             \nNodes   410236                                                                 \nEdges   3356824                                                                \nNodes in largest WCC    410236 (1.000)                                         \nEdges in largest WCC    3356824 (1.000)                                        \nNodes in largest SCC    390304 (0.951)                                         \nEdges in largest SCC    3255816 (0.970)                                        \nAverage clustering coefficient  0.4156                                         \nNumber of triangles     3951063                                                \nFraction of closed triangles    0.1623                                         \nDiameter (longest shortest path)    21                                         \n90-percentile effective diameter    7.6                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, L. Adamic and B. Adamic. The Dynamics of Viral Marketing. ACM     \nTransactions on the Web (ACM TWEB), 1(1), 2007.                                \n                                                                               \nFiles                                                                          \nFile    Description                                                            \namazon0505.txt.gz   Amazon product co-purchaisng network from May 05 2003      \n
2307`SNAP`amazon0601`403394`403394`3387388`unknown`unknown`unknown`1588`0`56%`56%`binary`unsymmetric`no`no`J. Leskovec, L. Adamic and B. Adamic`J. Leskovec`2003`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nAmazon product co-purchasing network, June 01 2003                             \n                                                                               \nDataset information                                                            \n                                                                               \nNetwork was collected by crawling Amazon website. It is based on Customers Who \nBought This Item Also Bought feature of the Amazon website. If a product i is  \nfrequently co-purchased with product j, the graph contains a directed edge from\ni to j.                                                                        \n                                                                               \nThe data was collected in June 01 2003.                                        \nDataset statistics                                                             \nNodes   403394                                                                 \nEdges   3387388                                                                \nNodes in largest WCC    403364 (1.000)                                         \nEdges in largest WCC    3387224 (1.000)                                        \nNodes in largest SCC    395234 (0.980)                                         \nEdges in largest SCC    3301092 (0.975)                                        \nAverage clustering coefficient  0.4179                                         \nNumber of triangles     3986507                                                \nFraction of closed triangles    0.1656                                         \nDiameter (longest shortest path)    21                                         \n90-percentile effective diameter    7.6                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, L. Adamic and B. Adamic. The Dynamics of Viral Marketing. ACM     \nTransactions on the Web (ACM TWEB), 1(1), 2007.                                \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nAmazon0601.txt.gz   Amazon product co-purchaisng network from June 01 2003     \n
2308`SNAP`p2p-Gnutella04`10879`10879`39994`unknown`unknown`unknown`6563`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 4 2002                                  \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   10876                                                                 \nEdges   39994                                                                 \nNodes in largest WCC    10876 (1.000)                                         \nEdges in largest WCC    39994 (1.000)                                         \nNodes in largest SCC    4317 (0.397)                                          \nEdges in largest SCC    18742 (0.469)                                         \nAverage clustering coefficient  0.0080                                        \nNumber of triangles     934                                                   \nFraction of closed triangles    0.005402                                      \nDiameter (longest shortest path)    9                                         \n90-percentile effective diameter    5.4                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella04.txt.gz   Directed Gnutella P2P network from August 4 2002      \n
2309`SNAP`p2p-Gnutella05`8846`8846`31839`unknown`unknown`unknown`5613`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 5 2002                                  \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   8846                                                                  \nEdges   31839                                                                 \nNodes in largest WCC    8842 (1.000)                                          \nEdges in largest WCC    31837 (1.000)                                         \nNodes in largest SCC    3234 (0.366)                                          \nEdges in largest SCC    13453 (0.423)                                         \nAverage clustering coefficient  0.0093                                        \nNumber of triangles     1112                                                  \nFraction of closed triangles    0.007598                                      \nDiameter (longest shortest path)    9                                         \n90-percentile effective diameter    5.3                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella05.txt.gz   Directed Gnutella P2P network from August 5 2002      \n                                                                              \n
2310`SNAP`p2p-Gnutella06`8717`8717`31525`unknown`unknown`unknown`5492`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 6 2002                                  \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   8717                                                                  \nEdges   31525                                                                 \nNodes in largest WCC    8717 (1.000)                                          \nEdges in largest WCC    31525 (1.000)                                         \nNodes in largest SCC    3226 (0.370)                                          \nEdges in largest SCC    13589 (0.431)                                         \nAverage clustering coefficient  0.0086                                        \nNumber of triangles     1142                                                  \nFraction of closed triangles    0.008108                                      \nDiameter (longest shortest path)    9                                         \n90-percentile effective diameter    5.3                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella06.txt.gz   Directed Gnutella P2P network from August 6 2002      \n
2311`SNAP`p2p-Gnutella08`6301`6301`20777`unknown`unknown`unknown`4234`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 8 2002                                  \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   6301                                                                  \nEdges   20777                                                                 \nNodes in largest WCC    6299 (1.000)                                          \nEdges in largest WCC    20776 (1.000)                                         \nNodes in largest SCC    2068 (0.328)                                          \nEdges in largest SCC    9313 (0.448)                                          \nAverage clustering coefficient  0.0150                                        \nNumber of triangles     2383                                                  \nFraction of closed triangles    0.02066                                       \nDiameter (longest shortest path)    9                                         \n90-percentile effective diameter    5.5                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella08.txt.gz   Directed Gnutella P2P network from August 8 2002      \n                                                                              \n
2312`SNAP`p2p-Gnutella09`8114`8114`26013`unknown`unknown`unknown`5491`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 9 2002                                  \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   8114                                                                  \nEdges   26013                                                                 \nNodes in largest WCC    8104 (0.999)                                          \nEdges in largest WCC    26008 (1.000)                                         \nNodes in largest SCC    2624 (0.323)                                          \nEdges in largest SCC    10776 (0.414)                                         \nAverage clustering coefficient  0.0137                                        \nNumber of triangles     2354                                                  \nFraction of closed triangles    0.01717                                       \nDiameter (longest shortest path)    9                                         \n90-percentile effective diameter    5.6                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella09.txt.gz   Directed Gnutella P2P network from August 9 2002      \n                                                                              \n
2313`SNAP`p2p-Gnutella24`26518`26518`65369`unknown`unknown`unknown`20167`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 24 2002                                 \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   26518                                                                 \nEdges   65369                                                                 \nNodes in largest WCC    26498 (0.999)                                         \nEdges in largest WCC    65359 (1.000)                                         \nNodes in largest SCC    6352 (0.240)                                          \nEdges in largest SCC    22928 (0.351)                                         \nAverage clustering coefficient  0.0094                                        \nNumber of triangles     986                                                   \nFraction of closed triangles    0.004101                                      \nDiameter (longest shortest path)    10                                        \n90-percentile effective diameter    6.1                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella24.txt.gz   Directed Gnutella P2P network from August 24 2002     \n
2314`SNAP`p2p-Gnutella25`22687`22687`54705`unknown`unknown`unknown`17535`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 25 2002                                 \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   22687                                                                 \nEdges   54705                                                                 \nNodes in largest WCC    22663 (0.999)                                         \nEdges in largest WCC    54693 (1.000)                                         \nNodes in largest SCC    5153 (0.227)                                          \nEdges in largest SCC    17695 (0.323)                                         \nAverage clustering coefficient  0.0090                                        \nNumber of triangles     806                                                   \nFraction of closed triangles    0.004536                                      \nDiameter (longest shortest path)    11                                        \n90-percentile effective diameter    6.3                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella25.txt.gz   Directed Gnutella P2P network from August 25 2002     \n                                                                              \n
2315`SNAP`p2p-Gnutella30`36682`36682`88328`unknown`unknown`unknown`28193`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 30 2002                                 \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   36682                                                                 \nEdges   88328                                                                 \nNodes in largest WCC    36646 (0.999)                                         \nEdges in largest WCC    88303 (1.000)                                         \nNodes in largest SCC    8490 (0.231)                                          \nEdges in largest SCC    31706 (0.359)                                         \nAverage clustering coefficient  0.0114                                        \nNumber of triangles     1590                                                  \nFraction of closed triangles    0.005164                                      \nDiameter (longest shortest path)    10                                        \n90-percentile effective diameter    6.6                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella30.txt.gz   Directed Gnutella P2P network from August 30 2002     \n
2316`SNAP`p2p-Gnutella31`62586`62586`147892`unknown`unknown`unknown`48438`0`0%`0%`binary`unsymmetric`no`no`M. Ripeanu and I. Foster and A. Iamnitchi`J. Leskovec`2002`directed graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nGnutella peer-to-peer network, August 31 2002                                 \n                                                                              \nDataset information                                                           \n                                                                              \nA sequence of snapshots of the Gnutella peer-to-peer file sharing network from\nAugust 2002. There are total of 9 snapshots of Gnutella network collected in  \nAugust 2002. Nodes represent hosts in the Gnutella network topology and edges \nrepresent connections between the Gnutella hosts.                             \n                                                                              \nDataset statistics                                                            \nNodes   62586                                                                 \nEdges   147892                                                                \nNodes in largest WCC    62561 (1.000)                                         \nEdges in largest WCC    147878 (1.000)                                        \nNodes in largest SCC    14149 (0.226)                                         \nEdges in largest SCC    50916 (0.344)                                         \nAverage clustering coefficient  0.0101                                        \nNumber of triangles     2024                                                  \nFraction of closed triangles    0.003872                                      \nDiameter (longest shortest path)    11                                        \n90-percentile effective diameter    6.7                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graph Evolution: Densification and\nShrinking Diameters. ACM Transactions on Knowledge Discovery from Data (ACM   \nTKDD), 1(1), 2007.                                                            \n                                                                              \nM. Ripeanu and I. Foster and A. Iamnitchi. Mapping the Gnutella Network:      \nProperties of Large-Scale Peer-to-Peer Systems and Implications for System    \nDesign. IEEE Internet Computing Journal, 2002.                                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \np2p-Gnutella31.txt.gz   Directed Gnutella P2P network from August 31 2002     \n
2317`SNAP`roadNet-CA`1971281`1971281`5533214`unknown`unknown`unknown`8713`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, K. Lang, A. Dasgupta, M. Mahoney`J. Leskovec`2008`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nCalifornia road network                                                        \n                                                                               \nDataset information                                                            \n                                                                               \nA road network of California. Intersections and endpoints are represented by   \nnodes and the roads connecting these intersections or road endpoints are       \nrepresented by undirected edges.                                               \n                                                                               \nDataset statistics                                                             \nNodes   1965206                                                                \nEdges   5533214                                                                \nNodes in largest WCC    1957027 (0.996)                                        \nEdges in largest WCC    5520776 (0.998)                                        \nNodes in largest SCC    1957027 (0.996)                                        \nEdges in largest SCC    5520776 (0.998)                                        \nAverage clustering coefficient  0.0464                                         \nNumber of triangles     120676                                                 \nFraction of closed triangles    0.06039                                        \nDiameter (longest shortest path)    850                                        \n90-percentile effective diameter    5e+002                                     \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nroadNet-CA.txt.gz   California road network                                    \n
2318`SNAP`roadNet-PA`1090920`1090920`3083796`unknown`unknown`unknown`3034`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, K. Lang, A. Dasgupta, M. Mahoney`J. Leskovec`2008`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nPennsylvania road network                                                      \n                                                                               \nDataset information                                                            \n                                                                               \nThis is a road network of Pennsylvania. Intersections and endpoints are        \nrepresented by nodes, and the roads connecting these intersections or endpoints\nare represented by undirected edges.                                           \n                                                                               \nDataset statistics                                                             \nNodes   1088092                                                                \nEdges   3083796                                                                \nNodes in largest WCC    1087562 (1.000)                                        \nEdges in largest WCC    3083028 (1.000)                                        \nNodes in largest SCC    1087562 (1.000)                                        \nEdges in largest SCC    3083028 (1.000)                                        \nAverage clustering coefficient  0.0465                                         \nNumber of triangles     67150                                                  \nFraction of closed triangles    0.05941                                        \nDiameter (longest shortest path)    782                                        \n90-percentile effective diameter    5.3e+002                                   \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nroadNet-PA.txt.gz   Pennsylvania road network                                  \n
2319`SNAP`roadNet-TX`1393383`1393383`3843320`unknown`unknown`unknown`13890`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, K. Lang, A. Dasgupta, M. Mahoney`J. Leskovec`2008`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nTexas road network                                                             \n                                                                               \nDataset information                                                            \n                                                                               \nThis is a road network of Texas. Intersections and endpoints are represented by\nnodes, and the roads connecting these intersections or endpoints are           \nrepresented by undirected edges.                                               \n                                                                               \nDataset statistics                                                             \nNodes   1379917                                                                \nEdges   3843320                                                                \nNodes in largest WCC    1351137 (0.979)                                        \nEdges in largest WCC    3758402 (0.978)                                        \nNodes in largest SCC    1351137 (0.979)                                        \nEdges in largest SCC    3758402 (0.978)                                        \nAverage clustering coefficient  0.0470                                         \nNumber of triangles     82869                                                  \nFraction of closed triangles    0.06022                                        \nDiameter (longest shortest path)    1049                                       \n90-percentile effective diameter    6.7e+002                                   \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, K. Lang, A. Dasgupta, M. Mahoney. Community Structure in Large    \nNetworks: Natural Cluster Sizes and the Absence of Large Well-Defined Clusters.\narXiv.org:0810.1355, 2008.                                                     \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nroadNet-TX.txt.gz   Texas road network                                         \n                                                                               \n
2320`SNAP`as-735`7716`7716`26467`unknown`unknown`unknown`1243`0`symmetric`symmetric`binary`symmetric`no`no`D. Meyer`J. Leskovec`2000`undirected graph sequence`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nAutonomous systems AS-735                                                     \n                                                                              \nDataset information                                                           \n                                                                              \nThe graph of routers comprising the Internet can be organized into sub-graphs \ncalled Autonomous Systems (AS). Each AS exchanges traffic flows with some     \nneighbors (peers). We can construct a communication network of who-talks-to-  \nwhom from the BGP (Border Gateway Protocol) logs.                             \n                                                                              \nThe data was collected from University of Oregon Route Views Project          \n(http://www.routeviews.org/) - Online data and reports. The dataset contains  \n735 daily instances which span an interval of 785 days from November 8 1997 to\nJanuary 2 2000. In contrast to citation networks, where nodes and edges only  \nget added (not deleted) over time, the AS dataset also exhibits both the      \naddition and deletion of the nodes and edges over time.                       \n                                                                              \nDataset statistics are calculated for the graph with the highest number of    \nnodes and edges (dataset from January 02 2000):                               \n                                                                              \nDataset statistics                                                            \nNodes   6474                                                                  \nEdges   13233                                                                 \nNodes in largest WCC    6474 (1.000)                                          \nEdges in largest WCC    13233 (1.000)                                         \nNodes in largest SCC    6474 (1.000)                                          \nEdges in largest SCC    13233 (1.000)                                         \nAverage clustering coefficient  0.3913                                        \nNumber of triangles     6584                                                  \nFraction of closed triangles    0.009591                                      \nDiameter (longest shortest path)    9                                         \n90-percentile effective diameter    4.6                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification   \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                \n                                                                              \n                                                                              \nFiles                                                                         \nFile    Description                                                           \nas20000102.txt.gz   Autonomous Systems graph from January 02 2000             \nas.tar.gz   735 Autonomous Systems graphs from November 8 1997 to             \n             January 02 2000                                                  \n                                                                              \nNOTE:  In the UF collection, the primary matrix (Problem.A) is the            \nas20000102 matrix from January 02 2000 (the last graph in the sequence).      \n                                                                              \nThe nodes are uniform across all graphs in the sequence in the UF collection. \nThat is, nodes do not come and go.  A node that is \"gone\" simply has no edges.\nThis is to allow comparisons across each node in the graphs.                  \nProblem.aux.nodenames gives the node numbers of the original problem.  So     \nrow/column i in the matrix is always node number Problem.aux.nodenames(i) in  \nall the graphs.                                                               \n                                                                              \nProblem.aux.G{k} is the kth graph in the sequence.                            \nProblem.aux.Gname(k,:) is the name of the kth graph.                          \n
2321`SNAP`as-Skitter`1696415`1696415`22190596`unknown`unknown`unknown`756`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2005`undirected graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nAutonomous systems by Skitter                                                 \n                                                                              \nDataset information                                                           \n                                                                              \nInternet topology graph. From traceroutes run daily in 2005 -                 \nhttp://www.caida.org/tools/measurement/skitter. From several scattered sources\nto million destinations. 1.7 million nodes, 11 million edges.                 \n                                                                              \nDataset statistics                                                            \nNodes   1696415                                                               \nEdges   11095298                                                              \nNodes in largest WCC    1694616 (0.999)                                       \nEdges in largest WCC    11094209 (1.000)                                      \nNodes in largest SCC    1694616 (0.999)                                       \nEdges in largest SCC    11094209 (1.000)                                      \nAverage clustering coefficient  0.2963                                        \nNumber of triangles     28769868                                              \nFraction of closed triangles    0.005387                                      \nDiameter (longest shortest path)    25                                        \n90-percentile effective diameter    5.9                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification   \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                \n                                                                              \nFiles                                                                         \nFile    Description                                                           \nas-skitter.txt.gz   AS from traceroutes run daily in 2005 by skitter          \n
2322`SNAP`as-caida`31379`31379`106762`unknown`unknown`unknown`4905`0`symmetric`8%`integer`unsymmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2007`directed weighted graph sequence`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nCAIDA AS Relationships Datasets                                                \nDataset information                                                            \n                                                                               \nThe dataset contains 122 CAIDA AS graphs, from January 2004 to November 2007 - \nhttp://www.caida.org/data/active/as-relationships/ .  Each file contains a full\nAS graph derived from a set of RouteViews BGP table snapshots.                 \n                                                                               \nDataset statistics are calculated for the graph with the highest number of     \nnodes - dataset from November 5 2007.  Dataset statistics for graph with       \nhighest number of nodes - 11 5 2007                                            \n                                                                               \nNodes   26475                                                                  \nEdges   106762                                                                 \nNodes in largest WCC    26475 (1.000)                                          \nEdges in largest WCC    106762 (1.000)                                         \nNodes in largest SCC    26475 (1.000)                                          \nEdges in largest SCC    106762 (1.000)                                         \nAverage clustering coefficient  0.2082                                         \nNumber of triangles     36365                                                  \nFraction of closed triangles    0.007319                                       \nDiameter (longest shortest path)    17                                         \n90-percentile effective diameter    4.6                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification    \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International  \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                 \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nas-caida20071105.txt.gz     CAIDA AS graph from November 5 2007                \nas-caida.tar.gz     122 CAIDA AS graphs from January 2004 to November 2007     \n                                                                               \n                                                                               \nNOTE for UF Sparse Matrix Collection: these graphs are weighted.  In the       \noriginal SNAP data set, the edge weights are in the set {-1, 0, 1, 2}.  Note   \nthat \"0\" is an edge weight.  This can be handled in the UF collection for the  \nprimary sparse matrix in a Problem, but not when the matrices are in a sequence\nin the Problem.aux MATLAB struct.  The entries with zero edge weight would     \nbecome lost.  To correct for this, the weights are modified by adding 2 to each\nweight.  This preserves the structure of the original graphs, so that edges    \nwith weight zero are not lost.  (A non-edge is not the same as an edge with    \nweight zero in this problem).                                                  \n                                                                               \n    old new weights:                                                           \n    -1  1                                                                      \n    0   2                                                                      \n    1   3                                                                      \n    2   4                                                                      \n                                                                               \nSo to obtain the original weights, subtract 2 from each entry.                 \n                                                                               \nThe primary sparse matrix for this problem is the as-caida20071105 matrix, or  \nProblem.aux.G{121}, the second-to-the-last graph in the sequence.              \n                                                                               \nThe nodes are uniform across all graphs in the sequence in the UF collection.  \nThat is, nodes do not come and go.  A node that is \"gone\" simply has no edges. \nThis is to allow comparisons across each node in the graphs.                   \nProblem.aux.nodenames gives the node numbers of the original problem.  So      \nrow/column i in the matrix is always node number Problem.aux.nodenames(i) in   \nall the graphs.                                                                \n                                                                               \nProblem.aux.G{k} is the kth graph in the sequence.                             \nProblem.aux.Gname(k,:) is the name of the kth graph.                           \n
2323`SNAP`Oregon-1`11492`11492`46818`unknown`unknown`unknown`319`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2001`undirected graph sequence`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nAutonomous systems - Oregon-1                                                  \n                                                                               \nDataset information                                                            \n                                                                               \n9 graphs of Autonomous Systems (AS) peering information inferred from Oregon   \nroute-views between March 31 2001 and May 26 2001.                             \n                                                                               \nDataset statistics are calculated for the graph with the lowest (March 31 2001)\nand highest (from May 26 2001) number of nodes: Dataset statistics for graph   \nwitdh lowest number of nodes - 3 31 2001)                                      \n                                                                               \nNodes   10670                                                                  \nEdges   22002                                                                  \nNodes in largest WCC    10670 (1.000)                                          \nEdges in largest WCC    22002 (1.000)                                          \nNodes in largest SCC    10670 (1.000)                                          \nEdges in largest SCC    22002 (1.000)                                          \nAverage clustering coefficient  0.4559                                         \nNumber of triangles     17144                                                  \nFraction of closed triangles    0.009306                                       \nDiameter (longest shortest path)    9                                          \n90-percentile effective diameter    4.5                                        \n                                                                               \nDataset statistics for graph with highest number of nodes - 5 26 2001          \n                                                                               \nNodes   11174                                                                  \nEdges   23409                                                                  \nNodes in largest WCC    11174 (1.000)                                          \nEdges in largest WCC    23409 (1.000)                                          \nNodes in largest SCC    11174 (1.000)                                          \nEdges in largest SCC    23409 (1.000)                                          \nAverage clustering coefficient  0.4532                                         \nNumber of triangles     19894                                                  \nFraction of closed triangles    0.009636                                       \nDiameter (longest shortest path)    10                                         \n90-percentile effective diameter    4.4                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification    \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International  \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                 \n                                                                               \nFiles                                                                          \nFile    Description                                                            \n*        AS peering information inferred from Oregon route-views ...           \noregon1_010331.txt.gz   from March 31 2001                                     \noregon1_010407.txt.gz   from April 7 2001                                      \noregon1_010414.txt.gz   from April 14 2001                                     \noregon1_010421.txt.gz   from April 21 2001                                     \noregon1_010428.txt.gz   from April 28 2001                                     \noregon1_010505.txt.gz   from May 05 2001                                       \noregon1_010512.txt.gz   from May 12 2001                                       \noregon1_010519.txt.gz   from May 19 2001                                       \noregon1_010526.txt.gz   from May 26 2001                                       \n                                                                               \nNOTE: for the UF Sparse Matrix Collection, the primary matrix in this problem  \nset (Problem.A) is the last matrix in the sequence, oregon1_010526, from May 26\n2001.                                                                          \n                                                                               \nThe nodes are uniform across all graphs in the sequence in the UF collection.  \nThat is, nodes do not come and go.  A node that is \"gone\" simply has no edges. \nThis is to allow comparisons across each node in the graphs.                   \nProblem.aux.nodenames gives the node numbers of the original problem.  So      \nrow/column i in the matrix is always node number Problem.aux.nodenames(i) in   \nall the graphs.                                                                \n                                                                               \nProblem.aux.G{k} is the kth graph in the sequence.                             \nProblem.aux.Gname(k,:) is the name of the kth graph.                           \n
2324`SNAP`Oregon-2`11806`11806`65460`unknown`unknown`unknown`346`0`symmetric`symmetric`binary`symmetric`no`no`J. Leskovec, J. Kleinberg and C. Faloutsos`J. Leskovec`2001`undirected graph sequence`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nAutonomous systems - Oregon-2                                                  \n                                                                               \nDataset information                                                            \n                                                                               \n9 Autonomous systems graphs, 1 per week between March 31 2001 and May 26 2001. \nGraphs represent AS peering information inferred from Oregon route-views,      \nLooking glass data, and Routing registry, all combined.                        \n                                                                               \nDataset statistics are calculated for the graph with the lowest (March 31 2001)\nand highest (from May 26 2001) number of nodes:                                \n                                                                               \nDataset statistics for graph with lowest number of nodes - 3 31 2001           \n                                                                               \nNodes   10900                                                                  \nEdges   31180                                                                  \nNodes in largest WCC    10900 (1.000)                                          \nEdges in largest WCC    31180 (1.000)                                          \nNodes in largest SCC    10900 (1.000)                                          \nEdges in largest SCC    31180 (1.000)                                          \nAverage clustering coefficient  0.5009                                         \nNumber of triangles     82856                                                  \nFraction of closed triangles    0.03855                                        \nDiameter (longest shortest path)    9                                          \n90-percentile effective diameter    4.3                                        \n                                                                               \nDataset statistics for graph with highest number of nodes - 5 26 2001          \n                                                                               \nNodes   11461                                                                  \nEdges   32730                                                                  \nNodes in largest WCC    11461 (1.000)                                          \nEdges in largest WCC    32730 (1.000)                                          \nNodes in largest SCC    11461 (1.000)                                          \nEdges in largest SCC    32730 (1.000)                                          \nAverage clustering coefficient  0.4943                                         \nNumber of triangles     89541                                                  \nFraction of closed triangles    0.03701                                        \nDiameter (longest shortest path)    9                                          \n90-percentile effective diameter    4.3                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, J. Kleinberg and C. Faloutsos. Graphs over Time: Densification    \nLaws, Shrinking Diameters and Possible Explanations. ACM SIGKDD International  \nConference on Knowledge Discovery and Data Mining (KDD), 2005.                 \n                                                                               \nFiles                                                                          \nFile    Description                                                            \n        AS peering information inferred from Oregon route-views, Looking glass \n        data, and Routing registry,  ...                                       \noregon2_010331.txt.gz from March 31 2001                                       \noregon2_010407.txt.gz from April 7 2001                                        \noregon2_010414.txt.gz from April 14 2001                                       \noregon2_010421.txt.gz from April 21 2001                                       \noregon2_010428.txt.gz from April 28 2001                                       \noregon2_010505.txt.gz from May 05 2001                                         \noregon2_010512.txt.gz from May 12 2001                                         \noregon2_010519.txt.gz from May 19 2001                                         \noregon2_010526.txt.gz from May 26 2001                                         \n                                                                               \nNOTE: for the UF Sparse Matrix Collection, the primary matrix in this problem  \nset (Problem.A) is the last matrix in the sequence, oregon2_010526, from May 26\n2001.                                                                          \n                                                                               \nThe nodes are uniform across all graphs in the sequence in the UF collection.  \nThat is, nodes do not come and go.  A node that is \"gone\" simply has no edges. \nThis is to allow comparisons across each node in the graphs.                   \nProblem.aux.nodenames gives the node numbers of the original problem.  So      \nrow/column i in the matrix is always node number Problem.aux.nodenames(i) in   \nall the graphs.                                                                \n                                                                               \nProblem.aux.G{k} is the kth graph in the sequence.                             \nProblem.aux.Gname(k,:) is the name of the kth graph.                           \n
2325`SNAP`soc-sign-epinions`131828`131828`841372`unknown`unknown`unknown`88609`0`31%`30%`integer`unsymmetric`no`no`J. Leskovec, D. Huttenlocher, J. Kleinberg`J. Leskovec`2010`directed weighted graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,    \nJure Leskovec http://snap.stanford.edu/data/index.html                        \nemail jure at cs.stanford.edu                                                 \n                                                                              \nEpinions social network                                                       \n                                                                              \nDataset information                                                           \n                                                                              \nThis is who-trust-whom online social network of a a general consumer review   \nsite Epinions.com. Members of the site can decide whether to ''trust'' each   \nother. All the trust relationships interact and form the Web of Trust which is\nthen combined with review ratings to determine which reviews are shown to the \nuser.                                                                         \n                                                                              \nDataset statistics                                                            \n                                                                              \nNodes   131828                                                                \nEdges   841372                                                                \nNodes in largest WCC    119130 (0.904)                                        \nEdges in largest WCC    833695 (0.991)                                        \nNodes in largest SCC    41441 (0.314)                                         \nEdges in largest SCC    693737 (0.825)                                        \nAverage clustering coefficient  0.2424                                        \nNumber of triangles     4910076                                               \nFraction of closed triangles    0.08085                                       \nDiameter (longest shortest path)    14                                        \n90-percentile effective diameter    4.9                                       \n                                                                              \nSource (citation)                                                             \n                                                                              \nJ. Leskovec, D. Huttenlocher, J. Kleinberg: Signed Networks in Social Media.  \n28th ACM Conference on Human Factors in Computing Systems (CHI), 2010.        \nhttp://cs.stanford.edu/people/jure/pubs/triads-chi10.pdf                      \n                                                                              \nFiles                                                                         \nFile    Description                                                           \nsoc-sign-epinions.txt.gz    Directed Epinions signed social network           \n
2326`SNAP`soc-sign-Slashdot081106`77357`77357`516575`unknown`unknown`unknown`49216`0`19%`18%`integer`unsymmetric`no`no`J. Leskovec, D. Huttenlocher, J. Kleinberg`J. Leskovec`2008`directed weighted graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nSlashdot signed social network, November 2008                                  \n                                                                               \nDataset information                                                            \n                                                                               \nSlashdot is a technology-related news website know for its specific user       \ncommunity. The website features user-submitted and editor-evaluated current    \nprimarily technology oriented news. In 2002 Slashdot introduced the Slashdot   \nZoo feature which allows users to tag each other as friends or foes. The       \nnetwork cotains friend/foe links between the users of Slashdot. The network was\nobtained in November 2008.                                                     \n                                                                               \nDataset statistics                                                             \nNodes   77357                                                                  \nEdges   516575                                                                 \nNodes in largest WCC    77350 (1.000)                                          \nEdges in largest WCC    516575 (1.000)                                         \nNodes in largest SCC    26996 (0.349)                                          \nEdges in largest SCC    337351 (0.653)                                         \nAverage clustering coefficient  0.0820                                         \nNumber of triangles     548054                                                 \nFraction of closed triangles    0.02407                                        \nDiameter (longest shortest path)    10                                         \n90-percentile effective diameter    4.7                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg: Signed Networks in Social Media.   \n28th ACM Conference on Human Factors in Computing Systems (CHI), 2010.         \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nsoc-sign-Slashdot081106.txt.gz                                                 \n        Slashdot Zoo signed social network from November 6 2008                \n
2327`SNAP`soc-sign-Slashdot090216`81871`81871`545671`unknown`unknown`unknown`53482`0`18%`17%`integer`unsymmetric`no`no`J. Leskovec, D. Huttenlocher, J. Kleinberg`J. Leskovec`2009`directed weighted graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nSlashdot social network, February 2009                                         \n                                                                               \nDataset information                                                            \n                                                                               \nSlashdot is a technology-related news website know for its specific user       \ncommunity. The website features user-submitted and editor-evaluated current    \nprimarily technology oriented news. In 2002 Slashdot introduced the Slashdot   \nZoo feature which allows users to tag each other as friends or foes. The       \nnetwork cotains friend/foe links between the users of Slashdot. The network was\nobtained in February 2009.                                                     \n                                                                               \nDataset statistics                                                             \nNodes   81871                                                                  \nEdges   545671                                                                 \nNodes in largest WCC    81867 (1.000)                                          \nEdges in largest WCC    545671 (1.000)                                         \nNodes in largest SCC    27222 (0.332)                                          \nEdges in largest SCC    342747 (0.628)                                         \nAverage clustering coefficient  0.0859                                         \nNumber of triangles     570569                                                 \nFraction of closed triangles    0.02351                                        \nDiameter (longest shortest path)    11                                         \n90-percentile effective diameter    4.7                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg: Signed Networks in Social Media.   \n28th ACM Conference on Human Factors in Computing Systems (CHI), 2010.         \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nsoc-sign-Slashdot090216.txt.gz                                                 \n        Slashdot Zoo signed social network from February 16 2009               \n
2328`SNAP`soc-sign-Slashdot090221`82144`82144`549202`unknown`unknown`unknown`53603`0`18%`17%`integer`unsymmetric`no`no`J. Leskovec, D. Huttenlocher, J. Kleinberg`J. Leskovec`2009`directed weighted graph`\nNetworks from SNAP (Stanford Network Analysis Platform) Network Data Sets,     \nJure Leskovec http://snap.stanford.edu/data/index.html                         \nemail jure at cs.stanford.edu                                                  \n                                                                               \nSlashdot social network, February 2009                                         \n                                                                               \nDataset information                                                            \n                                                                               \nSlashdot is a technology-related news website know for its specific user       \ncommunity. The website features user-submitted and editor-evaluated current    \nprimarily technology oriented news. In 2002 Slashdot introduced the Slashdot   \nZoo feature which allows users to tag each other as friends or foes. The       \nnetwork cotains friend/foe links between the users of Slashdot. The network was\nobtained in February 2009.                                                     \n                                                                               \nDataset statistics                                                             \nNodes   82144                                                                  \nEdges   549202                                                                 \nNodes in largest WCC    82140 (1.000)                                          \nEdges in largest WCC    549202 (1.000)                                         \nNodes in largest SCC    27382 (0.333)                                          \nEdges in largest SCC    346652 (0.631)                                         \nAverage clustering coefficient  0.0863                                         \nNumber of triangles     579565                                                 \nFraction of closed triangles    0.02362                                        \nDiameter (longest shortest path)    11                                         \n90-percentile effective diameter    4.7                                        \n                                                                               \nSource (citation)                                                              \n                                                                               \nJ. Leskovec, D. Huttenlocher, J. Kleinberg: Signed Networks in Social Media.   \n28th ACM Conference on Human Factors in Computing Systems (CHI), 2010.         \n                                                                               \nFiles                                                                          \nFile    Description                                                            \nsoc-sign-Slashdot090221.txt.gz                                                 \n        Slashdot Zoo signed social network from February 21 2009               \n
2329`Dziekonski`gsm_106857`589446`589446`21758924`yes`589446`1`1`0`symmetric`symmetric`real`symmetric`no`no`A. Dziekonski, A. Lamecki, M. Mrozowski`T. Davis`2010`electromagnetics problem`\nHigh order vector finite element method in electromagnetics     \n                                                                \nThe matrices came from analysis of a 9-th order microwave       \ncombline filter with second order (LT\QN) vector finite elements\nwith different mesh quality. The matrices were used as an       \nexample in our paper [1].                                       \n                                                                \ngsm_106857 - real symmetric matrix (589446 x 589446) and        \n    21758924 nonzero elements. First 98577 unknowns corresponds \n    to lowest level (CT\LN) base functions.                     \n                                                                \nAll matrices are sparse and come with right-hand-sides.         \n                                                                \n[1] GPU Acceleration of Multilevel Solvers for Analysis of      \nMicrowave Components with Finite Element Method, A. Dziekonski, \nA. Lamecki, A., and M. Mrozowski, M., IEEE Microwave and        \nWireless Components Letters, vol 20, number 12,                 \nDec 2010.  http://dx.doi.org/10.1109/LMWC.2010.2089974          \n
2330`Gleich`flickr`820878`820878`9837214`unknown`unknown`unknown`277277`0`65%`65%`binary`unsymmetric`no`no`D. Gleich`T. Davis`2010`directed graph`\nnode names available upon request from David F. Gleich\n
2331`Gleich`minnesota`2642`2642`6606`unknown`unknown`unknown`2`0`symmetric`symmetric`binary`symmetric`no`no`D. Gleich`T. Davis`2010`undirected graph`
2332`Gleich`usroads-48`126146`126146`323900`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`D. Gleich`T. Davis`2010`undirected graph`
2333`Gleich`usroads`129164`129164`330870`unknown`unknown`unknown`56`0`symmetric`symmetric`binary`symmetric`no`no`D. Gleich`T. Davis`2010`undirected graph`
2334`Fluorem`DK01R`903`903`11766`yes`903`8`8`0`96%`0%`real`unsymmetric`no`no`F. Pacull`T. Davis`2010`computational fluid dynamics problem`\nCFD matrices from Francois Pacull, FLUOREM, in Lyon, France        \n                                                                   \nWe are dealing with CFD and more precisely steady flow             \nparametrization. The equations involved are the compressible       \nNavier-Stokes ones (RANS).  These matrices are real, square and    \nindefinite, they correspond to the Jacobian with respect the       \nconservative fluid variables of the discretized governing          \nequations (finite-volume discretization). Thus they have a         \nblock structure (corresponding to the mesh nodes: the block        \nsize is the number of variables per mesh node), they are not       \nsymmetric (however, their blockwise structure has a high level     \nof symmetry) and they often show some kind of hyperbolic           \nbehavior. They have not been scaled or reordered.                  \n                                                                   \nThey are generated through automatic differentiation of the        \nflow solver around a steady state. A right hand-side is also       \ngiven for each matrix: this represents the derivative of the       \nequations with respect to a parameter (of operation or shape).     \nSince they are generated automatically, they may have \"silent\"     \nvariables: these are variables corresponding to an identity        \nsubmatrix associated with a null right hand-side, for example      \none of the three velocity components in a 2D case, or the          \nturbulent variables in a \"frozen\" turbulence case.                 \n                                                                   \nWe believe that these matrices are good test cases when            \nstudying preconditioning methods for iterative methods, such as    \nblock incomplete factorization, or when studying domain            \ndecomposition methods or deflation. They are actually being        \nstudied by a few researchers in France regarding numerical         \nmethods, through the LIBRAERO research project of the ANR (national\nresearch agency): ANR-07-TLOG-011.                                 \n                                                                   \nFrancois Pacull, Lyon, France.  fpacull at fluorem.com             \n                                                                   \nSpecific problem descriptions:                                     \n    DK01R: 1D turbulent case                                       \n    number of mesh nodes: 129                                      \n    block size: 7                                                  \n    variables: [rho,rho*u,rho*v,rho*w,rho*E,rho*k,rho*omega]       \n    (rho v and rho w are \"silent\", the third and fourth rows       \n    and columns                                                    \n    in each block can be removed)                                  \n    matrix order: 903                                              \n    nnz: 11758                                                     \n    comments: The DK01R matrix corresponds to a small 1D turbulent \n    case. The grid has 129 nodes, non-uniformly spaced             \n    (geometrical distribution). The number of unknowns per node is \n    7, leading to a linear system of 903 real algebraic equations. \n    The 1D discretization of the partial differential equations    \n    uses a 5 points stencil, leading to a block penta-diagonal     \n    matrix, each block having size 7 by 7. Each diagonal block is  \n    related to two up- and two down-stream neighboring nodes,      \n    corresponding respectively to the 14 upper and 14 lower matrix \n    rows, the node ordering being coherent with the 1D spatial     \n    node distribution. The stationary flow on which the matrix is  \n    based on is dominated by advection, characterized by a Mach    \n    number around 0.3.                                             \n
2335`Fluorem`GT01R`7980`7980`430909`yes`7980`4`4`0`88%`0%`real`unsymmetric`no`no`F. Pacull`T. Davis`2010`computational fluid dynamics problem`\nCFD matrices from Francois Pacull, FLUOREM, in Lyon, France        \n                                                                   \nWe are dealing with CFD and more precisely steady flow             \nparametrization. The equations involved are the compressible       \nNavier-Stokes ones (RANS).  These matrices are real, square and    \nindefinite, they correspond to the Jacobian with respect the       \nconservative fluid variables of the discretized governing          \nequations (finite-volume discretization). Thus they have a         \nblock structure (corresponding to the mesh nodes: the block        \nsize is the number of variables per mesh node), they are not       \nsymmetric (however, their blockwise structure has a high level     \nof symmetry) and they often show some kind of hyperbolic           \nbehavior. They have not been scaled or reordered.                  \n                                                                   \nThey are generated through automatic differentiation of the        \nflow solver around a steady state. A right hand-side is also       \ngiven for each matrix: this represents the derivative of the       \nequations with respect to a parameter (of operation or shape).     \nSince they are generated automatically, they may have \"silent\"     \nvariables: these are variables corresponding to an identity        \nsubmatrix associated with a null right hand-side, for example      \none of the three velocity components in a 2D case, or the          \nturbulent variables in a \"frozen\" turbulence case.                 \n                                                                   \nWe believe that these matrices are good test cases when            \nstudying preconditioning methods for iterative methods, such as    \nblock incomplete factorization, or when studying domain            \ndecomposition methods or deflation. They are actually being        \nstudied by a few researchers in France regarding numerical         \nmethods, through the LIBRAERO research project of the ANR (national\nresearch agency): ANR-07-TLOG-011.                                 \n                                                                   \nFrancois Pacull, Lyon, France.  fpacull at fluorem.com             \n                                                                   \nSpecific problem descriptions:                                     \n    GT01R: 2D inviscid case                                        \n    number of mesh nodes: 1596                                     \n    block size: 5                                                  \n    variables: [rho,rho*u,rho*v,rho*w,rho*E]                       \n    (rho w is \"silent\", the fourth row and column in each          \n    block can be removed)                                          \n    matrix order: 7980                                             \n    nnz: 430909                                                    \n    comments: This is a 2D linear cascade turbine case. The grid   \n    corresponds to one inter-blade channel. The stencil involved   \n    by the convective scheme uses 9 nodes. Thus, there are 9       \n    non-zero blocks for each node in the matrix. The specificity   \n    is that the computational domain is periodic, which introduces \n    some non-zeros elements far away from the diagonal.            \n
2336`Fluorem`PR02R`161070`161070`8185136`yes`161070`457`457`0`95%`0%`real`unsymmetric`no`no`F. Pacull`T. Davis`2010`computational fluid dynamics problem`\nCFD matrices from Francois Pacull, FLUOREM, in Lyon, France        \n                                                                   \nWe are dealing with CFD and more precisely steady flow             \nparametrization. The equations involved are the compressible       \nNavier-Stokes ones (RANS).  These matrices are real, square and    \nindefinite, they correspond to the Jacobian with respect the       \nconservative fluid variables of the discretized governing          \nequations (finite-volume discretization). Thus they have a         \nblock structure (corresponding to the mesh nodes: the block        \nsize is the number of variables per mesh node), they are not       \nsymmetric (however, their blockwise structure has a high level     \nof symmetry) and they often show some kind of hyperbolic           \nbehavior. They have not been scaled or reordered.                  \n                                                                   \nThey are generated through automatic differentiation of the        \nflow solver around a steady state. A right hand-side is also       \ngiven for each matrix: this represents the derivative of the       \nequations with respect to a parameter (of operation or shape).     \nSince they are generated automatically, they may have \"silent\"     \nvariables: these are variables corresponding to an identity        \nsubmatrix associated with a null right hand-side, for example      \none of the three velocity components in a 2D case, or the          \nturbulent variables in a \"frozen\" turbulence case.                 \n                                                                   \nWe believe that these matrices are good test cases when            \nstudying preconditioning methods for iterative methods, such as    \nblock incomplete factorization, or when studying domain            \ndecomposition methods or deflation. They are actually being        \nstudied by a few researchers in France regarding numerical         \nmethods, through the LIBRAERO research project of the ANR (national\nresearch agency): ANR-07-TLOG-011.                                 \n                                                                   \nFrancois Pacull, Lyon, France.  fpacull at fluorem.com             \n                                                                   \nSpecific problem descriptions:                                     \n    PR02R: 2D turbulent case                                       \n    number of mesh nodes: 23010                                    \n    block size: 7                                                  \n    variables: [rho,rho*u,rho*v,rho*w,rho*E,rho*k,rho*omega]       \n    (rho v is \"silent\", the third row and column in each block     \n    can be removed)                                                \n    matrix order: 161070                                           \n    nnz: 8185136                                                   \n    comments: This is a 2D turbulent case, dominated by            \n    convection. The geometry is a RAE wing profile and the mesh    \n    is C-shaped.                                                   \n
2337`Fluorem`RM07R`381689`381689`37464962`yes`381689`109055`109055`0`93%`0%`real`unsymmetric`no`no`F. Pacull`T. Davis`2010`computational fluid dynamics problem`\nCFD matrices from Francois Pacull, FLUOREM, in Lyon, France        \n                                                                   \nWe are dealing with CFD and more precisely steady flow             \nparametrization. The equations involved are the compressible       \nNavier-Stokes ones (RANS).  These matrices are real, square and    \nindefinite, they correspond to the Jacobian with respect the       \nconservative fluid variables of the discretized governing          \nequations (finite-volume discretization). Thus they have a         \nblock structure (corresponding to the mesh nodes: the block        \nsize is the number of variables per mesh node), they are not       \nsymmetric (however, their blockwise structure has a high level     \nof symmetry) and they often show some kind of hyperbolic           \nbehavior. They have not been scaled or reordered.                  \n                                                                   \nThey are generated through automatic differentiation of the        \nflow solver around a steady state. A right hand-side is also       \ngiven for each matrix: this represents the derivative of the       \nequations with respect to a parameter (of operation or shape).     \nSince they are generated automatically, they may have \"silent\"     \nvariables: these are variables corresponding to an identity        \nsubmatrix associated with a null right hand-side, for example      \none of the three velocity components in a 2D case, or the          \nturbulent variables in a \"frozen\" turbulence case.                 \n                                                                   \nWe believe that these matrices are good test cases when            \nstudying preconditioning methods for iterative methods, such as    \nblock incomplete factorization, or when studying domain            \ndecomposition methods or deflation. They are actually being        \nstudied by a few researchers in France regarding numerical         \nmethods, through the LIBRAERO research project of the ANR (national\nresearch agency): ANR-07-TLOG-011.                                 \n                                                                   \nFrancois Pacull, Lyon, France.  fpacull at fluorem.com             \n                                                                   \nSpecific problem descriptions:                                     \n    RM07R: 3D viscous case with \"frozen\" turbulence                \n    number of mesh nodes: 54527                                    \n    block size: 7                                                  \n    variables: [rho,rho*u,rho*v,rho*w,rho*E,rho*k,rho*omega]       \n    (rho k and rho omega are \"silent\", the sixth and seventh rows  \n    and columns in each block can be removed)                      \n    matrix order: 381689                                           \n    nnz: 37464962                                                  \n    comments: The geometry is a jet engine compressor.             \n
2338`Rommes`ww_36_pmec_36`66`66`1194`yes`66`11`1`0`33%`0%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2339`Rommes`ww_vref_6405`13251`13251`48737`yes`13251`5196`1903`0`71%`59%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2340`Rommes`xingo_afonso_itaipu`13250`13250`48735`yes`13250`5195`1903`0`71%`59%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2341`Rommes`mimo8x8_system`13309`13309`48872`yes`13309`5212`1919`0`71%`58%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2342`Rommes`mimo28x28_system`13251`13251`48737`yes`13251`5196`1903`0`71%`59%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2343`Rommes`mimo46x46_system`13250`13250`48735`yes`13250`5195`1903`0`71%`59%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2344`Rommes`juba40k`40337`40337`144945`no`40335`12954`4931`0`69%`58%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2345`Rommes`bauru5727`40366`40366`145019`no`40364`12964`4941`0`69%`58%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2346`Rommes`zeros_nopss_13k`13296`13296`48827`yes`13296`5941`1903`0`71%`58%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2347`Rommes`descriptor_xingo6u`20738`20738`73916`no`20737`6728`2576`0`68%`57%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2348`Rommes`nopss_11k`11685`11685`44941`yes`11685`4566`1817`0`75%`62%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2349`Rommes`xingo3012`20944`20944`74386`no`20943`6781`2576`0`68%`57%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2350`Rommes`bips98_606`7135`7135`34738`yes`7135`1299`1070`0`91%`76%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2351`Rommes`bips98_1142`9735`9735`40983`yes`9735`1933`1320`0`80%`67%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2352`Rommes`bips98_1450`11305`11305`44678`yes`11305`2513`1580`0`76%`63%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2353`Rommes`bips07_1693`13275`13275`49044`yes`13275`3265`1903`0`71%`58%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2354`Rommes`bips07_1998`15066`15066`62198`yes`15066`3481`2075`0`80%`67%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2355`Rommes`bips07_2476`16861`16861`66498`no`16860`3895`2136`0`76%`63%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2356`Rommes`bips07_3078`21128`21128`75729`no`21126`6659`2661`0`69%`58%`real`unsymmetric`no`no`N. Martins`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2357`Rommes`M10PI_n1`528`528`1317`no`525`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2358`Rommes`M20PI_n1`1028`1028`2547`no`1025`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2359`Rommes`M40PI_n1`2028`2028`5007`no`2025`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2360`Rommes`M80PI_n1`4028`4028`9927`no`4025`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2361`Rommes`M10PI_n`682`682`1633`no`679`96`1`0`symmetric`11%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2362`Rommes`M20PI_n`1182`1182`2881`no`1179`94`1`0`symmetric`4%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2363`Rommes`M40PI_n`2182`2182`5341`no`2179`94`1`0`symmetric`2%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2364`Rommes`M80PI_n`4182`4182`10261`no`4179`94`1`0`symmetric`1%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2365`Rommes`S10PI_n1`528`528`1317`no`525`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2366`Rommes`S20PI_n1`1028`1028`2547`no`1025`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2367`Rommes`S40PI_n1`2028`2028`5007`no`2025`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2368`Rommes`S80PI_n1`4028`4028`9927`no`4025`23`3`0`symmetric`0%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2369`Rommes`S10PI_n`682`682`1633`no`679`96`1`0`symmetric`11%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2370`Rommes`S20PI_n`1182`1182`2881`no`1179`94`1`0`symmetric`4%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2371`Rommes`S40PI_n`2182`2182`5341`no`2179`94`1`0`symmetric`2%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2372`Rommes`S80PI_n`4182`4182`10261`no`4179`94`1`0`symmetric`1%`real`unsymmetric`no`no`F. Freitas`J. Rommes`2010`eigenvalue/model reduction problem`\nPower system models from Joost Rommes, Nelson Martins, Francisco Freitas       \n                                                                               \nThis collection of power system models originates from real power systems,     \nmostly based on Brazilian interconection power systems (BIPS) models (the file \nnames refer to the actual power system related to a given year electric load   \nscenario).  These systems [E dx/dt = Ax + Bu ; y=Cx + Du] are interesting      \nbenchmarks for several numerical algorithms, including eigenvalue algorithms   \n(dominant modes/poles/zeros, stability analysis, computing rightmost           \neigenvalues and/or with smallest damping ratio, eigenvalue parameter           \nsensitivity) and model order reduction (large-scale DAEs ). Refer to the       \ncorresponding publications for more details on the systems and numerical       \nresults of several eigenvalue/model order reduction algorithms. For            \ncorresponding software, see http://sites.google.com/site/rommes/software       \n                                                                               \nIf E is not present in the problem, then E=I should be assumed.                \nIf D is not present, D=0 should be assumed.  (Note that as of Jan 2011,        \nno problem has a nonzero D).                                                   \n                                                                               \nThe iv vector in some of the files is a vector with nonzeros (ones) at indices \nthat represent state-variables (the zeros are algebraic variables). One can    \nconstruct the descriptor matrix E by E=spdiags(iv,0,n,n). This iv vector is    \ngenerated by the Brazilian power system simulation software, and can be more   \nefficient to compute with.                                                     \n                                                                               \nTest systems:                                                                  \n                                                                               \nAll power system models originate from CEPEL ( http://www.cepel.br/ )          \n                                                                               \npower system    file                    n  #inputs #outputs  references        \n------------    ----               ------  ------- --------  --                \nNew England     ww_36_pmec_36          66   1       1        [1]               \nBIPS/97         ww_vref_6405        13251   1       1        [1]               \nBIPS/2007       xingo_afonso_itaipu 13250   1       1        [2]               \nBIPS/97         mimo8x8_system      13309   8       8        [3]               \nBIPS/97         mimo28x28_system    13251  28      28        [3]               \nBIPS/97         mimo46x46_system    13250  46      46        [4]               \nJuba5723        juba40k             40337   2       1        [5]               \nBauru5727       bauru5727           40366   2       2        [5]               \nzeros_nopss     zeros_nopss_13k     13296  46      46        [5]               \nxingo6u         descriptor_xingo6u  20738   1       6        [5]               \nnopss           nopss_11k           11685   1       1        [5]               \nxingo3012       xingo3012           20944   2       2        [5]               \nbips98_606      bips98_606           7135   4       4        [6]               \nbips98_1142     bips98_1142          9735   4       4        [6]               \nbips98_1450     bips98_1450         11305   4       4        [6]               \nbips07_1693     bips07_1693         13275   4       4        [6]               \nbips07_1998     bips07_1998         15066   4       4        [6]               \nbips07_2476     bips07_2476         16861   4       4        [6]               \nbips07_3078     bips07_3078         21128   4       4        [6]               \n                                                                               \nSeveral SISO/MIMO test systems, whose main components are transmission lines   \n(TL) are available.  TLs are modeled by ladder networks, comprised of cascaded \nRLC PI-circuits, having fixed parameters.                                      \n                                                                               \n   Transmission lines with 10--80 PI Sections are considered.                  \n   PIsections10to80.zip            [Submitted]                                 \n                                                                               \n   There are two kinds of files for representing a same system: the file with  \n   termination _n refers to an index-2 system DAE model, while _n1 means       \n   a model of the same system, but for an index-1 DAE representation.  The     \n   representation of each test system has the form [E dx/dt = Ax + Bu ; y=Cx]  \n                                                                               \nReferences:                                                                    \n                                                                               \n[1] ROMMES, J., MARTINS, N., Efficient computation of transfer function        \n    dominant poles using subspace acceleration.  IEEE Trans. on Power Systems, \n    Vol.  21, Issue 3, Aug. 2006, pp. 1218-1226                                \n                                                                               \n[2] ROMMES, J., MARTINS, N., Computing large-scale system eigenvalues most     \n    sensitive to parameter changes, with applications to power system          \n    small-signal stability , IEEE Transactions on Power Systems, Vol. 23, Issue\n    2, May 2008, pp.  434-442                                                  \n                                                                               \n[3] ROMMES, J., MARTINS, N., Efficient computation of multivariable transfer   \n    function dominant poles using subspace acceleration.  2006, IEEE Trans. on,\n    Power Systems, Vol. 21, Issue 4, Nov. 2006, pp.  1471-1483.                \n                                                                               \n[4] MARTINS, N., PELLANDA, P.C.,ROMMES, J., Computation of transfer function   \n    dominant zeros with applications to oscillation damping control of large   \n    power systems, IEEE Trans. on Power Systems, Vol. 22, Issue 4, Nov. 2007,  \n    pp.  1657-1664                                                             \n                                                                               \n[5] ROMMES, J., MARTINS, N., FREITAS, F., Computing Rightmost Eigenvalues for  \n    Small-Signal Stability Assessment of Large-Scale Power Systems, IEEE       \n    Transactions on Power Systems, Vol. 25, Issue 2, May 2010, pp.929-938      \n                                                                               \n[6] FREITAS, F., ROMMES, J., MARTINS, N., Gramian-Based Reduction Method       \n    Applied to Large Sparse Power System Descriptor Models, IEEE Transactions  \n    on Power Systems, Vol. 23, Issue 3, August 2008, pp. 1258-1270             \n
2373`Williams`pdb1HYS`36417`36417`4344765`unknown`unknown`unknown`1`0`symmetric`symmetric`real`symmetric`yes`yes`S. G. Sarafianos et al`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`weighted undirected graph`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n   I presume the pdb1HYS matrix comes from this source:                        \n                                                                               \n   http://www.rcsb.org/pdb/explore.do?structureId=1HYS                         \n   http://dx.doi.org/10.2210/pdb1hys/pdb                                       \n   Crystal structure of HIV-1 reverse transcriptase in complex with a          \n   polypurine tract RNA:DNA.                                                   \n   Sarafianos, S.G., Das, K., Tantillo, C., Clark Jr., A.D., Ding,             \n   J., Whitcomb, J.M., Boyer, P.L., Hughes, S.H., Arnold, E.                   \n   Journal: (2001) EMBO J. 20: 1449-1461                                       \n   PubMed: 11250910                                                            \n   PubMedCentral: PMC145536                                                    \n   DOI: 10.1093/emboj/20.6.1449                                                \n   Search Related Articles in PubMed                                           \n   PubMed Abstract:                                                            \n   We have determined the 3.0 A resolution structure of wild-type HIV-1        \n   reverse transcriptase in complex with an RNA:DNA oligonucleotide whose      \n   sequence includes a purine-rich segment from the HIV-1 genome called the    \n   polypurine tract (PPT). The PPT is resistant to ribonuclease... [ Read      \n   More & Search PubMed Abstracts ] We have determined the 3.0 A resolution    \n   structure of wild-type HIV-1 reverse transcriptase in complex with an       \n   RNA:DNA oligonucleotide whose sequence includes a purine-rich segment from  \n   the HIV-1 genome called the polypurine tract (PPT). The PPT is resistant    \n   to ribonuclease H (RNase H) cleavage and is used as a primer for second     \n   DNA strand synthesis.  The \"RNase H primer grip\", consisting of amino       \n   acids that interact with the DNA primer strand, may contribute to RNase H   \n   catalysis and cleavage specificity. Cleavage specificity is also            \n   controlled by the width of the minor groove and the trajectory of the       \n   RNA:DNA, both of which are sequence dependent. An unusual \"unzipping\" of 7  \n   bp occurs in the adenine stretch of the PPT: an unpaired base on the        \n   template strand takes the base pairing out of register and then, following  \n   two offset base pairs, an unpaired base on the primer strand                \n   re-establishes the normal register. The structural aberration extends to    \n   the RNase H active site and may play a role in the resistance of PPT to     \n   RNase H cleavage.                                                           \n
2374`Williams`consph`83334`83334`6010480`yes`83334`3656`3656`0`symmetric`symmetric`real`symmetric`yes`yes`unknown`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`2D/3D problem`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n
2375`Williams`cant`62451`62451`4007383`yes`62451`244`244`0`symmetric`symmetric`real`symmetric`yes`yes`unknown`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`2D/3D problem`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n
2376`Williams`mac_econ_fwd500`206500`206500`1273389`yes`206500`34`1`0`6%`1%`real`unsymmetric`no`no`unknown`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`economic problem`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n
2377`Williams`mc2depi`525825`525825`2100225`yes`525825`1`1`0`0%`0%`integer`unsymmetric`no`no`unknown`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`2D/3D problem`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n
2378`Williams`cop20k_A`121192`121192`2624331`no`99843`3`21350`0`symmetric`symmetric`real`symmetric`no`no`unknown`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`2D/3D problem`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n
2379`Williams`webbase-1M`1000005`1000005`3105536`unknown`unknown`unknown`940398`0`10%`2%`real`unsymmetric`no`no`unknown`S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel`2008`weighted directed graph`\nMatrices used by S. Williams et al for sparse matrix multiplication on GPUs.   \n                                                                               \n14 matrices were used in the following paper:                                  \n                                                                               \n    S. Williams, L. Oliker, R. Vuduc, J. Shalf, K. Yelick, J. Demmel,          \n    \"Optimization of Sparse Matrix-Vector Multiplication on Emerging Multicore \n    Platforms\", Parallel Computing Volume 35, Issue 3, March 2009, Pages       \n    178-194.  Special issue on Revolutionary Technologies for Acceleration of  \n    Emerging Petascale Applications.                                           \n                                                                               \n    https://hpcrd.lbl.gov/~swwilliams/research/papers/parco08_spmv.pdf         \n    http://dx.doi.org/10.1016/j.parco.2008.12.006                              \n                                                                               \nThis same set of 14 matrices was also used in a subsequent technical report by \nNVIDIA:                                                                        \n                                                                               \n    http://www.nvidia.com/object/nvidia_research_pub_001.html \"Efficient Sparse\n    Matrix-Vector Multiplication on CUDA\" Nathan Bell and Michael Garland, in, \n    \"NVIDIA Technical Report NVR-2008-004\", December 2008                      \n                                                                               \nfile            Name            dim*    nnz     description                    \n                                                                               \ndense2          Dense           2K      4.0M    dense matrix in sparse format  \npdb1HYS         Protein         36K     4.3M    protein data bank 1HYS         \nconsph          FEM/Spheres     83K     6.0M    FEM concentric spheres         \ncant            FEM/Cantilever  62K     4.0M    FEM cantilever                 \npwtk            Wind Tunnel     218K    11.6M   pressurized wind tunnel        \nrma10           FEM/Harbor      47K     2.37M   3D CFD of Charleston Harbor    \nqcd5_4          QCD             49K     1.90M   quark propagators (QCD/LGT)    \nshipsec1        FEM/Ship        141K    3.98M   FEM Ship section / detail      \nmac_econ_fwd500 Economics       207K    1.27M   Macroeconomic model            \nmc2depi         Epidemiology    526K    2.1M    2D Markov model of epidemic    \ncop20k_A        FEM/Accelerator 121K    2.62M   Accelerator cavity design      \nscircuit        Circuit         171K    959K    Motorola circuit simulation    \nwebbase-1M      webbase         1M      3.1M    Web connectivity matrix        \nrail4284        LP              4Kx1.1M 11.3M   Railways set cover,            \n                                                constraint matrix              \n                                                                               \n(*) the matrix is square if only one dimension listed.                         \n                                                                               \nSix of the matrices are nearly identical to the matrices already in the        \nUF Collection.  They are thus not included in the UF Collection.  See          \nthe README.txt file for this collection for details.                           \n
2380`Freescale`FullChip`2987012`2987012`26621983`yes`2987012`35`35`7`100%`1%`real`unsymmetric`no`no`K. Gullapalli`T. Davis`2011`circuit simulation problem`\nFull-chip circuit simulation matrix from Kiran Gullapalli, Freescale  \nSemiconductor, Inc.                                                   \n                                                                      \nThis is a full-chip (everything that is actually built in silicon is  \nin the netlist), for an automotive part.  For simulation, the         \nflash-memory and sram-memory cores are removed. But everything else is\nin the matrix.                                                        \n                                                                      \nThe chip takes an external battery (voltage source), but has internal \nvoltage generators. the node of the external battery can be removed   \nfrom the matrix. but the internal generators create some VERY HIGH    \ndegree nodes. So, there are about 6 nodes with degree greater than    \n1000 (actually, the degree is 2M+ for 2 of these).                    \n                                                                      \nAfter ordering, nnz(L+U) = 200180468, with about 1.03793E+11        \nflops (a += b * c is counted as one flop).                            \n
2381`Dattorro`EternityII_E`11077`262144`1503732`yes`11077`5`1`0`0%`0%`integer`rectangular`no`no`J. Dattorro`T. Davis`2011`optimization problem`\nDattorro Convex Optimization of Eternity II, Jon Dattoro           \n                                                                   \nAn Eternity II puzzle (http://www.eternityii.com/) problem         \nformulation A*x=b is discussed thoroughly in section 4.6.0.0.15 of \nthe book Convex Optimization & Euclidean Distance Geometry which   \nis freely available. That A matrix is obtained by presolving a     \nsparse 864593-by-1048576 system.  The 3 problems in this set    \ncontains three successive reductions, each equivalent to that      \nlarger system:                                                     \n                                                                   \n   * EternityII_E: a 11077-by-262144 system E*x=tau, where tau is  \n       11077-by-1.  This is the million column Eternity II matrix  \n       having redundant rows and columns removed analytically.     \n       In the UF Collection, E is the Problem.A matrix, and tau    \n       is Problem.b.  All entries in E are from the set {-10,12}.\n       tau is binary and very sparse.                              \n                                                                   \n   * EternityII_Etilde: a 10054-by-204304 system Etilde*x=tautilde \n       with tautilde of size 10054-by-1.  The system has columns   \n       removed corresponding to some known zero variables          \n       (removal produced dependent rows).  In the UF Collection,   \n       Etilde is the Problem.A matrix, and tautilde is Problem.b.  \n       All entries in Etilde are from the set {-10,1}.            \n       tautilde is binary and very sparse.                         \n                                                                   \n   * EternityII_A: a 7362-by-150638 system A*x=b, where b is       \n       7362-by-1.  This system has columns removed not in          \n       smallest face (containing tautilde) of polyhedral cone K =  \n       { Etilde*x | x >= 0 }.                                      \n                                                                   \nThe following linear program is a very difficult problem that      \nremains unsolved:                                                  \n                                                                   \n    maximize_x z'*x, subject to A*x=b and x >= 0                   \n                                                                   \nThe matrix A in the EternityII_A problem is sparse, having only    \n782087 nonzeros.  All entries of A are integers from the set      \n{-10,1}.  The vector b is binary, with only 358 nonzeros.         \n                                                                   \nDirection vector z is determined by Convex Iteration:              \n                                                                   \n    maximize_z z'*x^{star},                                        \n    subject to 0 <= z <= 1 and z'*1 = 256                          \n                                                                   \n(for a vector x, x >= 0 means all(x>-0) in MATLAB notation)        \n                                                                   \nThese two problems are iterated to find a minimal cardinality      \nsolution x.  Constraint A*x=b bounds the variable from above by 1. \nAny minimal cardinality solution is binary and solves the Eternity \nII puzzle. The Eternity II puzzle is solved when                   \nz^{star}'*x^{star} = 256.                                          \n                                                                   \nMinimal cardinality of this Eternity II problem is equal to number \nof puzzle pieces, 256.                                             \n                                                                   \nComment: The technique, convex iteration, requires no modification \n(and works very well) when applied instead to mixed integer        \nprogramming (MIP, not discussed in book). There is no modification \nto the linear program statement here except 256 variables,         \ncorresponding to the largest entries of iterate x^{star}, are      \ndeclared binary.                                                   \n                                                                   \nFor more details, see                                              \nhttp://www.convexoptimization.com/wikimization/index.php           \n/Dattorro_Convex_Optimization_of_Eternity_II (url is wrapped),     \nand https://ccrma.stanford.edu/~dattorro/ .                        \n
2382`Dattorro`EternityII_Etilde`10054`204304`1170516`yes`10054`5`1`0`0%`0%`integer`rectangular`no`no`J. Dattorro`T. Davis`2011`optimization problem`\nDattorro Convex Optimization of Eternity II, Jon Dattoro           \n                                                                   \nAn Eternity II puzzle (http://www.eternityii.com/) problem         \nformulation A*x=b is discussed thoroughly in section 4.6.0.0.15 of \nthe book Convex Optimization & Euclidean Distance Geometry which   \nis freely available. That A matrix is obtained by presolving a     \nsparse 864593-by-1048576 system.  The 3 problems in this set    \ncontains three successive reductions, each equivalent to that      \nlarger system:                                                     \n                                                                   \n   * EternityII_E: a 11077-by-262144 system E*x=tau, where tau is  \n       11077-by-1.  This is the million column Eternity II matrix  \n       having redundant rows and columns removed analytically.     \n       In the UF Collection, E is the Problem.A matrix, and tau    \n       is Problem.b.  All entries in E are from the set {-10,12}.\n       tau is binary and very sparse.                              \n                                                                   \n   * EternityII_Etilde: a 10054-by-204304 system Etilde*x=tautilde \n       with tautilde of size 10054-by-1.  The system has columns   \n       removed corresponding to some known zero variables          \n       (removal produced dependent rows).  In the UF Collection,   \n       Etilde is the Problem.A matrix, and tautilde is Problem.b.  \n       All entries in Etilde are from the set {-10,1}.            \n       tautilde is binary and very sparse.                         \n                                                                   \n   * EternityII_A: a 7362-by-150638 system A*x=b, where b is       \n       7362-by-1.  This system has columns removed not in          \n       smallest face (containing tautilde) of polyhedral cone K =  \n       { Etilde*x | x >= 0 }.                                      \n                                                                   \nThe following linear program is a very difficult problem that      \nremains unsolved:                                                  \n                                                                   \n    maximize_x z'*x, subject to A*x=b and x >= 0                   \n                                                                   \nThe matrix A in the EternityII_A problem is sparse, having only    \n782087 nonzeros.  All entries of A are integers from the set      \n{-10,1}.  The vector b is binary, with only 358 nonzeros.         \n                                                                   \nDirection vector z is determined by Convex Iteration:              \n                                                                   \n    maximize_z z'*x^{star},                                        \n    subject to 0 <= z <= 1 and z'*1 = 256                          \n                                                                   \n(for a vector x, x >= 0 means all(x>-0) in MATLAB notation)        \n                                                                   \nThese two problems are iterated to find a minimal cardinality      \nsolution x.  Constraint A*x=b bounds the variable from above by 1. \nAny minimal cardinality solution is binary and solves the Eternity \nII puzzle. The Eternity II puzzle is solved when                   \nz^{star}'*x^{star} = 256.                                          \n                                                                   \nMinimal cardinality of this Eternity II problem is equal to number \nof puzzle pieces, 256.                                             \n                                                                   \nComment: The technique, convex iteration, requires no modification \n(and works very well) when applied instead to mixed integer        \nprogramming (MIP, not discussed in book). There is no modification \nto the linear program statement here except 256 variables,         \ncorresponding to the largest entries of iterate x^{star}, are      \ndeclared binary.                                                   \n                                                                   \nFor more details, see                                              \nhttp://www.convexoptimization.com/wikimization/index.php           \n/Dattorro_Convex_Optimization_of_Eternity_II (url is wrapped),     \nand https://ccrma.stanford.edu/~dattorro/ .                        \n
2383`Dattorro`EternityII_A`7362`150638`782087`yes`7362`2`2`0`0%`0%`integer`rectangular`no`no`J. Dattorro`T. Davis`2011`optimization problem`\nDattorro Convex Optimization of Eternity II, Jon Dattoro           \n                                                                   \nAn Eternity II puzzle (http://www.eternityii.com/) problem         \nformulation A*x=b is discussed thoroughly in section 4.6.0.0.15 of \nthe book Convex Optimization & Euclidean Distance Geometry which   \nis freely available. That A matrix is obtained by presolving a     \nsparse 864593-by-1048576 system.  The 3 problems in this set    \ncontains three successive reductions, each equivalent to that      \nlarger system:                                                     \n                                                                   \n   * EternityII_E: a 11077-by-262144 system E*x=tau, where tau is  \n       11077-by-1.  This is the million column Eternity II matrix  \n       having redundant rows and columns removed analytically.     \n       In the UF Collection, E is the Problem.A matrix, and tau    \n       is Problem.b.  All entries in E are from the set {-10,12}.\n       tau is binary and very sparse.                              \n                                                                   \n   * EternityII_Etilde: a 10054-by-204304 system Etilde*x=tautilde \n       with tautilde of size 10054-by-1.  The system has columns   \n       removed corresponding to some known zero variables          \n       (removal produced dependent rows).  In the UF Collection,   \n       Etilde is the Problem.A matrix, and tautilde is Problem.b.  \n       All entries in Etilde are from the set {-10,1}.            \n       tautilde is binary and very sparse.                         \n                                                                   \n   * EternityII_A: a 7362-by-150638 system A*x=b, where b is       \n       7362-by-1.  This system has columns removed not in          \n       smallest face (containing tautilde) of polyhedral cone K =  \n       { Etilde*x | x >= 0 }.                                      \n                                                                   \nThe following linear program is a very difficult problem that      \nremains unsolved:                                                  \n                                                                   \n    maximize_x z'*x, subject to A*x=b and x >= 0                   \n                                                                   \nThe matrix A in the EternityII_A problem is sparse, having only    \n782087 nonzeros.  All entries of A are integers from the set      \n{-10,1}.  The vector b is binary, with only 358 nonzeros.         \n                                                                   \nDirection vector z is determined by Convex Iteration:              \n                                                                   \n    maximize_z z'*x^{star},                                        \n    subject to 0 <= z <= 1 and z'*1 = 256                          \n                                                                   \n(for a vector x, x >= 0 means all(x>-0) in MATLAB notation)        \n                                                                   \nThese two problems are iterated to find a minimal cardinality      \nsolution x.  Constraint A*x=b bounds the variable from above by 1. \nAny minimal cardinality solution is binary and solves the Eternity \nII puzzle. The Eternity II puzzle is solved when                   \nz^{star}'*x^{star} = 256.                                          \n                                                                   \nMinimal cardinality of this Eternity II problem is equal to number \nof puzzle pieces, 256.                                             \n                                                                   \nComment: The technique, convex iteration, requires no modification \n(and works very well) when applied instead to mixed integer        \nprogramming (MIP, not discussed in book). There is no modification \nto the linear program statement here except 256 variables,         \ncorresponding to the largest entries of iterate x^{star}, are      \ndeclared binary.                                                   \n                                                                   \nFor more details, see                                              \nhttp://www.convexoptimization.com/wikimization/index.php           \n/Dattorro_Convex_Optimization_of_Eternity_II (url is wrapped),     \nand https://ccrma.stanford.edu/~dattorro/ .                        \n
2384`Fluorem`HV15R`2017169`2017169`283073458`yes`2017169`24683`24683`0`84%`0%`real`unsymmetric`no`no`F. Pacull`T. Davis`2011`computational fluid dynamics problem`\nCFD matrices from Francois Pacull, FLUOREM, in Lyon, France        \n                                                                   \nWe are dealing with CFD and more precisely steady flow             \nparametrization. The equations involved are the compressible       \nNavier-Stokes ones (RANS).  These matrices are real, square and    \nindefinite, they correspond to the Jacobian with respect the       \nconservative fluid variables of the discretized governing          \nequations (finite-volume discretization). Thus they have a         \nblock structure (corresponding to the mesh nodes: the block        \nsize is the number of variables per mesh node), they are not       \nsymmetric (however, their blockwise structure has a high level     \nof symmetry) and they often show some kind of hyperbolic           \nbehavior. They have not been scaled or reordered.                  \n                                                                   \nThey are generated through automatic differentiation of the        \nflow solver around a steady state. A right hand-side is also       \ngiven for each matrix: this represents the derivative of the       \nequations with respect to a parameter (of operation or shape).     \nSince they are generated automatically, they may have \"silent\"     \nvariables: these are variables corresponding to an identity        \nsubmatrix associated with a null right hand-side, for example      \none of the three velocity components in a 2D case, or the          \nturbulent variables in a \"frozen\" turbulence case.                 \n                                                                   \nWe believe that these matrices are good test cases when            \nstudying preconditioning methods for iterative methods, such as    \nblock incomplete factorization, or when studying domain            \ndecomposition methods or deflation. They are actually being        \nstudied by a few researchers in France regarding numerical         \nmethods, through the LIBRAERO research project of the ANR (national\nresearch agency): ANR-07-TLOG-011.                                 \n                                                                   \nFrancois Pacull, Lyon, France.  fpacull at fluorem.com             \n                                                                   \nSpecific problem descriptions:                                     \n   This is a 3D Reynolds-Averaged-Navier-Stokes case.              \n   HV15R: 3D engine fan. The flow has a low Mach number.           \n   Number of mesh nodes: 288167                                   \n   block size: 7                                                   \n   variables: [rho, rho*u, rho*v, rho*w, rho*E, rho*k, rho*omega]  \n   matrix order: 2017169                                         \n   nnz: 283073458                                                \n                                                                   \nIn 2011, this problem took 3.5 hours to solve, using GMRES with    \nan adaptive Schwarz preconditioner and ILU withing the subdomains, \nrequiring about 100GB of memory.                                   \n                                                                   \nReference:  \"A Study of ILU Factorization for Schwartz             \nPreconditioners with Application to Computational Fluid            \nDynamics\", F. Pacull, S. Aubert, M. Buisson, Proceedings           \nof the 2nd Intl Conf on Parallel, Distributed, Grid, and           \nCloud Computing for Engineering, B.H.V Topping and P.              \nIva'nyi, Editors.  Civil-Comp Press, Stirlingshire,                \nScotland, 2011.                                                    \n
2385`Dziekonski`dielFilterV2clx`607232`607232`25309272`yes`607232`1`1`0`symmetric`97%`complex`symmetric`no`no`A. Dziekonski, A. Lamecki, M. Mrozowski`T. Davis`2011`electromagnetics problem`\nHigh order vector finite element method in electromagnetics       \n                                                                  \nThe dielFilter* matrices came from analysis of a 4th-pole         \ndielectric resonator [4] generated with Finite Element Method.    \nThe tetrahedral mesh of the structure was generated with the      \nNetgen mesher [2].  The matrices were used as an example in       \nour paper [3].                                                    \n                                                                  \ndielFilterV2clx - complex symmetric matrix (607232 x 607232),   \n    25309272 nonzero (real) and 728900 nonzero (imag) elements.\n    First 109108 unknowns correspond to lowest level base        \n    functions.                                                    \n                                                                  \ndielFilterV2real - real symmetric matrix (1157456 x 1157456)  \n    and 48538952 nonzero elements.  First 209432 unknowns      \n    correspond to lowest level base functions.                    \n                                                                  \ndielFilterV3clx - complex symmetric matrix (420408 x 420408),   \n    32886208 nonzero (real) and 3706513 (imag) elements. First\n    24716 unknowns correspond to lowest level base functions,    \n    next 116152 unknowns correspond to the second level.         \n                                                                  \ndielFilterV3real - real symmetric matrix (1102824 x 1102824)  \n    and 89306020 nonzero elements. First 66353 unknowns        \n    correspond to lowest level base functions, next 305729       \n    unknowns correspond to the  second level.                     \n                                                                  \nAll matrices are sparse and come with right-hand-sides.           \n                                                                  \n[2] J. Schoberl, \"NETGEN An advancing front 2D/3D-mesh            \ngenerator based on abstract rules,\" Computing and Visualization   \nin Science, vol. 1, No. 1, pp.  41-52, July 1997                  \n                                                                  \n[3] A. Dziekonski, A. Lamecki, M. Mrozowski, Tuning A             \nHybrid GPU-CPU V-cycle Multilevel Preconditioner for Solving      \nLarge Real and Complex Systems of FEM Equations.                  \n                                                                  \n[4] F. Alessandri, M. Chiodetti, A. Giugliarelli; D. Maiarelli,   \nG. Martirano, D. Schmitt, L. Vanni and F. Vitulli.  The           \nelectric-field Integral-equation method for the analysis and      \ndesign of a class of rectangular cavity filters loaded by         \ndielectric and metallic cylindrical pucks, Microwave Theory       \nand Techniques, IEEE Transactions on, vol. 52, no 8, pp.          \n1790-1797, Aug. 2004.                                             \n
2386`Dziekonski`dielFilterV2real`1157456`1157456`48538952`yes`1157456`1`1`0`symmetric`symmetric`real`symmetric`no`no`A. Dziekonski, A. Lamecki, M. Mrozowski`T. Davis`2011`electromagnetics problem`\nHigh order vector finite element method in electromagnetics       \n                                                                  \nThe dielFilter* matrices came from analysis of a 4th-pole         \ndielectric resonator [4] generated with Finite Element Method.    \nThe tetrahedral mesh of the structure was generated with the      \nNetgen mesher [2].  The matrices were used as an example in       \nour paper [3].                                                    \n                                                                  \ndielFilterV2clx - complex symmetric matrix (607232 x 607232),   \n    25309272 nonzero (real) and 728900 nonzero (imag) elements.\n    First 109108 unknowns correspond to lowest level base        \n    functions.                                                    \n                                                                  \ndielFilterV2real - real symmetric matrix (1157456 x 1157456)  \n    and 48538952 nonzero elements.  First 209432 unknowns      \n    correspond to lowest level base functions.                    \n                                                                  \ndielFilterV3clx - complex symmetric matrix (420408 x 420408),   \n    32886208 nonzero (real) and 3706513 (imag) elements. First\n    24716 unknowns correspond to lowest level base functions,    \n    next 116152 unknowns correspond to the second level.         \n                                                                  \ndielFilterV3real - real symmetric matrix (1102824 x 1102824)  \n    and 89306020 nonzero elements. First 66353 unknowns        \n    correspond to lowest level base functions, next 305729       \n    unknowns correspond to the  second level.                     \n                                                                  \nAll matrices are sparse and come with right-hand-sides.           \n                                                                  \n[2] J. Schoberl, \"NETGEN An advancing front 2D/3D-mesh            \ngenerator based on abstract rules,\" Computing and Visualization   \nin Science, vol. 1, No. 1, pp.  41-52, July 1997                  \n                                                                  \n[3] A. Dziekonski, A. Lamecki, M. Mrozowski, Tuning A             \nHybrid GPU-CPU V-cycle Multilevel Preconditioner for Solving      \nLarge Real and Complex Systems of FEM Equations.                  \n                                                                  \n[4] F. Alessandri, M. Chiodetti, A. Giugliarelli; D. Maiarelli,   \nG. Martirano, D. Schmitt, L. Vanni and F. Vitulli.  The           \nelectric-field Integral-equation method for the analysis and      \ndesign of a class of rectangular cavity filters loaded by         \ndielectric and metallic cylindrical pucks, Microwave Theory       \nand Techniques, IEEE Transactions on, vol. 52, no 8, pp.          \n1790-1797, Aug. 2004.                                             \n
2387`Dziekonski`dielFilterV3clx`420408`420408`32886208`yes`420408`1`1`0`symmetric`89%`complex`symmetric`no`no`A. Dziekonski, A. Lamecki, M. Mrozowski`T. Davis`2011`electromagnetics problem`\nHigh order vector finite element method in electromagnetics       \n                                                                  \nThe dielFilter* matrices came from analysis of a 4th-pole         \ndielectric resonator [4] generated with Finite Element Method.    \nThe tetrahedral mesh of the structure was generated with the      \nNetgen mesher [2].  The matrices were used as an example in       \nour paper [3].                                                    \n                                                                  \ndielFilterV2clx - complex symmetric matrix (607232 x 607232),   \n    25309272 nonzero (real) and 728900 nonzero (imag) elements.\n    First 109108 unknowns correspond to lowest level base        \n    functions.                                                    \n                                                                  \ndielFilterV2real - real symmetric matrix (1157456 x 1157456)  \n    and 48538952 nonzero elements.  First 209432 unknowns      \n    correspond to lowest level base functions.                    \n                                                                  \ndielFilterV3clx - complex symmetric matrix (420408 x 420408),   \n    32886208 nonzero (real) and 3706513 (imag) elements. First\n    24716 unknowns correspond to lowest level base functions,    \n    next 116152 unknowns correspond to the second level.         \n                                                                  \ndielFilterV3real - real symmetric matrix (1102824 x 1102824)  \n    and 89306020 nonzero elements. First 66353 unknowns        \n    correspond to lowest level base functions, next 305729       \n    unknowns correspond to the  second level.                     \n                                                                  \nAll matrices are sparse and come with right-hand-sides.           \n                                                                  \n[2] J. Schoberl, \"NETGEN An advancing front 2D/3D-mesh            \ngenerator based on abstract rules,\" Computing and Visualization   \nin Science, vol. 1, No. 1, pp.  41-52, July 1997                  \n                                                                  \n[3] A. Dziekonski, A. Lamecki, M. Mrozowski, Tuning A             \nHybrid GPU-CPU V-cycle Multilevel Preconditioner for Solving      \nLarge Real and Complex Systems of FEM Equations.                  \n                                                                  \n[4] F. Alessandri, M. Chiodetti, A. Giugliarelli; D. Maiarelli,   \nG. Martirano, D. Schmitt, L. Vanni and F. Vitulli.  The           \nelectric-field Integral-equation method for the analysis and      \ndesign of a class of rectangular cavity filters loaded by         \ndielectric and metallic cylindrical pucks, Microwave Theory       \nand Techniques, IEEE Transactions on, vol. 52, no 8, pp.          \n1790-1797, Aug. 2004.                                             \n
2388`Dziekonski`dielFilterV3real`1102824`1102824`89306020`yes`1102824`1`1`0`symmetric`symmetric`real`symmetric`no`no`A. Dziekonski, A. Lamecki, M. Mrozowski`T. Davis`2011`electromagnetics problem`\nHigh order vector finite element method in electromagnetics       \n                                                                  \nThe dielFilter* matrices came from analysis of a 4th-pole         \ndielectric resonator [4] generated with Finite Element Method.    \nThe tetrahedral mesh of the structure was generated with the      \nNetgen mesher [2].  The matrices were used as an example in       \nour paper [3].                                                    \n                                                                  \ndielFilterV2clx - complex symmetric matrix (607232 x 607232),   \n    25309272 nonzero (real) and 728900 nonzero (imag) elements.\n    First 109108 unknowns correspond to lowest level base        \n    functions.                                                    \n                                                                  \ndielFilterV2real - real symmetric matrix (1157456 x 1157456)  \n    and 48538952 nonzero elements.  First 209432 unknowns      \n    correspond to lowest level base functions.                    \n                                                                  \ndielFilterV3clx - complex symmetric matrix (420408 x 420408),   \n    32886208 nonzero (real) and 3706513 (imag) elements. First\n    24716 unknowns correspond to lowest level base functions,    \n    next 116152 unknowns correspond to the second level.         \n                                                                  \ndielFilterV3real - real symmetric matrix (1102824 x 1102824)  \n    and 89306020 nonzero elements. First 66353 unknowns        \n    correspond to lowest level base functions, next 305729       \n    unknowns correspond to the  second level.                     \n                                                                  \nAll matrices are sparse and come with right-hand-sides.           \n                                                                  \n[2] J. Schoberl, \"NETGEN An advancing front 2D/3D-mesh            \ngenerator based on abstract rules,\" Computing and Visualization   \nin Science, vol. 1, No. 1, pp.  41-52, July 1997                  \n                                                                  \n[3] A. Dziekonski, A. Lamecki, M. Mrozowski, Tuning A             \nHybrid GPU-CPU V-cycle Multilevel Preconditioner for Solving      \nLarge Real and Complex Systems of FEM Equations.                  \n                                                                  \n[4] F. Alessandri, M. Chiodetti, A. Giugliarelli; D. Maiarelli,   \nG. Martirano, D. Schmitt, L. Vanni and F. Vitulli.  The           \nelectric-field Integral-equation method for the analysis and      \ndesign of a class of rectangular cavity filters loaded by         \ndielectric and metallic cylindrical pucks, Microwave Theory       \nand Techniques, IEEE Transactions on, vol. 52, no 8, pp.          \n1790-1797, Aug. 2004.                                             \n
2389`Newman`adjnoun`112`112`850`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Newman`M. Newman`2006`undirected graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph adjnoun contains the network of common adjective and noun        \nadjacencies for the novel \"David Copperfield\" by Charles Dickens, as       \ndescribed by M. Newman.  Nodes represent the most commonly occurring       \nadjectives and nouns in the book.  Node values are 0 for adjectives and 1  \nfor nouns.  Edges connect any pair of words that occur in adjacent position\nin the text of the book.  Please cite M. E. J. Newman, Finding community   \nstructure in networks using the eigenvectors of matrices, Preprint         \nphysics/0605087 (2006).                                                    \n
2390`Newman`as-22july06`22963`22963`96872`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Newman`M. Newman`2006`undirected graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph as-22july06 contains a symmetrized snapshot of the structure     \nof the Internet at the level of autonomous systems, reconstructed from BGP \ntables posted at archive.routeviews.org.  This snapshot was created by Mark\nNewman from data for July 22, 2006 and is not previously published.        \n
2391`Newman`astro-ph`16706`16706`242502`unknown`unknown`unknown`1029`0`symmetric`symmetric`real`symmetric`no`no`M. Newman`M. Newman`2001`undirected weighted graph`\nNetwork collection from M. Newman                                         \nhttp://www-personal.umich.edu/~mejn/netdata/                              \n                                                                          \nThe graph astro-ph contains the collaboration network of scientists       \nposting preprints on the astrophysics archive at www.arxiv.org, 1995-1999,\nas compiled by M. Newman.  The network is weighted, with weights assigned \nas described in the original papers.  Please cite, as appropriate, one or \nmore of:                                                                  \n                                                                          \n  M. E. J. Newman, The structure of scientific collaboration networks,    \n  Proc. Natl. Acad. Sci. USA 98, 404-409 (2001).                          \n                                                                          \n  M. E. J. Newman, Scientific collaboration networks: I. Network          \n  construction and fundamental results, Phys. Rev. E 64, 016131 (2001).   \n                                                                          \n  M. E. J. Newman, Scientific collaboration networks: II. Shortest paths, \n  weighted networks, and centrality, Phys. Rev. E 64, 016132 (2001).      \n
2392`Newman`celegansneural`297`297`2345`unknown`unknown`unknown`57`0`17%`5%`integer`unsymmetric`no`no`J. White, E. Southgate, J. Thompson, S. Brenner`D. Watts, S. Strogatz`1998`directed weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nNeural network of the nematode C. Elegans                                  \n                                                                           \nCompiled by Duncan Watts and Steven Strogatz from original experimental    \ndata by White et al.                                                       \n                                                                           \nThe graph celegansneural describes a weighted, directed network            \nrepresenting the neural network of C. Elegans.  The data were taken from   \nthe web site of Prof. Duncan Watts at Columbia University,                 \nhttp://cdg.columbia.edu/cdg/datasets.  The nodes in the original data were \nnot consecutively numbered, so they have been renumbered to be consecutive.\nThe original node numbers from Watts' data file are retained as the labels \nof the nodes.  Edge weights are the weights given by Watts.                \n                                                                           \nThese data can be cited as:                                                \n                                                                           \n  J. G. White, E. Southgate, J. N. Thompson, and S. Brenner, \"The structure\n  of the nervous system of the nematode C. Elegans\", Phil. Trans. R. Soc.  \n  London 314, 1-340 (1986).                                                \n                                                                           \n  D. J. Watts and S. H. Strogatz, \"Collective dynamics of `small-world     \n  networks\", Nature 393, 440-442 (1998).                                   \n
2393`Newman`cond-mat`16726`16726`95188`unknown`unknown`unknown`1188`0`symmetric`symmetric`real`symmetric`no`no`M. Newman`M. Newman`2001`undirected weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph cond-mat contains the collaboration network of scientists        \nposting preprints on the condensed matter archive at www.arxiv.org,        \n1995-1999, as compiled by M. Newman.  The network is weighted, with weights\nassigned as described in the original papers.  Please cite, as appropriate,\none or more of:                                                            \n                                                                           \n  M. E. J. Newman, The structure of scientific collaboration networks,     \n  Proc. Natl. Acad. Sci. USA 98, 404-409 (2001).                           \n                                                                           \n  M. E. J. Newman, Scientific collaboration networks: I. Network           \n  construction and fundamental results, Phys. Rev. E 64, 016131 (2001).    \n                                                                           \n  M. E. J. Newman, Scientific collaboration networks: II. Shortest paths,  \n  weighted networks, and centrality, Phys. Rev. E 64, 016132 (2001).       \n
2394`Newman`cond-mat-2003`31163`31163`240058`unknown`unknown`unknown`1599`0`symmetric`symmetric`real`symmetric`no`no`M. Newman`M. Newman`2003`undirected weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph cond-mat-2003 contains an updated version of cond-mat, the       \ncollaboration network of scientists posting preprints on the condensed     \nmatter archive at www.arxiv.org.  This version is based on preprints posted\nto the archive between January 1, 1995 and June 30, 2003.  The largest     \ncomponent of this network, which contains 27519 scientists, has been used  \nby several authors as a test-bed for community-finding algorithms for large\nnetworks; see for example J. Duch and A. Arenas, Phys. Rev. E 72, 027104   \n(2005).  The network is weighted, with weights assigned as described in    \nM. E. J. Newman, Phys. Rev. E 64, 016132 (2001).                           \n                                                                           \nThese data can be cited as either of:                                      \n                                                                           \n  M. E. J. Newman, The structure of scientific collaboration networks,     \n  Proc. Natl. Acad. Sci. USA 98, 404-409 (2001).  This paper describes the \n  original 1999 version of the network.                                    \n                                                                           \n  M. E. J. Newman, Fast algorithm for detecting community structure in     \n  networks, Phys. Rev. E 69, 066133 (2004).  This paper describes the 2003 \n  version.                                                                 \n
2395`Newman`cond-mat-2005`40421`40421`351382`unknown`unknown`unknown`1798`4`symmetric`symmetric`real`symmetric`no`no`M. Newman`M. Newman`2005`undirected weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph cond-mat-2005 contains an updated version of cond-mat, the       \ncollaboration network of scientists posting preprints on the condensed     \nmatter archive at www.arxiv.org.  This version is based on preprints posted\nto the archive between January 1, 1995 and March 31, 2005.  The network is \nweighted, with weights assigned as described in M. E. J. Newman,           \nPhys. Rev. E 64, 016132 (2001).                                            \n                                                                           \nThese data can be cited (as an updated version of)                         \n                                                                           \n  M. E. J. Newman, The structure of scientific collaboration networks,     \n  Proc. Natl. Acad. Sci. USA 98, 404-409 (2001).                           \n                                                                           \nNote by Tim Davis:  in the original cond-mat-2005.gml graph from M. Newman \n2 of the edges had an edge weight of \"inf\".  This value cannot be stored   \nin the UF Collection, so they have been replaced with zero.  See           \nProblem.Zeros in the MATLAB version, or the explicit zero values in the MM \nand RB file formats.                                                       \n
2396`Newman`dolphins`62`62`318`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`D. Lusseau`M. Newman`2003`undirected graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph dolphins contains an undirected social network of frequent       \nassociations between 62 dolphins in a community living off Doubtful Sound, \nNew Zealand, as compiled by Lusseau et al. (2003).  Please cite            \n                                                                           \n  D. Lusseau, K. Schneider, O. J. Boisseau, P. Haase, E. Slooten, and      \n  S. M. Dawson, The bottlenose dolphin community of Doubtful Sound features\n  a large proportion of long-lasting associations, Behavioral Ecology and  \n  Sociobiology 54, 396-405 (2003).                                         \n                                                                           \nAdditional information on the network can be found in                      \n                                                                           \n  D. Lusseau, The emergent properties of a dolphin social network,         \n  Proc. R. Soc. London B (suppl.) 270, S186-S188 (2003).                   \n                                                                           \n  D. Lusseau, Evidence for social role in a dolphin social network,        \n  Preprint q-bio/0607048 (http://arxiv.org/abs/q-bio.PE/0607048)           \n
2397`Newman`football`115`115`1226`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`M. Girvan, M. Newman`M. Newman`2002`undirected multigraph`\nNetwork collection from M. Newman                                        \nhttp://www-personal.umich.edu/~mejn/netdata/                             \n                                                                         \nThe graph football contains the network of American football games       \nbetween Division IA colleges during regular season Fall 2000, as compiled\nby M. Girvan and M. Newman.  The nodes have values that indicate to which\nconferences they belong.  The values are as follows:                     \n                                                                         \n  0 = Atlantic Coast                                                     \n  1 = Big East                                                           \n  2 = Big Ten                                                            \n  3 = Big Twelve                                                         \n  4 = Conference USA                                                     \n  5 = Independents                                                       \n  6 = Mid-American                                                       \n  7 = Mountain West                                                      \n  8 = Pacific Ten                                                        \n  9 = Southeastern                                                       \n 10 = Sun Belt                                                           \n 11 = Western Athletic                                                   \n                                                                         \nIf you make use of these data, please cite M. Girvan and M. E. J. Newman,\nCommunity structure in social and biological networks,                   \nProc. Natl. Acad. Sci. USA 99, 7821-7826 (2002).                         \n
2398`Newman`hep-th`8361`8361`31502`unknown`unknown`unknown`1332`0`symmetric`symmetric`real`symmetric`no`no`M. Newman`M. Newman`2001`undirected weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe grapu hep-th contains the collaboration network of scientists          \nposting preprints on the high-energy theory archive at www.arxiv.org,      \n1995-1999, as compiled by M. Newman.  The network is weighted, with weights\nassigned as described in the original papers.  Please cite, as appropriate,\none or more of:                                                            \n                                                                           \n  M. E. J. Newman, The structure of scientific collaboration networks,     \n  Proc. Natl. Acad. Sci. USA 98, 404-409 (2001).                           \n                                                                           \n  M. E. J. Newman, Scientific collaboration networks: I. Network           \n  construction and fundamental results, Phys. Rev. E 64, 016131 (2001).    \n                                                                           \n  M. E. J. Newman, Scientific collaboration networks: II. Shortest paths,  \n  weighted networks, and centrality, Phys. Rev. E 64, 016132 (2001).       \n
2399`Newman`karate`34`34`156`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`W. Zachary`M. Newman`1977`undirected graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph \"karate\" contains the network of friendships between the 34      \nmembers of a karate club at a US university, as described by Wayne Zachary \nin 1977.  If you use these data in your work, please cite W. W. Zachary, An\ninformation flow model for conflict and fission in small groups, Journal of\nAnthropological Research 33, 452-473 (1977).                               \n
2400`Newman`lesmis`77`77`508`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`D. Knuth`M. Newman`1993`undirected weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph lesmis contains the weighted network of coappearances of         \ncharacters in Victor Hugo's novel \"Les Miserables\".  Nodes represent       \ncharacters as indicated by the labels and edges connect any pair of        \ncharacters that appear in the same chapter of the book.  The values on the \nedges are the number of such coappearances.  The data on coappearances were\ntaken from D. E. Knuth, The Stanford GraphBase: A Platform for             \nCombinatorial Computing, Addison-Wesley, Reading, MA (1993).               \n
2401`Newman`netscience`1589`1589`5484`unknown`unknown`unknown`396`0`symmetric`symmetric`real`symmetric`no`no`M. Newman`M. Newman`2006`undirected weighted graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nThe graph netscience contains a coauthorship network of scientists         \nworking on network theory and experiment, as compiled by M. Newman in May  \n2006.  The network was compiled from the bibliographies of two review      \narticles on networks, M. E. J. Newman, SIAM Review 45, 167-256 (2003) and  \nS. Boccaletti et al., Physics Reports 424, 175-308 (2006), with a few      \nadditional references added by hand.  The version given here contains all  \ncomponents of the network, for a total of 1589 scientists, and not just the\nlargest component of 379 scientists previously published.  The network is  \nweighted, with weights assigned as described in M. E. J. Newman,           \nPhys. Rev. E 64, 016132 (2001).                                            \n                                                                           \nIf you make use of these data, please cite M. E. J. Newman, Finding        \ncommunity structure in networks using the eigenvectors of matrices,        \nPreprint physics/0605087 (2006).                                           \n
2402`Newman`polblogs`1490`1490`19025`unknown`unknown`unknown`688`0`24%`24%`integer`unsymmetric`no`no`L. Adamic, N. Glance`M. Newman`2005`directed multigraph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nPolitical blogosphere Feb. 2005                                            \nData compiled by Lada Adamic and Natalie Glance                            \n                                                                           \nNode \"value\" attributes indicate political leaning according to:           \n                                                                           \n  0 (left or liberal)                                                      \n  1 (right or conservative)                                                \n                                                                           \nData on political leaning comes from blog directories as indicated.  Some  \nblogs were labeled manually, based on incoming and outgoing links and posts\naround the time of the 2004 presidential election.  Directory-derived      \nlabels are prone to error; manual labels even more so.                     \n                                                                           \nLinks between blogs were automatically extracted from a crawl of the front \npage of the blog.                                                          \n                                                                           \nThese data should be cited as Lada A. Adamic and Natalie Glance, \"The      \npolitical blogosphere and the 2004 US Election\", in Proceedings of the     \nWWW-2005 Workshop on the Weblogging Ecosystem (2005).                      \n
2403`Newman`polbooks`105`105`882`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`V. Krebs`M. Newman`2001`undirected graph`\nNetwork collection from M. Newman                                         \nhttp://www-personal.umich.edu/~mejn/netdata/                              \n                                                                          \nBooks about US politics                                                   \nCompiled by Valdis Krebs                                                  \n                                                                          \nNodes represent books about US politics sold by the online bookseller     \nAmazon.com.  Edges represent frequent co-purchasing of books by the same  \nbuyers, as indicated by the \"customers who bought this book also bought   \nthese other books\" feature on Amazon.                                     \n                                                                          \nNodes have been given values \"l\", \"n\", or \"c\" to indicate whether they are\n\"liberal\", \"neutral\", or \"conservative\".  These alignments were assigned  \nseparately by Mark Newman based on a reading of the descriptions and      \nreviews of the books posted on Amazon.                                    \n                                                                          \nThese data should be cited as V. Krebs, unpublished,                      \nhttp://www.orgnet.com/.                                                   \n
2404`Newman`power`4941`4941`13188`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`D. Watts, S. Strogatz`M. Newman`1998`undirected graph`\nNetwork collection from M. Newman                                          \nhttp://www-personal.umich.edu/~mejn/netdata/                               \n                                                                           \nWestern States Power Grid                                                  \n                                                                           \nCompiled by Duncan Watts and Steven Strogatz                               \n                                                                           \nThe graph \"power\" contains an undirected unweighted representation of the  \ntopology of the Western States Power Grid of the United States, compiled by\nDuncan Watts and Steven Strogatz.  The data are from the web site of       \nProf. Duncan Watts at Columbia University,                                 \nhttp://cdg.columbia.edu/cdg/datasets.  Node IDs are the same as those used \nby Prof. Watts.                                                            \n                                                                           \nThese data can be cited as:                                                \n                                                                           \n  D. J. Watts and S. H. Strogatz, \"Collective dynamics of `small-world     \n  networks\", Nature 393, 440-442 (1998).                                   \n                                                                           \nNote by Tim Davis: this graph has the same number of nodes and edges       \nas the Pajek/USpowerGrid graph.  They are related as follows:              \n                                                                           \n   Prob1 = UFget ('Newman/power')                                          \n   Prob2 = UFget ('Pajek/USpowerGrid')                                     \n   A = Prob1.A ;                                                           \n   B = Prob2.B ;                                                           \n   n = size (A,1) ;                                                        \n   p = [2:n 1] ;                                                           \n   isequal (A (p,p), B)                                                    \n                                                                           \nThis is because of the way the Pajek data set converted 0-based node IDs   \nto 1-based.  In the Pajek set, node 0 is renamed node n, and this          \ntranslation was then imported into the Pajek/ Group in the UF collection.  \nThe standard convention in MATLAB, and (elsewhere) in the UF Collection,   \nis to map nodes 0:n-1 of a zero-based graph to 1:n.  The latter translation\npreserves the relative numbering of all the nodes; the Pajek translation   \ndoes not.                                                                  \n                                                                           \nAlthough technically Newman/power is a duplicate matrix, I have added it   \nto the UF Collection to preserve the original relative node ordering.      \n
2405`Arenas`PGPgiantcompo`10680`10680`48632`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`M. Boguna, R. Pastor-Satorras, A. Diaz-Guillera, A. Arenas`A. Arenas`2004`undirected multigraph`\nArenas set: PGP network                                          \nhttp://deim.urv.cat/~aarenas/data/welcome.htm                    \n                                                                 \nGraph of the largest component of the network of users of the    \nPretty-Good-Privacy algorithm for secure information interchange.\nData compiled by members of Alex Arenas' group.                  \nReference: M. Boguna, R. Pastor-Satorras, A.  Diaz-Guilera and   \nA. Arenas, Physical Review E, vol. 70, 056122 (2004).            \n
2406`Arenas`jazz`198`198`5484`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`P. Gleiser, L. Danon`A. Arenas`2003`undirected multigraph`\nArenas set: Jazz musicians network                                         \nhttp://deim.urv.cat/~aarenas/data/welcome.htm                              \n                                                                           \nNetwork of Jazz musicians.  Data compiled by members of Alex Arenas' group.\nReference: P.Gleiser and L. Danon , Adv. Complex Syst.6, 565 (2003).       \n
2407`Arenas`celegans_metabolic`453`453`4065`unknown`unknown`unknown`1`0`symmetric`symmetric`integer`symmetric`no`no`J. Duch, A. Arenas`A. Arenas`2005`undirected multigraph`\nArenas set: C. elegans metabolic network                              \nhttp://deim.urv.cat/~aarenas/data/welcome.htm                         \n                                                                      \nGraph of the metabolic network of C.elegans. Data processed by members\nof Alex Arenas' group.                                                \nReference: Community identification using Extremal Optimization,      \n J. Duch and A. Arenas, Physical Review E , vol. 72, 027104, (2005).  \n
2408`Arenas`email`1133`1133`10902`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Guimera, L. Danon, A. Diaz-Guilera, F. Giralt, A. Arenas`A. Arenas`2003`undirected graph`\nArenas set: email network, Univ. of Rovira i Virgili, Tarragona           \nhttp://deim.urv.cat/~aarenas/data/welcome.htm                             \n                                                                          \nNetwork of e-mail interchanges between members of the Univeristy Rovira   \ni Virgili (Tarragona).  Data compiled by members of Alex Arenas' group.   \nReference: R. Guimera, L. Danon, A. Diaz-Guilera, F. Giralt and A. Arenas,\nPhysical Review E , vol. 68, 065103(R), (2003).                           \n
2409`AG-Monien`3elt`4720`4720`27444`yes`4720`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2410`AG-Monien`3elt_dual`9000`9000`26556`yes`9000`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2411`AG-Monien`airfoil1`4253`4253`24578`yes`4253`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2412`AG-Monien`airfoil1_dual`8034`8034`23626`yes`8034`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2413`AG-Monien`big_dual`30269`30269`89858`yes`30269`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2414`AG-Monien`crack`10240`10240`60760`yes`10240`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2415`AG-Monien`crack_dual`20141`20141`60086`yes`20141`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2416`AG-Monien`grid1`252`252`952`yes`252`2`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2417`AG-Monien`grid1_dual`224`224`840`yes`224`2`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2418`AG-Monien`grid2`3296`3296`12864`yes`3296`2`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2419`AG-Monien`grid2_dual`3136`3136`12224`yes`3136`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2420`AG-Monien`netz4504`1961`1961`5156`no`1344`2`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2421`AG-Monien`netz4504_dual`615`615`2342`yes`615`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2422`AG-Monien`ukerbe1`5981`5981`15704`no`4110`2`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2423`AG-Monien`ukerbe1_dual`1866`1866`7076`yes`1866`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2424`AG-Monien`whitaker3`9800`9800`57978`yes`9800`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2425`AG-Monien`whitaker3_dual`19190`19190`57162`yes`19190`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2426`AG-Monien`brack2`62631`62631`733118`yes`62631`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2427`AG-Monien`wave`156317`156317`2118662`yes`156317`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2428`AG-Monien`diag`2559`2559`8184`no`2390`2`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2429`AG-Monien`L`956`956`3640`yes`956`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2430`AG-Monien`L-9`17983`17983`71192`yes`17983`1`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2431`AG-Monien`stufe`1036`1036`3736`no`1002`142`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2432`AG-Monien`stufe-10`24010`24010`92828`no`23858`282`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2433`AG-Monien`biplane-9`21701`21701`84076`no`21691`277`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2434`AG-Monien`shock-9`36476`36476`142580`no`36448`295`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`2D/3D problem`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n
2435`AG-Monien`bfly`49152`49152`196608`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`undirected graph sequence`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n                                                                               \nGraphs in the bfly sequence:                                                   \n                                                                               \n     1 : BFLY3        :      24 nodes      48 edges      96 nonzeros           \n     2 : BFLY4        :      64 nodes     128 edges     256 nonzeros           \n     3 : BFLY5        :     160 nodes     320 edges     640 nonzeros           \n     4 : BFLY6        :     384 nodes     768 edges    1536 nonzeros           \n     5 : BFLY7        :     896 nodes    1792 edges    3584 nonzeros           \n     6 : BFLY8        :    2048 nodes    4096 edges    8192 nonzeros           \n     7 : BFLY9        :    4608 nodes    9216 edges   18432 nonzeros           \n     8 : BFLY10       :   10240 nodes   20480 edges   40960 nonzeros           \n     9 : BFLY11       :   22528 nodes   45056 edges   90112 nonzeros           \n    10 : BFLY12       :   49152 nodes   98304 edges  196608 nonzeros           \n                                                                               \nThe primary graph (Problem.A) in this sequence is the last graph               \nin the sequence.                                                               \n
2436`AG-Monien`cage`366`366`5124`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`undirected graph sequence`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n                                                                               \nGraphs in the cage sequence:                                                   \n                                                                               \n     1 : cage_3_5     :      10 nodes      15 edges      30 nonzeros           \n     2 : cage_3_6     :      14 nodes      21 edges      42 nonzeros           \n     3 : cage_3_7     :      24 nodes      36 edges      72 nonzeros           \n     4 : cage_3_8     :      30 nodes      45 edges      90 nonzeros           \n     5 : cage_3_9.1   :      58 nodes      87 edges     174 nonzeros           \n     6 : cage_3_9.2   :      58 nodes      87 edges     174 nonzeros           \n     7 : cage_3_9.3   :      58 nodes      87 edges     174 nonzeros           \n     8 : cage_3_9.4   :      58 nodes      87 edges     174 nonzeros           \n     9 : cage_3_9.5   :      58 nodes      87 edges     174 nonzeros           \n    10 : cage_3_9.6   :      58 nodes      87 edges     174 nonzeros           \n    11 : cage_3_9.7   :      58 nodes      87 edges     174 nonzeros           \n    12 : cage_3_9.8   :      58 nodes      87 edges     174 nonzeros           \n    13 : cage_3_9.9   :      58 nodes      87 edges     174 nonzeros           \n    14 : cage_3_9.10  :      58 nodes      87 edges     174 nonzeros           \n    15 : cage_3_9.11  :      58 nodes      87 edges     174 nonzeros           \n    16 : cage_3_9.12  :      58 nodes      87 edges     174 nonzeros           \n    17 : cage_3_9.13  :      58 nodes      87 edges     174 nonzeros           \n    18 : cage_3_9.14  :      58 nodes      87 edges     174 nonzeros           \n    19 : cage_3_9.15  :      58 nodes      87 edges     174 nonzeros           \n    20 : cage_3_9.16  :      58 nodes      87 edges     174 nonzeros           \n    21 : cage_3_9.17  :      58 nodes      87 edges     174 nonzeros           \n    22 : cage_3_9.18  :      58 nodes      87 edges     174 nonzeros           \n    23 : cage_3_10.1  :      70 nodes     105 edges     210 nonzeros           \n    24 : cage_3_10.2  :      70 nodes     105 edges     210 nonzeros           \n    25 : cage_3_10.3  :      70 nodes     105 edges     210 nonzeros           \n    26 : cage_3_11    :     112 nodes     168 edges     336 nonzeros           \n    27 : cage_3_12    :     126 nodes     189 edges     378 nonzeros           \n    28 : cage_3_13    :     272 nodes     408 edges     816 nonzeros           \n    29 : cage_3_14    :     406 nodes     609 edges    1218 nonzeros           \n    30 : cage_3_15    :     620 nodes     930 edges    1860 nonzeros           \n    31 : cage_4_5     :      19 nodes      38 edges      76 nonzeros           \n    32 : cage_4_6     :      26 nodes      52 edges     104 nonzeros           \n    33 : cage_4_7     :      76 nodes     152 edges     304 nonzeros           \n    34 : cage_4_8     :      80 nodes     160 edges     320 nonzeros           \n    35 : cage_5_5     :      30 nodes      75 edges     150 nonzeros           \n    36 : cage_5_6     :      42 nodes     105 edges     210 nonzeros           \n    37 : cage_6_6     :      62 nodes     186 edges     372 nonzeros           \n    38 : cage_7_5     :      50 nodes     175 edges     350 nonzeros           \n    39 : cage_8_5     :      94 nodes     376 edges     752 nonzeros           \n    40 : cage_8_6     :     114 nodes     456 edges     912 nonzeros           \n    41 : cage_9_5     :     118 nodes     531 edges    1062 nonzeros           \n    42 : cage_9_6     :     146 nodes     657 edges    1314 nonzeros           \n    43 : cage_10_6    :     182 nodes     910 edges    1820 nonzeros           \n    44 : cage_12_6    :     266 nodes    1596 edges    3192 nonzeros           \n    45 : cage_14_6    :     366 nodes    2562 edges    5124 nonzeros           \n                                                                               \nThe primary graph (Problem.A) in this sequence is the last graph               \nin the sequence.                                                               \n
2437`AG-Monien`cca`49152`49152`139264`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`undirected graph sequence`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n                                                                               \nGraphs in the cca sequence:                                                    \n                                                                               \n     1 : CCA3         :      24 nodes      28 edges      56 nonzeros           \n     2 : CCA4         :      64 nodes      80 edges     160 nonzeros           \n     3 : CCA5         :     160 nodes     208 edges     416 nonzeros           \n     4 : CCA6         :     384 nodes     512 edges    1024 nonzeros           \n     5 : CCA7         :     896 nodes    1216 edges    2432 nonzeros           \n     6 : CCA8         :    2048 nodes    2816 edges    5632 nonzeros           \n     7 : CCA9         :    4608 nodes    6400 edges   12800 nonzeros           \n     8 : CCA10        :   10240 nodes   14336 edges   28672 nonzeros           \n     9 : CCA11        :   22528 nodes   31744 edges   63488 nonzeros           \n    10 : CCA12        :   49152 nodes   69632 edges  139264 nonzeros           \n                                                                               \nThe primary graph (Problem.A) in this sequence is the last graph               \nin the sequence.                                                               \n
2438`AG-Monien`ccc`49152`49152`147456`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`undirected graph sequence`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n                                                                               \nGraphs in the ccc sequence:                                                    \n                                                                               \n     1 : CCC3         :      24 nodes      36 edges      72 nonzeros           \n     2 : CCC4         :      64 nodes      96 edges     192 nonzeros           \n     3 : CCC5         :     160 nodes     240 edges     480 nonzeros           \n     4 : CCC6         :     384 nodes     576 edges    1152 nonzeros           \n     5 : CCC7         :     896 nodes    1344 edges    2688 nonzeros           \n     6 : CCC8         :    2048 nodes    3072 edges    6144 nonzeros           \n     7 : CCC9         :    4608 nodes    6912 edges   13824 nonzeros           \n     8 : CCC10        :   10240 nodes   15360 edges   30720 nonzeros           \n     9 : CCC11        :   22528 nodes   33792 edges   67584 nonzeros           \n    10 : CCC12        :   49152 nodes   73728 edges  147456 nonzeros           \n                                                                               \nThe primary graph (Problem.A) in this sequence is the last graph               \nin the sequence.                                                               \n
2439`AG-Monien`debr`1048576`1048576`4194298`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`undirected graph sequence`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n                                                                               \nGraphs in the debr sequence:                                                   \n                                                                               \n     1 : DEBR3        :       8 nodes      13 edges      26 nonzeros           \n     2 : DEBR4        :      16 nodes      29 edges      58 nonzeros           \n     3 : DEBR5        :      32 nodes      61 edges     122 nonzeros           \n     4 : DEBR6        :      64 nodes     125 edges     250 nonzeros           \n     5 : DEBR7        :     128 nodes     253 edges     506 nonzeros           \n     6 : DEBR8        :     256 nodes     509 edges    1018 nonzeros           \n     7 : DEBR9        :     512 nodes    1021 edges    2042 nonzeros           \n     8 : DEBR10       :    1024 nodes    2045 edges    4090 nonzeros           \n     9 : DEBR11       :    2048 nodes    4093 edges    8186 nonzeros           \n    10 : DEBR12       :    4096 nodes    8189 edges   16378 nonzeros           \n    11 : DEBR13       :    8192 nodes   16381 edges   32762 nonzeros           \n    12 : DEBR14       :   16384 nodes   32765 edges   65530 nonzeros           \n    13 : DEBR15       :   32768 nodes   65533 edges  131066 nonzeros           \n    14 : DEBR16       :   65536 nodes  131069 edges  262138 nonzeros           \n    15 : DEBR17       :  131072 nodes  262141 edges  524282 nonzeros           \n    16 : DEBR18       :  262144 nodes  524285 edges 1048570 nonzeros           \n    17 : DEBR19       :  524288 nodes 1048573 edges 2097146 nonzeros           \n    18 : DEBR20       : 1048576 nodes 2097149 edges 4194298 nonzeros           \n                                                                               \nThe primary graph (Problem.A) in this sequence is the last graph               \nin the sequence.                                                               \n
2440`AG-Monien`se`32768`32768`98300`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Diekmann, R. Preis`R. Diekmann, R. Preis`1998`undirected graph sequence`\nAG-Monien Graph Collection, Ralf Diekmann and Robert Preis                     \nhttp://www2.cs.uni-paderborn.de/fachbereich/AG/monien/RESEARCH/PART/graphs.html\n                                                                               \nA collection of test graphs from various sources.  Many of the graphs          \ninclude XY or XYZ coordinates.  This set also includes some graphs from        \nthe Harwell-Boeing collection, the NASA matrices, and some random matrices     \nwhich are not included here in the AG-Monien/ group of the UF Collection.      \nIn addition, two graphs already appear in other groups:                        \n                                                                               \n   AG-Monien/big : same as Nasa/barth5, Pothen/barth5 (not included here)      \n   AG-Monien/cage_3_11 : same as Pajek/GD98_c (included here)                  \n                                                                               \nThe AG-Monien/GRID subset is not included.  It contains square grids that      \nare already well-represented in the UF Collection.                             \n                                                                               \nSix of the problem sets are included as sequences, each sequence being         \na single problem instance in the UF Collection:                                \n                                                                               \n   bfly:  10 butterfly graphs 3..12                                            \n   cage:  45 cage graphs 3..12                                                 \n   cca:   10 cube-connected cycle graphs, no wrap                              \n   ccc:   10 cube-connected cycle graphs, with wrap                            \n   debr:  18 De Bruijn graphs                                                  \n   se:    13 shuffle-exchange graphs                                           \n                                                                               \nProblem.aux.G{:} are the graphs in these 6 sequences.  Problem.aux.Gname{:}    \nare the original names of each graph, and Problemm.aux.Gcoord{:} are the       \nxy or xyz coordinates of each node, if present.                                \n                                                                               \nGraphs in the se sequence:                                                     \n                                                                               \n     1 : SE3          :       8 nodes      10 edges      20 nonzeros           \n     2 : SE4          :      16 nodes      21 edges      42 nonzeros           \n     3 : SE5          :      32 nodes      46 edges      92 nonzeros           \n     4 : SE6          :      64 nodes      93 edges     186 nonzeros           \n     5 : SE7          :     128 nodes     190 edges     380 nonzeros           \n     6 : SE8          :     256 nodes     381 edges     762 nonzeros           \n     7 : SE9          :     512 nodes     766 edges    1532 nonzeros           \n     8 : SE10         :    1024 nodes    1533 edges    3066 nonzeros           \n     9 : SE11         :    2048 nodes    3070 edges    6140 nonzeros           \n    10 : SE12         :    4096 nodes    6141 edges   12282 nonzeros           \n    11 : SE13         :    8192 nodes   12286 edges   24572 nonzeros           \n    12 : SE14         :   16384 nodes   24573 edges   49146 nonzeros           \n    13 : SE15         :   32768 nodes   49150 edges   98300 nonzeros           \n                                                                               \nThe primary graph (Problem.A) in this sequence is the last graph               \nin the sequence.                                                               \n
2441`LAW`cnr-2000`325557`325557`3216152`unknown`unknown`unknown`100977`0`25%`25%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2000`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/cnr-2000                                                         \n                                                                     \nA very small crawl of the Italian CNR domain.                        \n
2442`LAW`in-2004`1382908`1382908`16917053`unknown`unknown`unknown`367675`0`36%`36%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2004`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/in-2004                                                          \n                                                                     \nA small crawl of the .in domain performed for the Nagaoka            \nUniversity of Technology.                                            \n
2443`LAW`eu-2005`862664`862664`19235140`unknown`unknown`unknown`90768`0`28%`28%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2005`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/eu-2005                                                          \n                                                                     \nA small crawl of the .eu domain.  This graph exhibits                \na very low locality, probably because the crawl was quite            \nshallow (and the chosen domain is quite artificial anyway).          \n
2444`LAW`enron`69244`69244`276143`unknown`unknown`unknown`60916`0`15%`15%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2004`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/enron                                                            \n                                                                     \nThis dataset was made public by the Federal Energy Regulatory        \nCommission during its investigations: it is a partially              \nanonymised corpus of e-mail messages exchanged by some Enron         \nemployees (mostly part of the senior management). We turned          \nthis dataset into a directed graph, whose nodes represent            \npeople and with an arc from x to y whenever y was the                \nrecipient of (at least) a message sent by x.                         \n
2445`LAW`amazon-2008`735323`735323`5158388`unknown`unknown`unknown`90660`0`63%`63%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2008`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/amazon-2008                                                      \n                                                                     \nA symmetric graph describing similarity among books as reported      \nby the Amazon store. More precisely the data was obtained using      \nthe Amazon E- Commerce Service APIs using SimilarityLookup queries.  \n
2446`LAW`ljournal-2008`5363260`5363260`79023142`unknown`unknown`unknown`1119171`0`73%`73%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2008`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/ljournal-2008                                                    \n                                                                     \nLiveJournal is a virtual-community social site started in 1999:      \nnodes are users and there is an arc from x to y if x registered y    \namong his friends. It is not necessary to ask y permission,          \nso the graph is directed). This graph is the snapshot used by        \nFlavio Chierichetti, Ravi Kumar, Silvio Lattanzi, Michael            \nMitzenmacher, Alessandro Panconesi, and Prabhakar Raghavan in        \n\"On compressing social networks\", KDD '09: Proceedings of the        \n15th ACM SIGKDD international conference on Knowledge discovery      \nand data mining, pages 219-228, 2009, ACM press, and was kindly      \nprovided by the authors.                                             \n
2447`LAW`hollywood-2009`1139905`1139905`113891327`unknown`unknown`unknown`44508`0`symmetric`symmetric`binary`symmetric`yes`unknown`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2009`undirected graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/hollywood-2009                                                   \n                                                                     \nOne of the most popular undirected social graphs: the graph of       \nmovie actors. Vertices are actors, and two actors are joined         \nby an edge whenever they appeared in a movie together.               \n
2448`LAW`dblp-2010`326186`326186`1615400`unknown`unknown`unknown`48493`0`symmetric`symmetric`binary`symmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2010`undirected graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/dblp-2010                                                        \n                                                                     \nDBLP is a bibliography service from which an undirected scientific   \ncollaboration network can be extracted: each vertex represents a     \nscientist and two vertices are connected if they have worked together\non an article. This symmetric graph has been obtained in June 2010   \nfrom the standard DBLP download (http://dblp.uni-trier.de/xml/).     \n
2449`LAW`webbase-2001`118142155`118142155`1019903190`unknown`unknown`unknown`41126852`0`28%`28%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2004`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/webbase-2001                                                     \n                                                                     \nThis graph has been obtained from the 2001 crawl performed by the    \nWebBase crawler. The data provided by WebBase has been filtered to   \neliminate invalid links and to normalise URLs. The experiments       \nreported in reports \"The WebGraph Framework I: Compression           \nTechniques\" and \"Codes for the World-Wide Web\", (both at             \nhttp://law.dsi.unimi.it/ ) are based on this graph and on            \nuk-2002. Note that for historical reasons the URLs of this           \ngraph are coded in ISO-8859-1.                                       \n
2450`LAW`uk-2002`18520486`18520486`298113762`unknown`unknown`unknown`3887634`0`21%`21%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2002`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/uk-2002                                                          \n                                                                     \nThis graph has been obtained from a 2002 crawl of the .uk            \ndomain performed by UbiCrawler.                                      \n
2451`LAW`indochina-2004`7414866`7414866`194109311`unknown`unknown`unknown`1749052`0`42%`42%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2004`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/indochina-2004                                                   \n                                                                     \nA fairly large crawl of the country domains of Indochina             \nperformed for the Nagaoka University of Technology.                  \n
2452`LAW`it-2004`41291594`41291594`1150725436`unknown`unknown`unknown`6753961`0`19%`19%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2004`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/it-2004                                                          \n                                                                     \nA fairly large crawl of the .it domain.                              \n
2453`LAW`arabic-2005`22744080`22744080`639999458`unknown`unknown`unknown`4000414`0`24%`24%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2005`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/arabic-2005                                                      \n                                                                     \nThis graph has been obtained from a 2005 crawl performed             \nby UbiCrawler. The crawl aimed at countries whose web sites          \ncould contain (at least potentially) pages written in Arabic.        \n
2454`LAW`sk-2005`50636154`50636154`1949412601`unknown`unknown`unknown`8815057`0`12%`12%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2005`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/sk-2005                                                          \n                                                                     \nThis graph has been obtained from a 2005 crawl of the .sk            \ndomain performed by UbiCrawler for a group of Slovakian              \nresearchers. An interesting feature of this crawl is that            \nwe were provided a very large seed.                                  \n
2455`LAW`uk-2005`39459925`39459925`936364282`unknown`unknown`unknown`5811041`0`30%`30%`binary`unsymmetric`no`no`P. Boldi, M. Rosa, M. Santini, S. Vigna`P. Boldi, M. Rosa, M. Santini, S. Vigna`2005`directed graph`\nLaboratory for Web Algorithmics, P. Boldi et al., Univ of Milano     \nhttp://law.dsi.unimi.it/index.php                                    \nPaolo Boldi, Marco Rosa, Massimo Santini, Sebastiano Vigna           \n                                                                     \nReferences:                                                          \n[1] \"The WebGraph Framework I: Compression Techniques,\" Paolo Boldi  \n    and Sebastiano Vigna, Proc. of the Thirteenth International      \n    World Wide Web Conference (WWW 2004), 2004, Manhattan, USA,      \n    pp. 595--601, ACM Press.                                         \n                                                                     \n[2] \"Layered Label Propagation: A MultiResolution Coordinate-Free    \n    Ordering for Compressing Social Networks,\" Paolo Boldi, Marco    \n    Rosa, Massimo Santini, and Sebastiano Vigna, Proceedings of the  \n    20th international conference on World Wide Web, 2011, ACM Press.\n                                                                     \n[3] \"UbiCrawler: A Scalable Fully Distributed Web Crawler\",          \n    Paolo Boldi, Bruno Codenotti, Massimo Santini, and Sebastiano    \n    Vigna, Software: Practice & Experience, 2004, vol 34, no. 8,     \n    pp. 711--726                                                     \n                                                                     \n                                                                     \nLAW/uk-2005                                                          \n                                                                     \nThis graph has been obtained from a 2005 crawl of the .uk            \ndomain performed by UbiCrawler. The crawl was very shallow,          \nand aimed at gathering a large number of hosts, but a small          \nnumber of pages from each host. Note that before April 2006          \nthe URL order was not exactly lexicographical due to some            \nlocale issues (the graph was anyway correct). The current            \ndataset has been correctly permuted so that URLs are ordered         \nlexicographically.                                                   \n
2456`DIMACS10`caidaRouterLevel`192244`192244`1218132`unknown`unknown`unknown`308`0`symmetric`symmetric`binary`symmetric`no`no`unknown`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nclustering:  Clustering Benchmarks                                      \n                                                                        \nThese real-world graphs are often used as benchmarks in the graph       \nclustering and community detection communities.  All but 4 of the 27    \ngraphs already appear in the UF collection in other groups.  The        \nDIMACS10 version is always symmetric, binary, and with zero-free        \ndiagonal.  The version in the UF collection may not have those          \nproperties, but in those cases, if the pattern of the UF matrix         \nis symmetrized and the diagonal removed, the result is the DIMACS10     \ngraph.                                                                  \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nclustering/adjnoun                     Newman/adjoun                    \nclustering/as-22july06                 Newman/as-22july06               \nclustering/astro-ph                    Newman/astro-ph                  \nclustering/caidaRouterLevel      *     DIMACS10/caidaRouterLevel        \nclustering/celegans_metabolic          Arenas/celegans_metabolic        \nclustering/celegansneural              Newman/celegansneural            \nclustering/chesapeake            *     DIMACS10/chesapeake              \nclustering/cnr-2000                    LAW/cnr-2000                     \nclustering/cond-mat-2003               Newman/cond-mat-2003             \nclustering/cond-mat-2005               Newman/cond-mat-2005             \nclustering/cond-mat                    Newman/cond-mat                  \nclustering/dolphins                    Newman/dolphins                  \nclustering/email                       Arenas/email                     \nclustering/eu-2005                     LAW/eu-2005                      \nclustering/football                    Newman/football                  \nclustering/hep-th                      Newman/hep-th                    \nclustering/in-2004                     LAW/in-2004                      \nclustering/jazz                        Arenas/jazz                      \nclustering/karate                      Arenas/karate                    \nclustering/lesmis                      Newman/lesmis                    \nclustering/netscience                  Newman/netscience                \nclustering/PGPgiantcompo               Arenas/PGPgiantcompo             \nclustering/polblogs                    Newman/polblogs                  \nclustering/polbooks                    Newman/polbooks                  \nclustering/power                       Newman/power                     \nclustering/road_central          *     DIMACS10/road_central            \nclustering/road_usa              *     DIMACS10/road_usa                \n
2457`DIMACS10`chesapeake`39`39`340`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`unknown`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nclustering:  Clustering Benchmarks                                      \n                                                                        \nThese real-world graphs are often used as benchmarks in the graph       \nclustering and community detection communities.  All but 4 of the 27    \ngraphs already appear in the UF collection in other groups.  The        \nDIMACS10 version is always symmetric, binary, and with zero-free        \ndiagonal.  The version in the UF collection may not have those          \nproperties, but in those cases, if the pattern of the UF matrix         \nis symmetrized and the diagonal removed, the result is the DIMACS10     \ngraph.                                                                  \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nclustering/adjnoun                     Newman/adjoun                    \nclustering/as-22july06                 Newman/as-22july06               \nclustering/astro-ph                    Newman/astro-ph                  \nclustering/caidaRouterLevel      *     DIMACS10/caidaRouterLevel        \nclustering/celegans_metabolic          Arenas/celegans_metabolic        \nclustering/celegansneural              Newman/celegansneural            \nclustering/chesapeake            *     DIMACS10/chesapeake              \nclustering/cnr-2000                    LAW/cnr-2000                     \nclustering/cond-mat-2003               Newman/cond-mat-2003             \nclustering/cond-mat-2005               Newman/cond-mat-2005             \nclustering/cond-mat                    Newman/cond-mat                  \nclustering/dolphins                    Newman/dolphins                  \nclustering/email                       Arenas/email                     \nclustering/eu-2005                     LAW/eu-2005                      \nclustering/football                    Newman/football                  \nclustering/hep-th                      Newman/hep-th                    \nclustering/in-2004                     LAW/in-2004                      \nclustering/jazz                        Arenas/jazz                      \nclustering/karate                      Arenas/karate                    \nclustering/lesmis                      Newman/lesmis                    \nclustering/netscience                  Newman/netscience                \nclustering/PGPgiantcompo               Arenas/PGPgiantcompo             \nclustering/polblogs                    Newman/polblogs                  \nclustering/polbooks                    Newman/polbooks                  \nclustering/power                       Newman/power                     \nclustering/road_central          *     DIMACS10/road_central            \nclustering/road_usa              *     DIMACS10/road_usa                \n
2458`DIMACS10`road_central`14081816`14081816`33866826`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`unknown`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nclustering:  Clustering Benchmarks                                      \n                                                                        \nThese real-world graphs are often used as benchmarks in the graph       \nclustering and community detection communities.  All but 4 of the 27    \ngraphs already appear in the UF collection in other groups.  The        \nDIMACS10 version is always symmetric, binary, and with zero-free        \ndiagonal.  The version in the UF collection may not have those          \nproperties, but in those cases, if the pattern of the UF matrix         \nis symmetrized and the diagonal removed, the result is the DIMACS10     \ngraph.                                                                  \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nclustering/adjnoun                     Newman/adjoun                    \nclustering/as-22july06                 Newman/as-22july06               \nclustering/astro-ph                    Newman/astro-ph                  \nclustering/caidaRouterLevel      *     DIMACS10/caidaRouterLevel        \nclustering/celegans_metabolic          Arenas/celegans_metabolic        \nclustering/celegansneural              Newman/celegansneural            \nclustering/chesapeake            *     DIMACS10/chesapeake              \nclustering/cnr-2000                    LAW/cnr-2000                     \nclustering/cond-mat-2003               Newman/cond-mat-2003             \nclustering/cond-mat-2005               Newman/cond-mat-2005             \nclustering/cond-mat                    Newman/cond-mat                  \nclustering/dolphins                    Newman/dolphins                  \nclustering/email                       Arenas/email                     \nclustering/eu-2005                     LAW/eu-2005                      \nclustering/football                    Newman/football                  \nclustering/hep-th                      Newman/hep-th                    \nclustering/in-2004                     LAW/in-2004                      \nclustering/jazz                        Arenas/jazz                      \nclustering/karate                      Arenas/karate                    \nclustering/lesmis                      Newman/lesmis                    \nclustering/netscience                  Newman/netscience                \nclustering/PGPgiantcompo               Arenas/PGPgiantcompo             \nclustering/polblogs                    Newman/polblogs                  \nclustering/polbooks                    Newman/polbooks                  \nclustering/power                       Newman/power                     \nclustering/road_central          *     DIMACS10/road_central            \nclustering/road_usa              *     DIMACS10/road_usa                \n
2459`DIMACS10`road_usa`23947347`23947347`57708624`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`unknown`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nclustering:  Clustering Benchmarks                                      \n                                                                        \nThese real-world graphs are often used as benchmarks in the graph       \nclustering and community detection communities.  All but 4 of the 27    \ngraphs already appear in the UF collection in other groups.  The        \nDIMACS10 version is always symmetric, binary, and with zero-free        \ndiagonal.  The version in the UF collection may not have those          \nproperties, but in those cases, if the pattern of the UF matrix         \nis symmetrized and the diagonal removed, the result is the DIMACS10     \ngraph.                                                                  \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nclustering/adjnoun                     Newman/adjoun                    \nclustering/as-22july06                 Newman/as-22july06               \nclustering/astro-ph                    Newman/astro-ph                  \nclustering/caidaRouterLevel      *     DIMACS10/caidaRouterLevel        \nclustering/celegans_metabolic          Arenas/celegans_metabolic        \nclustering/celegansneural              Newman/celegansneural            \nclustering/chesapeake            *     DIMACS10/chesapeake              \nclustering/cnr-2000                    LAW/cnr-2000                     \nclustering/cond-mat-2003               Newman/cond-mat-2003             \nclustering/cond-mat-2005               Newman/cond-mat-2005             \nclustering/cond-mat                    Newman/cond-mat                  \nclustering/dolphins                    Newman/dolphins                  \nclustering/email                       Arenas/email                     \nclustering/eu-2005                     LAW/eu-2005                      \nclustering/football                    Newman/football                  \nclustering/hep-th                      Newman/hep-th                    \nclustering/in-2004                     LAW/in-2004                      \nclustering/jazz                        Arenas/jazz                      \nclustering/karate                      Arenas/karate                    \nclustering/lesmis                      Newman/lesmis                    \nclustering/netscience                  Newman/netscience                \nclustering/PGPgiantcompo               Arenas/PGPgiantcompo             \nclustering/polblogs                    Newman/polblogs                  \nclustering/polbooks                    Newman/polbooks                  \nclustering/power                       Newman/power                     \nclustering/road_central          *     DIMACS10/road_central            \nclustering/road_usa              *     DIMACS10/road_usa                \n
2460`DIMACS10`citationCiteseer`268495`268495`2313294`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Geisberger, P. Sanders, and D. Schultes`H. Meyerhenke`2008`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ncoauthor:  Citation Networks                                            \n                                                                        \nThese graphs are examples of social networks used in R. Geisberger, P.  \nSanders, and D. Schultes. Better approximation of betweenness           \ncentrality. In 10th Workshop on Algorithm Engineering and               \nExperimentation, pages 90-108, San Francisco, 2008. SIAM.               \n
2461`DIMACS10`coAuthorsCiteseer`227320`227320`1628268`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Geisberger, P. Sanders, and D. Schultes`H. Meyerhenke`2008`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ncoauthor:  Citation Networks                                            \n                                                                        \nThese graphs are examples of social networks used in R. Geisberger, P.  \nSanders, and D. Schultes. Better approximation of betweenness           \ncentrality. In 10th Workshop on Algorithm Engineering and               \nExperimentation, pages 90-108, San Francisco, 2008. SIAM.               \n
2462`DIMACS10`coAuthorsDBLP`299067`299067`1955352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Geisberger, P. Sanders, and D. Schultes`H. Meyerhenke`2008`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ncoauthor:  Citation Networks                                            \n                                                                        \nThese graphs are examples of social networks used in R. Geisberger, P.  \nSanders, and D. Schultes. Better approximation of betweenness           \ncentrality. In 10th Workshop on Algorithm Engineering and               \nExperimentation, pages 90-108, San Francisco, 2008. SIAM.               \n
2463`DIMACS10`coPapersCiteseer`434102`434102`32073440`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Geisberger, P. Sanders, and D. Schultes`H. Meyerhenke`2008`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ncoauthor:  Citation Networks                                            \n                                                                        \nThese graphs are examples of social networks used in R. Geisberger, P.  \nSanders, and D. Schultes. Better approximation of betweenness           \ncentrality. In 10th Workshop on Algorithm Engineering and               \nExperimentation, pages 90-108, San Francisco, 2008. SIAM.               \n
2464`DIMACS10`coPapersDBLP`540486`540486`30491458`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`R. Geisberger, P. Sanders, and D. Schultes`H. Meyerhenke`2008`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ncoauthor:  Citation Networks                                            \n                                                                        \nThese graphs are examples of social networks used in R. Geisberger, P.  \nSanders, and D. Schultes. Better approximation of betweenness           \ncentrality. In 10th Workshop on Algorithm Engineering and               \nExperimentation, pages 90-108, San Francisco, 2008. SIAM.               \n
2465`DIMACS10`delaunay_n10`1024`1024`6112`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2466`DIMACS10`delaunay_n11`2048`2048`12254`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2467`DIMACS10`delaunay_n12`4096`4096`24528`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2468`DIMACS10`delaunay_n13`8192`8192`49094`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2469`DIMACS10`delaunay_n14`16384`16384`98244`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2470`DIMACS10`delaunay_n15`32768`32768`196548`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2471`DIMACS10`delaunay_n16`65536`65536`393150`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2472`DIMACS10`delaunay_n17`131072`131072`786352`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2473`DIMACS10`delaunay_n18`262144`262144`1572792`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2474`DIMACS10`delaunay_n19`524288`524288`3145646`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2475`DIMACS10`delaunay_n20`1048576`1048576`6291372`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2476`DIMACS10`delaunay_n21`2097152`2097152`12582816`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2477`DIMACS10`delaunay_n22`4194304`4194304`25165738`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2478`DIMACS10`delaunay_n23`8388608`8388608`50331568`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2479`DIMACS10`delaunay_n24`16777216`16777216`100663202`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nDelaunay:  Delaunay Graphs                                              \n                                                                        \nThese files have been generated as Delaunay triangulations of random    \npoints in the unit square.                                              \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010                         \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2480`DIMACS10`hugebubbles-00000`18318143`18318143`54940162`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2481`DIMACS10`hugebubbles-00010`19458087`19458087`58359528`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2482`DIMACS10`hugebubbles-00020`21198119`21198119`63580358`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2483`DIMACS10`hugetrace-00000`4588484`4588484`13758266`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2484`DIMACS10`hugetrace-00010`12057441`12057441`36164358`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2485`DIMACS10`hugetrace-00020`16002413`16002413`47997626`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2486`DIMACS10`hugetric-00000`5824554`5824554`17467046`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2487`DIMACS10`hugetric-00010`6592765`6592765`19771708`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2488`DIMACS10`hugetric-00020`7122792`7122792`21361554`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`O. Marquardt, S. Schamberger`H. Meyerhenke`2005`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \ndyn-frames:  Frames from 2D Dynamic Simulations                         \n                                                                        \nThese fies have been created with the generator described in Oliver     \nMarquardt, Stefan Schamberger: Open Benchmarks for Load Balancing       \nHeuristics in Parallel Adaptive Finite Element Computations. In Proc.   \nInternational Conference on Parallel and Distributed Processing         \nTechniques and Applications (PDPTA 2005), Volume 2, pp. 685-691. CSREA  \nPress 2005, ISBN 1-932415-59-9685-691.                                  \n                                                                        \nThe graphs are meshes taken from indivudual frames of a dynamic         \nsequence that resembles two-dimensional adaptive numerical simulations. \nSmaller versions of these files (and their dynamic sequences as videos) \ncan be found on Stefan Schamberger's website (                          \nhttp://www.upb.de/cs/schaum/benchmark.html ) dedicated to these         \nbenchmarks. The files presented here are the frames 0, 10, and 20 of    \nthe sequences, respectively.                                            \n
2489`DIMACS10`kron_g500-logn16`65536`65536`4912469`unknown`unknown`unknown`10217`0`symmetric`symmetric`integer`symmetric`no`no`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`2010`undirected multigraph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nKronecker:  Kronecker Generator Graphs                                  \n                                                                        \nThe original Kronecker files contain self-loops and multiple edges.     \nThese properties are also present in real-world data sets. However,     \nsome tools cannot handle these \"artifacts\" at the moment. That is why   \nwe present \"cleansed\" versions of the data sets as well.  For the       \nChallenge you should expect to be confronted with the original data     \nwith self-loops and multiple edges. However, the final decision on      \nthis issue will be made based on participant feedback.                  \n                                                                        \nAll files have been generated with the R-MAT parameters A=0.57, B=0.19, \nC=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of     \nedges equals 48*n, where n is the number of vertices. Details about the \ngenerator and the parameter meanings can be found on the Graph500       \nwebsite.  ( http://www.graph500.org/Specifications.html )               \n                                                                        \nThere are 12 graphs in the DIMACS10 test set at                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.  \nOne graph in each pair is a multigraph, with self-edges.  The other     \ngraph is the nonzero pattern of the first (binary), with self-edges     \nremoved.  MATLAB cannot directly represent multigraph, so in the UF     \nCollection the unweighted multigraph G is represented as a matrix A     \nwhere A(i,j) is an integer equal to the number edges (i,j) in G.        \n                                                                        \nThe binary graphs include the word 'simple' in their                    \nname In the UF Collection, only the multigraph is included,             \nsince the simple graph can be constructed from the multigraph.          \nIf A is the multigraph, the simple graph S can be computed as:          \n                                                                        \n   S = spones (tril (A,-1)) + spones (triu (A,1)) ;                     \n                                                                        \nDIMACS10 graph:                        UF matrix:                       \n---------------                        -------------                    \nkronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16        \nkronecker/kron_g500-simple-logn16                                       \n                                                                        \nkronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17        \nkronecker/kron_g500-simple-logn17                                       \n                                                                        \nkronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18        \nkronecker/kron_g500-simple-logn18                                       \n                                                                        \nkronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19        \nkronecker/kron_g500-simple-logn19                                       \n                                                                        \nkronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20        \nkronecker/kron_g500-simple-logn20                                       \n                                                                        \nkronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21        \nkronecker/kron_g500-simple-logn21                                       \n                                                                        \n                                                                        \nReferences: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.     \nWheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May   \n5, 2010.                                                                \n                                                                        \nD.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.       \nMadduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact        \nApplications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5           \nSeptember 2007.                                                         \n                                                                        \nD. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model     \nfor graph mining, SIAM Data Mining 2004.                                \n                                                                        \nSection 17.6, Algorithms in C (third edition). Part 5 Graph             \nAlgorithms, Robert Sedgewick (Programs 17.7 and 17.8)                   \n                                                                        \nP. Sanders, Random Permutations on Distributed, External and            \nHierarchical Memory, Information Processing Letters 67 (1988) pp        \n305-309.                                                                \n                                                                        \n\"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C. \nMurphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas    \nGregor, Andrew Lumsdaine, IEEE International Symposium on Workload      \nCharacterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.     \n                                                                        \n---- sample code for generating these matrices:                         \n                                                                        \nfunction ij = kronecker_generator (SCALE, edgefactor)                   \n%% Generate an edgelist according to the Graph500                       \n%% parameters.  In this sample, the edge list is                        \n%% returned in an array with two rows, where StartVertex                \n%% is first row and EndVertex is the second.  The vertex                \n%% labels start at zero.                                                \n%%                                                                      \n%% Example, creating a sparse matrix for viewing:                       \n%%   ij = kronecker_generator (10, 16);                                 \n%%   G = sparse (ij(1,:)+1, ij(2,:)+1, ones (1, size (ij, 2)));         \n%%   spy (G);                                                           \n%% The spy plot should appear fairly dense. Any locality                \n%% is removed by the final permutations.                                \n                                                                        \n  %% Set number of vertices.                                            \n  N = 2^SCALE;                                                          \n                                                                        \n  %% Set number of edges.                                               \n  M = edgefactor * N;                                                   \n                                                                        \n  %% Set initiator probabilities.                                       \n  [A, B, C] = deal (0.57, 0.19, 0.19);                                  \n                                                                        \n  %% Create index arrays.                                               \n  ij = ones (2, M);                                                     \n  %% Loop over each order of bit.                                       \n  ab = A + B;                                                           \n  c_norm = C/(1 - (A + B));                                             \n  a_norm = A/(A + B);                                                   \n                                                                        \n  for ib = 1:SCALE,                                                     \n    %% Compare with probabilities and set bits of indices.              \n    ii_bit = rand (1, M) > ab;                                          \n    jj_bit = rand (1, M) > ( c_norm * ii_bit + a_norm * not (ii_bit) ); \n    ij = ij + 2^(ib-1) * [ii_bit; jj_bit];                              \n  end                                                                   \n                                                                        \n  %% Permute vertex labels                                              \n  p = randperm (N);                                                     \n  ij = p(ij);                                                           \n                                                                        \n  %% Permute the edge list                                              \n  p = randperm (M);                                                     \n  ij = ij(:, p);                                                        \n                                                                        \n  %% Adjust to zero-based labels.                                       \n  ij = ij - 1;                                                          \n                                                                        \nfunction G = kernel_1 (ij)                                              \n%% Compute a sparse adjacency matrix representation                     \n%% of the graph with edges from ij.                                     \n                                                                        \n  %% Remove self-edges.                                                 \n  ij(:, ij(1,:) == ij(2,:)) = [];                                       \n  %% Adjust away from zero labels.                                      \n  ij = ij + 1;                                                          \n  %% Find the maximum label for sizing.                                 \n  N = max (max (ij));                                                   \n  %% Create the matrix, ensuring it is square.                          \n  G = sparse (ij(1,:), ij(2,:), ones (1, size (ij, 2)), N, N);          \n  %% Symmetrize to model an undirected graph.                           \n  G = spones (G + G.');                                                 \n
2490`DIMACS10`kron_g500-logn17`131072`131072`10228360`unknown`unknown`unknown`23168`0`symmetric`symmetric`integer`symmetric`no`no`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`2010`undirected multigraph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nKronecker:  Kronecker Generator Graphs                                  \n                                                                        \nThe original Kronecker files contain self-loops and multiple edges.     \nThese properties are also present in real-world data sets. However,     \nsome tools cannot handle these \"artifacts\" at the moment. That is why   \nwe present \"cleansed\" versions of the data sets as well.  For the       \nChallenge you should expect to be confronted with the original data     \nwith self-loops and multiple edges. However, the final decision on      \nthis issue will be made based on participant feedback.                  \n                                                                        \nAll files have been generated with the R-MAT parameters A=0.57, B=0.19, \nC=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of     \nedges equals 48*n, where n is the number of vertices. Details about the \ngenerator and the parameter meanings can be found on the Graph500       \nwebsite.  ( http://www.graph500.org/Specifications.html )               \n                                                                        \nThere are 12 graphs in the DIMACS10 test set at                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.  \nOne graph in each pair is a multigraph, with self-edges.  The other     \ngraph is the nonzero pattern of the first (binary), with self-edges     \nremoved.  MATLAB cannot directly represent multigraph, so in the UF     \nCollection the unweighted multigraph G is represented as a matrix A     \nwhere A(i,j) is an integer equal to the number edges (i,j) in G.        \n                                                                        \nThe binary graphs include the word 'simple' in their                    \nname In the UF Collection, only the multigraph is included,             \nsince the simple graph can be constructed from the multigraph.          \nIf A is the multigraph, the simple graph S can be computed as:          \n                                                                        \n   S = spones (tril (A,-1)) + spones (triu (A,1)) ;                     \n                                                                        \nDIMACS10 graph:                        UF matrix:                       \n---------------                        -------------                    \nkronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16        \nkronecker/kron_g500-simple-logn16                                       \n                                                                        \nkronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17        \nkronecker/kron_g500-simple-logn17                                       \n                                                                        \nkronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18        \nkronecker/kron_g500-simple-logn18                                       \n                                                                        \nkronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19        \nkronecker/kron_g500-simple-logn19                                       \n                                                                        \nkronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20        \nkronecker/kron_g500-simple-logn20                                       \n                                                                        \nkronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21        \nkronecker/kron_g500-simple-logn21                                       \n                                                                        \n                                                                        \nReferences: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.     \nWheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May   \n5, 2010.                                                                \n                                                                        \nD.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.       \nMadduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact        \nApplications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5           \nSeptember 2007.                                                         \n                                                                        \nD. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model     \nfor graph mining, SIAM Data Mining 2004.                                \n                                                                        \nSection 17.6, Algorithms in C (third edition). Part 5 Graph             \nAlgorithms, Robert Sedgewick (Programs 17.7 and 17.8)                   \n                                                                        \nP. Sanders, Random Permutations on Distributed, External and            \nHierarchical Memory, Information Processing Letters 67 (1988) pp        \n305-309.                                                                \n                                                                        \n\"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C. \nMurphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas    \nGregor, Andrew Lumsdaine, IEEE International Symposium on Workload      \nCharacterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.     \n                                                                        \n---- sample code for generating these matrices:                         \n                                                                        \nfunction ij = kronecker_generator (SCALE, edgefactor)                   \n%% Generate an edgelist according to the Graph500                       \n%% parameters.  In this sample, the edge list is                        \n%% returned in an array with two rows, where StartVertex                \n%% is first row and EndVertex is the second.  The vertex                \n%% labels start at zero.                                                \n%%                                                                      \n%% Example, creating a sparse matrix for viewing:                       \n%%   ij = kronecker_generator (10, 16);                                 \n%%   G = sparse (ij(1,:)+1, ij(2,:)+1, ones (1, size (ij, 2)));         \n%%   spy (G);                                                           \n%% The spy plot should appear fairly dense. Any locality                \n%% is removed by the final permutations.                                \n                                                                        \n  %% Set number of vertices.                                            \n  N = 2^SCALE;                                                          \n                                                                        \n  %% Set number of edges.                                               \n  M = edgefactor * N;                                                   \n                                                                        \n  %% Set initiator probabilities.                                       \n  [A, B, C] = deal (0.57, 0.19, 0.19);                                  \n                                                                        \n  %% Create index arrays.                                               \n  ij = ones (2, M);                                                     \n  %% Loop over each order of bit.                                       \n  ab = A + B;                                                           \n  c_norm = C/(1 - (A + B));                                             \n  a_norm = A/(A + B);                                                   \n                                                                        \n  for ib = 1:SCALE,                                                     \n    %% Compare with probabilities and set bits of indices.              \n    ii_bit = rand (1, M) > ab;                                          \n    jj_bit = rand (1, M) > ( c_norm * ii_bit + a_norm * not (ii_bit) ); \n    ij = ij + 2^(ib-1) * [ii_bit; jj_bit];                              \n  end                                                                   \n                                                                        \n  %% Permute vertex labels                                              \n  p = randperm (N);                                                     \n  ij = p(ij);                                                           \n                                                                        \n  %% Permute the edge list                                              \n  p = randperm (M);                                                     \n  ij = ij(:, p);                                                        \n                                                                        \n  %% Adjust to zero-based labels.                                       \n  ij = ij - 1;                                                          \n                                                                        \nfunction G = kernel_1 (ij)                                              \n%% Compute a sparse adjacency matrix representation                     \n%% of the graph with edges from ij.                                     \n                                                                        \n  %% Remove self-edges.                                                 \n  ij(:, ij(1,:) == ij(2,:)) = [];                                       \n  %% Adjust away from zero labels.                                      \n  ij = ij + 1;                                                          \n  %% Find the maximum label for sizing.                                 \n  N = max (max (ij));                                                   \n  %% Create the matrix, ensuring it is square.                          \n  G = sparse (ij(1,:), ij(2,:), ones (1, size (ij, 2)), N, N);          \n  %% Symmetrize to model an undirected graph.                           \n  G = spones (G + G.');                                                 \n
2491`DIMACS10`kron_g500-logn18`262144`262144`21165908`unknown`unknown`unknown`51997`0`symmetric`symmetric`integer`symmetric`no`no`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`2010`undirected multigraph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nKronecker:  Kronecker Generator Graphs                                  \n                                                                        \nThe original Kronecker files contain self-loops and multiple edges.     \nThese properties are also present in real-world data sets. However,     \nsome tools cannot handle these \"artifacts\" at the moment. That is why   \nwe present \"cleansed\" versions of the data sets as well.  For the       \nChallenge you should expect to be confronted with the original data     \nwith self-loops and multiple edges. However, the final decision on      \nthis issue will be made based on participant feedback.                  \n                                                                        \nAll files have been generated with the R-MAT parameters A=0.57, B=0.19, \nC=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of     \nedges equals 48*n, where n is the number of vertices. Details about the \ngenerator and the parameter meanings can be found on the Graph500       \nwebsite.  ( http://www.graph500.org/Specifications.html )               \n                                                                        \nThere are 12 graphs in the DIMACS10 test set at                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.  \nOne graph in each pair is a multigraph, with self-edges.  The other     \ngraph is the nonzero pattern of the first (binary), with self-edges     \nremoved.  MATLAB cannot directly represent multigraph, so in the UF     \nCollection the unweighted multigraph G is represented as a matrix A     \nwhere A(i,j) is an integer equal to the number edges (i,j) in G.        \n                                                                        \nThe binary graphs include the word 'simple' in their                    \nname In the UF Collection, only the multigraph is included,             \nsince the simple graph can be constructed from the multigraph.          \nIf A is the multigraph, the simple graph S can be computed as:          \n                                                                        \n   S = spones (tril (A,-1)) + spones (triu (A,1)) ;                     \n                                                                        \nDIMACS10 graph:                        UF matrix:                       \n---------------                        -------------                    \nkronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16        \nkronecker/kron_g500-simple-logn16                                       \n                                                                        \nkronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17        \nkronecker/kron_g500-simple-logn17                                       \n                                                                        \nkronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18        \nkronecker/kron_g500-simple-logn18                                       \n                                                                        \nkronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19        \nkronecker/kron_g500-simple-logn19                                       \n                                                                        \nkronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20        \nkronecker/kron_g500-simple-logn20                                       \n                                                                        \nkronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21        \nkronecker/kron_g500-simple-logn21                                       \n                                                                        \n                                                                        \nReferences: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.     \nWheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May   \n5, 2010.                                                                \n                                                                        \nD.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.       \nMadduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact        \nApplications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5           \nSeptember 2007.                                                         \n                                                                        \nD. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model     \nfor graph mining, SIAM Data Mining 2004.                                \n                                                                        \nSection 17.6, Algorithms in C (third edition). Part 5 Graph             \nAlgorithms, Robert Sedgewick (Programs 17.7 and 17.8)                   \n                                                                        \nP. Sanders, Random Permutations on Distributed, External and            \nHierarchical Memory, Information Processing Letters 67 (1988) pp        \n305-309.                                                                \n                                                                        \n\"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C. \nMurphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas    \nGregor, Andrew Lumsdaine, IEEE International Symposium on Workload      \nCharacterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.     \n                                                                        \n---- sample code for generating these matrices:                         \n                                                                        \nfunction ij = kronecker_generator (SCALE, edgefactor)                   \n%% Generate an edgelist according to the Graph500                       \n%% parameters.  In this sample, the edge list is                        \n%% returned in an array with two rows, where StartVertex                \n%% is first row and EndVertex is the second.  The vertex                \n%% labels start at zero.                                                \n%%                                                                      \n%% Example, creating a sparse matrix for viewing:                       \n%%   ij = kronecker_generator (10, 16);                                 \n%%   G = sparse (ij(1,:)+1, ij(2,:)+1, ones (1, size (ij, 2)));         \n%%   spy (G);                                                           \n%% The spy plot should appear fairly dense. Any locality                \n%% is removed by the final permutations.                                \n                                                                        \n  %% Set number of vertices.                                            \n  N = 2^SCALE;                                                          \n                                                                        \n  %% Set number of edges.                                               \n  M = edgefactor * N;                                                   \n                                                                        \n  %% Set initiator probabilities.                                       \n  [A, B, C] = deal (0.57, 0.19, 0.19);                                  \n                                                                        \n  %% Create index arrays.                                               \n  ij = ones (2, M);                                                     \n  %% Loop over each order of bit.                                       \n  ab = A + B;                                                           \n  c_norm = C/(1 - (A + B));                                             \n  a_norm = A/(A + B);                                                   \n                                                                        \n  for ib = 1:SCALE,                                                     \n    %% Compare with probabilities and set bits of indices.              \n    ii_bit = rand (1, M) > ab;                                          \n    jj_bit = rand (1, M) > ( c_norm * ii_bit + a_norm * not (ii_bit) ); \n    ij = ij + 2^(ib-1) * [ii_bit; jj_bit];                              \n  end                                                                   \n                                                                        \n  %% Permute vertex labels                                              \n  p = randperm (N);                                                     \n  ij = p(ij);                                                           \n                                                                        \n  %% Permute the edge list                                              \n  p = randperm (M);                                                     \n  ij = ij(:, p);                                                        \n                                                                        \n  %% Adjust to zero-based labels.                                       \n  ij = ij - 1;                                                          \n                                                                        \nfunction G = kernel_1 (ij)                                              \n%% Compute a sparse adjacency matrix representation                     \n%% of the graph with edges from ij.                                     \n                                                                        \n  %% Remove self-edges.                                                 \n  ij(:, ij(1,:) == ij(2,:)) = [];                                       \n  %% Adjust away from zero labels.                                      \n  ij = ij + 1;                                                          \n  %% Find the maximum label for sizing.                                 \n  N = max (max (ij));                                                   \n  %% Create the matrix, ensuring it is square.                          \n  G = sparse (ij(1,:), ij(2,:), ones (1, size (ij, 2)), N, N);          \n  %% Symmetrize to model an undirected graph.                           \n  G = spones (G + G.');                                                 \n
2492`DIMACS10`kron_g500-logn19`524288`524288`43562265`unknown`unknown`unknown`115140`0`symmetric`symmetric`integer`symmetric`no`no`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`2010`undirected multigraph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nKronecker:  Kronecker Generator Graphs                                  \n                                                                        \nThe original Kronecker files contain self-loops and multiple edges.     \nThese properties are also present in real-world data sets. However,     \nsome tools cannot handle these \"artifacts\" at the moment. That is why   \nwe present \"cleansed\" versions of the data sets as well.  For the       \nChallenge you should expect to be confronted with the original data     \nwith self-loops and multiple edges. However, the final decision on      \nthis issue will be made based on participant feedback.                  \n                                                                        \nAll files have been generated with the R-MAT parameters A=0.57, B=0.19, \nC=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of     \nedges equals 48*n, where n is the number of vertices. Details about the \ngenerator and the parameter meanings can be found on the Graph500       \nwebsite.  ( http://www.graph500.org/Specifications.html )               \n                                                                        \nThere are 12 graphs in the DIMACS10 test set at                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.  \nOne graph in each pair is a multigraph, with self-edges.  The other     \ngraph is the nonzero pattern of the first (binary), with self-edges     \nremoved.  MATLAB cannot directly represent multigraph, so in the UF     \nCollection the unweighted multigraph G is represented as a matrix A     \nwhere A(i,j) is an integer equal to the number edges (i,j) in G.        \n                                                                        \nThe binary graphs include the word 'simple' in their                    \nname In the UF Collection, only the multigraph is included,             \nsince the simple graph can be constructed from the multigraph.          \nIf A is the multigraph, the simple graph S can be computed as:          \n                                                                        \n   S = spones (tril (A,-1)) + spones (triu (A,1)) ;                     \n                                                                        \nDIMACS10 graph:                        UF matrix:                       \n---------------                        -------------                    \nkronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16        \nkronecker/kron_g500-simple-logn16                                       \n                                                                        \nkronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17        \nkronecker/kron_g500-simple-logn17                                       \n                                                                        \nkronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18        \nkronecker/kron_g500-simple-logn18                                       \n                                                                        \nkronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19        \nkronecker/kron_g500-simple-logn19                                       \n                                                                        \nkronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20        \nkronecker/kron_g500-simple-logn20                                       \n                                                                        \nkronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21        \nkronecker/kron_g500-simple-logn21                                       \n                                                                        \n                                                                        \nReferences: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.     \nWheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May   \n5, 2010.                                                                \n                                                                        \nD.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.       \nMadduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact        \nApplications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5           \nSeptember 2007.                                                         \n                                                                        \nD. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model     \nfor graph mining, SIAM Data Mining 2004.                                \n                                                                        \nSection 17.6, Algorithms in C (third edition). Part 5 Graph             \nAlgorithms, Robert Sedgewick (Programs 17.7 and 17.8)                   \n                                                                        \nP. Sanders, Random Permutations on Distributed, External and            \nHierarchical Memory, Information Processing Letters 67 (1988) pp        \n305-309.                                                                \n                                                                        \n\"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C. \nMurphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas    \nGregor, Andrew Lumsdaine, IEEE International Symposium on Workload      \nCharacterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.     \n                                                                        \n---- sample code for generating these matrices:                         \n                                                                        \nfunction ij = kronecker_generator (SCALE, edgefactor)                   \n%% Generate an edgelist according to the Graph500                       \n%% parameters.  In this sample, the edge list is                        \n%% returned in an array with two rows, where StartVertex                \n%% is first row and EndVertex is the second.  The vertex                \n%% labels start at zero.                                                \n%%                                                                      \n%% Example, creating a sparse matrix for viewing:                       \n%%   ij = kronecker_generator (10, 16);                                 \n%%   G = sparse (ij(1,:)+1, ij(2,:)+1, ones (1, size (ij, 2)));         \n%%   spy (G);                                                           \n%% The spy plot should appear fairly dense. Any locality                \n%% is removed by the final permutations.                                \n                                                                        \n  %% Set number of vertices.                                            \n  N = 2^SCALE;                                                          \n                                                                        \n  %% Set number of edges.                                               \n  M = edgefactor * N;                                                   \n                                                                        \n  %% Set initiator probabilities.                                       \n  [A, B, C] = deal (0.57, 0.19, 0.19);                                  \n                                                                        \n  %% Create index arrays.                                               \n  ij = ones (2, M);                                                     \n  %% Loop over each order of bit.                                       \n  ab = A + B;                                                           \n  c_norm = C/(1 - (A + B));                                             \n  a_norm = A/(A + B);                                                   \n                                                                        \n  for ib = 1:SCALE,                                                     \n    %% Compare with probabilities and set bits of indices.              \n    ii_bit = rand (1, M) > ab;                                          \n    jj_bit = rand (1, M) > ( c_norm * ii_bit + a_norm * not (ii_bit) ); \n    ij = ij + 2^(ib-1) * [ii_bit; jj_bit];                              \n  end                                                                   \n                                                                        \n  %% Permute vertex labels                                              \n  p = randperm (N);                                                     \n  ij = p(ij);                                                           \n                                                                        \n  %% Permute the edge list                                              \n  p = randperm (M);                                                     \n  ij = ij(:, p);                                                        \n                                                                        \n  %% Adjust to zero-based labels.                                       \n  ij = ij - 1;                                                          \n                                                                        \nfunction G = kernel_1 (ij)                                              \n%% Compute a sparse adjacency matrix representation                     \n%% of the graph with edges from ij.                                     \n                                                                        \n  %% Remove self-edges.                                                 \n  ij(:, ij(1,:) == ij(2,:)) = [];                                       \n  %% Adjust away from zero labels.                                      \n  ij = ij + 1;                                                          \n  %% Find the maximum label for sizing.                                 \n  N = max (max (ij));                                                   \n  %% Create the matrix, ensuring it is square.                          \n  G = sparse (ij(1,:), ij(2,:), ones (1, size (ij, 2)), N, N);          \n  %% Symmetrize to model an undirected graph.                           \n  G = spones (G + G.');                                                 \n
2493`DIMACS10`kron_g500-logn20`1048576`1048576`89239674`unknown`unknown`unknown`253380`0`symmetric`symmetric`integer`symmetric`no`no`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`2010`undirected multigraph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nKronecker:  Kronecker Generator Graphs                                  \n                                                                        \nThe original Kronecker files contain self-loops and multiple edges.     \nThese properties are also present in real-world data sets. However,     \nsome tools cannot handle these \"artifacts\" at the moment. That is why   \nwe present \"cleansed\" versions of the data sets as well.  For the       \nChallenge you should expect to be confronted with the original data     \nwith self-loops and multiple edges. However, the final decision on      \nthis issue will be made based on participant feedback.                  \n                                                                        \nAll files have been generated with the R-MAT parameters A=0.57, B=0.19, \nC=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of     \nedges equals 48*n, where n is the number of vertices. Details about the \ngenerator and the parameter meanings can be found on the Graph500       \nwebsite.  ( http://www.graph500.org/Specifications.html )               \n                                                                        \nThere are 12 graphs in the DIMACS10 test set at                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.  \nOne graph in each pair is a multigraph, with self-edges.  The other     \ngraph is the nonzero pattern of the first (binary), with self-edges     \nremoved.  MATLAB cannot directly represent multigraph, so in the UF     \nCollection the unweighted multigraph G is represented as a matrix A     \nwhere A(i,j) is an integer equal to the number edges (i,j) in G.        \n                                                                        \nThe binary graphs include the word 'simple' in their                    \nname In the UF Collection, only the multigraph is included,             \nsince the simple graph can be constructed from the multigraph.          \nIf A is the multigraph, the simple graph S can be computed as:          \n                                                                        \n   S = spones (tril (A,-1)) + spones (triu (A,1)) ;                     \n                                                                        \nDIMACS10 graph:                        UF matrix:                       \n---------------                        -------------                    \nkronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16        \nkronecker/kron_g500-simple-logn16                                       \n                                                                        \nkronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17        \nkronecker/kron_g500-simple-logn17                                       \n                                                                        \nkronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18        \nkronecker/kron_g500-simple-logn18                                       \n                                                                        \nkronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19        \nkronecker/kron_g500-simple-logn19                                       \n                                                                        \nkronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20        \nkronecker/kron_g500-simple-logn20                                       \n                                                                        \nkronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21        \nkronecker/kron_g500-simple-logn21                                       \n                                                                        \n                                                                        \nReferences: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.     \nWheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May   \n5, 2010.                                                                \n                                                                        \nD.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.       \nMadduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact        \nApplications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5           \nSeptember 2007.                                                         \n                                                                        \nD. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model     \nfor graph mining, SIAM Data Mining 2004.                                \n                                                                        \nSection 17.6, Algorithms in C (third edition). Part 5 Graph             \nAlgorithms, Robert Sedgewick (Programs 17.7 and 17.8)                   \n                                                                        \nP. Sanders, Random Permutations on Distributed, External and            \nHierarchical Memory, Information Processing Letters 67 (1988) pp        \n305-309.                                                                \n                                                                        \n\"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C. \nMurphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas    \nGregor, Andrew Lumsdaine, IEEE International Symposium on Workload      \nCharacterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.     \n                                                                        \n---- sample code for generating these matrices:                         \n                                                                        \nfunction ij = kronecker_generator (SCALE, edgefactor)                   \n%% Generate an edgelist according to the Graph500                       \n%% parameters.  In this sample, the edge list is                        \n%% returned in an array with two rows, where StartVertex                \n%% is first row and EndVertex is the second.  The vertex                \n%% labels start at zero.                                                \n%%                                                                      \n%% Example, creating a sparse matrix for viewing:                       \n%%   ij = kronecker_generator (10, 16);                                 \n%%   G = sparse (ij(1,:)+1, ij(2,:)+1, ones (1, size (ij, 2)));         \n%%   spy (G);                                                           \n%% The spy plot should appear fairly dense. Any locality                \n%% is removed by the final permutations.                                \n                                                                        \n  %% Set number of vertices.                                            \n  N = 2^SCALE;                                                          \n                                                                        \n  %% Set number of edges.                                               \n  M = edgefactor * N;                                                   \n                                                                        \n  %% Set initiator probabilities.                                       \n  [A, B, C] = deal (0.57, 0.19, 0.19);                                  \n                                                                        \n  %% Create index arrays.                                               \n  ij = ones (2, M);                                                     \n  %% Loop over each order of bit.                                       \n  ab = A + B;                                                           \n  c_norm = C/(1 - (A + B));                                             \n  a_norm = A/(A + B);                                                   \n                                                                        \n  for ib = 1:SCALE,                                                     \n    %% Compare with probabilities and set bits of indices.              \n    ii_bit = rand (1, M) > ab;                                          \n    jj_bit = rand (1, M) > ( c_norm * ii_bit + a_norm * not (ii_bit) ); \n    ij = ij + 2^(ib-1) * [ii_bit; jj_bit];                              \n  end                                                                   \n                                                                        \n  %% Permute vertex labels                                              \n  p = randperm (N);                                                     \n  ij = p(ij);                                                           \n                                                                        \n  %% Permute the edge list                                              \n  p = randperm (M);                                                     \n  ij = ij(:, p);                                                        \n                                                                        \n  %% Adjust to zero-based labels.                                       \n  ij = ij - 1;                                                          \n                                                                        \nfunction G = kernel_1 (ij)                                              \n%% Compute a sparse adjacency matrix representation                     \n%% of the graph with edges from ij.                                     \n                                                                        \n  %% Remove self-edges.                                                 \n  ij(:, ij(1,:) == ij(2,:)) = [];                                       \n  %% Adjust away from zero labels.                                      \n  ij = ij + 1;                                                          \n  %% Find the maximum label for sizing.                                 \n  N = max (max (ij));                                                   \n  %% Create the matrix, ensuring it is square.                          \n  G = sparse (ij(1,:), ij(2,:), ones (1, size (ij, 2)), N, N);          \n  %% Symmetrize to model an undirected graph.                           \n  G = spones (G + G.');                                                 \n
2494`DIMACS10`kron_g500-logn21`2097152`2097152`182082942`unknown`unknown`unknown`553159`0`symmetric`symmetric`integer`symmetric`no`no`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`D. Bader, J. Berry, S. Kahan, R. Murphy, E. Reidy, J. Willcock`2010`undirected multigraph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nKronecker:  Kronecker Generator Graphs                                  \n                                                                        \nThe original Kronecker files contain self-loops and multiple edges.     \nThese properties are also present in real-world data sets. However,     \nsome tools cannot handle these \"artifacts\" at the moment. That is why   \nwe present \"cleansed\" versions of the data sets as well.  For the       \nChallenge you should expect to be confronted with the original data     \nwith self-loops and multiple edges. However, the final decision on      \nthis issue will be made based on participant feedback.                  \n                                                                        \nAll files have been generated with the R-MAT parameters A=0.57, B=0.19, \nC=0.19, and D=1-(A+B+C)=0.05 and edgefactor=48, i.e., the number of     \nedges equals 48*n, where n is the number of vertices. Details about the \ngenerator and the parameter meanings can be found on the Graph500       \nwebsite.  ( http://www.graph500.org/Specifications.html )               \n                                                                        \nThere are 12 graphs in the DIMACS10 test set at                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml .  Them come in 6 pairs.  \nOne graph in each pair is a multigraph, with self-edges.  The other     \ngraph is the nonzero pattern of the first (binary), with self-edges     \nremoved.  MATLAB cannot directly represent multigraph, so in the UF     \nCollection the unweighted multigraph G is represented as a matrix A     \nwhere A(i,j) is an integer equal to the number edges (i,j) in G.        \n                                                                        \nThe binary graphs include the word 'simple' in their                    \nname In the UF Collection, only the multigraph is included,             \nsince the simple graph can be constructed from the multigraph.          \nIf A is the multigraph, the simple graph S can be computed as:          \n                                                                        \n   S = spones (tril (A,-1)) + spones (triu (A,1)) ;                     \n                                                                        \nDIMACS10 graph:                        UF matrix:                       \n---------------                        -------------                    \nkronecker/kron_g500-logn16             DIMACS10/kron_g500-logn16        \nkronecker/kron_g500-simple-logn16                                       \n                                                                        \nkronecker/kron_g500-logn17             DIMACS10/kron_g500-logn17        \nkronecker/kron_g500-simple-logn17                                       \n                                                                        \nkronecker/kron_g500-logn18             DIMACS10/kron_g500-logn18        \nkronecker/kron_g500-simple-logn18                                       \n                                                                        \nkronecker/kron_g500-logn19             DIMACS10/kron_g500-logn19        \nkronecker/kron_g500-simple-logn19                                       \n                                                                        \nkronecker/kron_g500-logn20             DIMACS10/kron_g500-logn20        \nkronecker/kron_g500-simple-logn20                                       \n                                                                        \nkronecker/kron_g500-logn21             DIMACS10/kron_g500-logn21        \nkronecker/kron_g500-simple-logn21                                       \n                                                                        \n                                                                        \nReferences: \"Introducing the Graph 500,\" Richard C. Murphy, Kyle B.     \nWheeler, Brian W. Barrett, James A. Ang, Cray User's Group (CUG), May   \n5, 2010.                                                                \n                                                                        \nD.A. Bader, J. Feo, J. Gilbert, J. Kepner, D. Koester, E. Loh, K.       \nMadduri, W. Mann, Theresa Meuse, HPCS Scalable Synthetic Compact        \nApplications #2 Graph Analysis (SSCA#2 v2.2 Specification), 5           \nSeptember 2007.                                                         \n                                                                        \nD. Chakrabarti, Y. Zhan, and C. Faloutsos, R-MAT: A recursive model     \nfor graph mining, SIAM Data Mining 2004.                                \n                                                                        \nSection 17.6, Algorithms in C (third edition). Part 5 Graph             \nAlgorithms, Robert Sedgewick (Programs 17.7 and 17.8)                   \n                                                                        \nP. Sanders, Random Permutations on Distributed, External and            \nHierarchical Memory, Information Processing Letters 67 (1988) pp        \n305-309.                                                                \n                                                                        \n\"DFS: A Simple to Write Yet Difficult to Execute Benchmark,\" Richard C. \nMurphy, Jonathan Berry, William McLendon, Bruce Hendrickson, Douglas    \nGregor, Andrew Lumsdaine, IEEE International Symposium on Workload      \nCharacterizations 2006 (IISWC06), San Jose, CA, 25-27 October 2006.     \n                                                                        \n---- sample code for generating these matrices:                         \n                                                                        \nfunction ij = kronecker_generator (SCALE, edgefactor)                   \n%% Generate an edgelist according to the Graph500                       \n%% parameters.  In this sample, the edge list is                        \n%% returned in an array with two rows, where StartVertex                \n%% is first row and EndVertex is the second.  The vertex                \n%% labels start at zero.                                                \n%%                                                                      \n%% Example, creating a sparse matrix for viewing:                       \n%%   ij = kronecker_generator (10, 16);                                 \n%%   G = sparse (ij(1,:)+1, ij(2,:)+1, ones (1, size (ij, 2)));         \n%%   spy (G);                                                           \n%% The spy plot should appear fairly dense. Any locality                \n%% is removed by the final permutations.                                \n                                                                        \n  %% Set number of vertices.                                            \n  N = 2^SCALE;                                                          \n                                                                        \n  %% Set number of edges.                                               \n  M = edgefactor * N;                                                   \n                                                                        \n  %% Set initiator probabilities.                                       \n  [A, B, C] = deal (0.57, 0.19, 0.19);                                  \n                                                                        \n  %% Create index arrays.                                               \n  ij = ones (2, M);                                                     \n  %% Loop over each order of bit.                                       \n  ab = A + B;                                                           \n  c_norm = C/(1 - (A + B));                                             \n  a_norm = A/(A + B);                                                   \n                                                                        \n  for ib = 1:SCALE,                                                     \n    %% Compare with probabilities and set bits of indices.              \n    ii_bit = rand (1, M) > ab;                                          \n    jj_bit = rand (1, M) > ( c_norm * ii_bit + a_norm * not (ii_bit) ); \n    ij = ij + 2^(ib-1) * [ii_bit; jj_bit];                              \n  end                                                                   \n                                                                        \n  %% Permute vertex labels                                              \n  p = randperm (N);                                                     \n  ij = p(ij);                                                           \n                                                                        \n  %% Permute the edge list                                              \n  p = randperm (M);                                                     \n  ij = ij(:, p);                                                        \n                                                                        \n  %% Adjust to zero-based labels.                                       \n  ij = ij - 1;                                                          \n                                                                        \nfunction G = kernel_1 (ij)                                              \n%% Compute a sparse adjacency matrix representation                     \n%% of the graph with edges from ij.                                     \n                                                                        \n  %% Remove self-edges.                                                 \n  ij(:, ij(1,:) == ij(2,:)) = [];                                       \n  %% Adjust away from zero labels.                                      \n  ij = ij + 1;                                                          \n  %% Find the maximum label for sizing.                                 \n  N = max (max (ij));                                                   \n  %% Create the matrix, ensuring it is square.                          \n  G = sparse (ij(1,:), ij(2,:), ones (1, size (ij, 2)), N, N);          \n  %% Symmetrize to model an undirected graph.                           \n  G = spones (G + G.');                                                 \n
2495`DIMACS10`adaptive`6815744`6815744`27248640`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`H. Antz et al.`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                    \n                                                                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                            \n                                                                         \nAs stated on their main website (                                        \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation      \nChallenges address questions of determining realistic algorithm          \nperformance where worst case analysis is overly pessimistic and          \nprobabilistic models are too unrealistic: experimentation can provide    \nguides to realistic algorithm performance where analysis fails.\"         \n                                                                         \nFor the 10th DIMACS Implementation Challenge, the two related            \nproblems of graph partitioning and graph clustering were chosen.         \nGraph partitioning and graph clustering are among the aforementioned     \nquestions or problem areas where theoretical and practical results       \ndeviate significantly from each other, so that experimental outcomes     \nare of particular interest.                                              \n                                                                         \nProblem Motivation                                                       \n                                                                         \nGraph partitioning and graph clustering are ubiquitous subtasks in       \nmany application areas. Generally speaking, both techniques aim at       \nthe identification of vertex subsets with many internal and few          \nexternal edges. To name only a few, problems addressed by graph          \npartitioning and graph clustering algorithms are:                        \n                                                                         \n    * What are the communities within an (online) social network?        \n    * How do I speed up a numerical simulation by mapping it             \n        efficiently onto a parallel computer?                            \n    * How must components be organized on a computer chip such that      \n        they can communicate efficiently with each other?                \n    * What are the segments of a digital image?                          \n    * Which functions are certain genes (most likely) responsible        \n        for?                                                             \n                                                                         \nChallenge Goals                                                          \n                                                                         \n    * One goal of this Challenge is to create a reproducible picture     \n        of the state-of-the-art in the area of graph partitioning        \n        (GP) and graph clustering (GC) algorithms. To this end we        \n        are identifying a standard set of benchmark instances and        \n        generators.                                                      \n                                                                         \n    * Moreover, after initiating a discussion with the community, we     \n        would like to establish the most appropriate problem             \n        formulations and objective functions for a variety of            \n        applications.                                                    \n                                                                         \n    * Another goal is to enable current researchers to compare their     \n        codes with each other, in hopes of identifying the most          \n        effective algorithmic innovations that have been proposed.       \n                                                                         \n    * The final goal is to publish proceedings containing results        \n        presented at the Challenge workshop, and a book containing       \n        the best of the proceedings papers.                              \n                                                                         \nProblems Addressed                                                       \n                                                                         \nThe precise problem formulations need to be established in the course    \nof the Challenge. The descriptions below serve as a starting point.      \n                                                                         \n    * Graph partitioning:                                                \n                                                                         \n      The most common formulation of the graph partitioning problem      \n      for an undirected graph G = (V,E) asks for a division of V into    \n      k pairwise disjoint subsets (partitions) such that all             \n      partitions are of approximately equal size and the edge-cut,       \n      i.e., the total number of edges having their incident nodes in     \n      different subdomains, is minimized. The problem is known to be     \n      NP-hard.                                                           \n                                                                         \n    * Graph clustering:                                                  \n                                                                         \n      Clustering is an important tool for investigating the              \n      structural properties of data. Generally speaking, clustering      \n      refers to the grouping of objects such that objects in the same    \n      cluster are more similar to each other than to objects of          \n      different clusters. The similarity measure depends on the          \n      underlying application. Clustering graphs usually refers to the    \n      identification of vertex subsets (clusters) that have              \n      significantly more internal edges (to vertices of the same         \n      cluster) than external ones (to vertices of another cluster).      \n                                                                         \nThere are 10 data sets in the DIMACS10 collection:                       \n                                                                         \nKronecker:  synthetic graphs from the Graph500 benchmark                 \ndyn-frames: frames from a 2D dynamic simulation                          \nDelaunay:   Delaunay triangulations of random points in the plane        \ncoauthor:   citation and co-author networks                              \nstreets:    real-world street networks                                   \nWalshaw:    Chris Walshaw's graph partitioning archive                   \nmatrix:     graphs from the UF collection (not added here)               \nrandom:     random geometric graphs (random points in the unit square)   \nclustering: real-world graphs commonly used as benchmarks                \nnumerical:  graphs from numerical simulation                             \n                                                                         \nSome of the graphs already exist in the UF Collection.  In some cases,   \nthe original graph is unsymmetric, with values, whereas the DIMACS       \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate     \npatterns to the UF Collection, a MATLAB script is provided at            \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads         \neach matrix from the UF Collection via UFget, and then performs whatever \noperation is required to convert the matrix to the DIMACS graph problem. \nAlso posted at that page is a MATLAB code (metis_graph) for reading the  \nDIMACS *.graph files into MATLAB.                                        \n                                                                         \n                                                                         \nnumerical: graphs from numerical simulations                             \n                                                                         \nFor the graphs adaptive and venturiLevel3, please refer to the preprint: \n                                                                         \nHartwig Anzt, Werner Augustin, Martin Baumann, Hendryk Bockelmann,       \nThomas Gengenbach, Tobias Hahn, Vincent Heuveline, Eva Ketelaer,         \nDimitar Lukarski, Andrea Otzen, Sebastian Ritterbusch, Bjo\"rn Rocker,    \nStaffan Ronnås, Michael Schick, Chandramowli Subramanian, Jan-Philipp    \nWeiss, and Florian Wilhelm.  Hiflow3 - a flexible and hardware-aware     \nparallel Finite element package. In Parallel/High-Performance Object-    \nOriented Scientific Computing (POOSC'10).                                \n                                                                         \nFor the graphs channel-500x100x100-b050 and packing-500x100x100-b050,    \nplease refer to:                                                         \n                                                                         \nMarkus Wittmann, Thomas Zeiser. Technical Note: Data Structures of       \nILBDC Lattice Boltzmann Solver.                                          \nhttp://www.cc.gatech.edu/dimacs10/archive/numerical-overview-Erlangen.pdf\n
2496`DIMACS10`channel-500x100x100-b050`4802000`4802000`85362744`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`M Wittman, T. Zeiser`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                    \n                                                                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                            \n                                                                         \nAs stated on their main website (                                        \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation      \nChallenges address questions of determining realistic algorithm          \nperformance where worst case analysis is overly pessimistic and          \nprobabilistic models are too unrealistic: experimentation can provide    \nguides to realistic algorithm performance where analysis fails.\"         \n                                                                         \nFor the 10th DIMACS Implementation Challenge, the two related            \nproblems of graph partitioning and graph clustering were chosen.         \nGraph partitioning and graph clustering are among the aforementioned     \nquestions or problem areas where theoretical and practical results       \ndeviate significantly from each other, so that experimental outcomes     \nare of particular interest.                                              \n                                                                         \nProblem Motivation                                                       \n                                                                         \nGraph partitioning and graph clustering are ubiquitous subtasks in       \nmany application areas. Generally speaking, both techniques aim at       \nthe identification of vertex subsets with many internal and few          \nexternal edges. To name only a few, problems addressed by graph          \npartitioning and graph clustering algorithms are:                        \n                                                                         \n    * What are the communities within an (online) social network?        \n    * How do I speed up a numerical simulation by mapping it             \n        efficiently onto a parallel computer?                            \n    * How must components be organized on a computer chip such that      \n        they can communicate efficiently with each other?                \n    * What are the segments of a digital image?                          \n    * Which functions are certain genes (most likely) responsible        \n        for?                                                             \n                                                                         \nChallenge Goals                                                          \n                                                                         \n    * One goal of this Challenge is to create a reproducible picture     \n        of the state-of-the-art in the area of graph partitioning        \n        (GP) and graph clustering (GC) algorithms. To this end we        \n        are identifying a standard set of benchmark instances and        \n        generators.                                                      \n                                                                         \n    * Moreover, after initiating a discussion with the community, we     \n        would like to establish the most appropriate problem             \n        formulations and objective functions for a variety of            \n        applications.                                                    \n                                                                         \n    * Another goal is to enable current researchers to compare their     \n        codes with each other, in hopes of identifying the most          \n        effective algorithmic innovations that have been proposed.       \n                                                                         \n    * The final goal is to publish proceedings containing results        \n        presented at the Challenge workshop, and a book containing       \n        the best of the proceedings papers.                              \n                                                                         \nProblems Addressed                                                       \n                                                                         \nThe precise problem formulations need to be established in the course    \nof the Challenge. The descriptions below serve as a starting point.      \n                                                                         \n    * Graph partitioning:                                                \n                                                                         \n      The most common formulation of the graph partitioning problem      \n      for an undirected graph G = (V,E) asks for a division of V into    \n      k pairwise disjoint subsets (partitions) such that all             \n      partitions are of approximately equal size and the edge-cut,       \n      i.e., the total number of edges having their incident nodes in     \n      different subdomains, is minimized. The problem is known to be     \n      NP-hard.                                                           \n                                                                         \n    * Graph clustering:                                                  \n                                                                         \n      Clustering is an important tool for investigating the              \n      structural properties of data. Generally speaking, clustering      \n      refers to the grouping of objects such that objects in the same    \n      cluster are more similar to each other than to objects of          \n      different clusters. The similarity measure depends on the          \n      underlying application. Clustering graphs usually refers to the    \n      identification of vertex subsets (clusters) that have              \n      significantly more internal edges (to vertices of the same         \n      cluster) than external ones (to vertices of another cluster).      \n                                                                         \nThere are 10 data sets in the DIMACS10 collection:                       \n                                                                         \nKronecker:  synthetic graphs from the Graph500 benchmark                 \ndyn-frames: frames from a 2D dynamic simulation                          \nDelaunay:   Delaunay triangulations of random points in the plane        \ncoauthor:   citation and co-author networks                              \nstreets:    real-world street networks                                   \nWalshaw:    Chris Walshaw's graph partitioning archive                   \nmatrix:     graphs from the UF collection (not added here)               \nrandom:     random geometric graphs (random points in the unit square)   \nclustering: real-world graphs commonly used as benchmarks                \nnumerical:  graphs from numerical simulation                             \n                                                                         \nSome of the graphs already exist in the UF Collection.  In some cases,   \nthe original graph is unsymmetric, with values, whereas the DIMACS       \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate     \npatterns to the UF Collection, a MATLAB script is provided at            \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads         \neach matrix from the UF Collection via UFget, and then performs whatever \noperation is required to convert the matrix to the DIMACS graph problem. \nAlso posted at that page is a MATLAB code (metis_graph) for reading the  \nDIMACS *.graph files into MATLAB.                                        \n                                                                         \n                                                                         \nnumerical: graphs from numerical simulations                             \n                                                                         \nFor the graphs adaptive and venturiLevel3, please refer to the preprint: \n                                                                         \nHartwig Anzt, Werner Augustin, Martin Baumann, Hendryk Bockelmann,       \nThomas Gengenbach, Tobias Hahn, Vincent Heuveline, Eva Ketelaer,         \nDimitar Lukarski, Andrea Otzen, Sebastian Ritterbusch, Bjo\"rn Rocker,    \nStaffan Ronnås, Michael Schick, Chandramowli Subramanian, Jan-Philipp    \nWeiss, and Florian Wilhelm.  Hiflow3 - a flexible and hardware-aware     \nparallel Finite element package. In Parallel/High-Performance Object-    \nOriented Scientific Computing (POOSC'10).                                \n                                                                         \nFor the graphs channel-500x100x100-b050 and packing-500x100x100-b050,    \nplease refer to:                                                         \n                                                                         \nMarkus Wittmann, Thomas Zeiser. Technical Note: Data Structures of       \nILBDC Lattice Boltzmann Solver.                                          \nhttp://www.cc.gatech.edu/dimacs10/archive/numerical-overview-Erlangen.pdf\n
2497`DIMACS10`packing-500x100x100-b050`2145852`2145852`34976486`unknown`unknown`unknown`14`0`symmetric`symmetric`binary`symmetric`no`no`M Wittman, T. Zeiser`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                    \n                                                                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                            \n                                                                         \nAs stated on their main website (                                        \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation      \nChallenges address questions of determining realistic algorithm          \nperformance where worst case analysis is overly pessimistic and          \nprobabilistic models are too unrealistic: experimentation can provide    \nguides to realistic algorithm performance where analysis fails.\"         \n                                                                         \nFor the 10th DIMACS Implementation Challenge, the two related            \nproblems of graph partitioning and graph clustering were chosen.         \nGraph partitioning and graph clustering are among the aforementioned     \nquestions or problem areas where theoretical and practical results       \ndeviate significantly from each other, so that experimental outcomes     \nare of particular interest.                                              \n                                                                         \nProblem Motivation                                                       \n                                                                         \nGraph partitioning and graph clustering are ubiquitous subtasks in       \nmany application areas. Generally speaking, both techniques aim at       \nthe identification of vertex subsets with many internal and few          \nexternal edges. To name only a few, problems addressed by graph          \npartitioning and graph clustering algorithms are:                        \n                                                                         \n    * What are the communities within an (online) social network?        \n    * How do I speed up a numerical simulation by mapping it             \n        efficiently onto a parallel computer?                            \n    * How must components be organized on a computer chip such that      \n        they can communicate efficiently with each other?                \n    * What are the segments of a digital image?                          \n    * Which functions are certain genes (most likely) responsible        \n        for?                                                             \n                                                                         \nChallenge Goals                                                          \n                                                                         \n    * One goal of this Challenge is to create a reproducible picture     \n        of the state-of-the-art in the area of graph partitioning        \n        (GP) and graph clustering (GC) algorithms. To this end we        \n        are identifying a standard set of benchmark instances and        \n        generators.                                                      \n                                                                         \n    * Moreover, after initiating a discussion with the community, we     \n        would like to establish the most appropriate problem             \n        formulations and objective functions for a variety of            \n        applications.                                                    \n                                                                         \n    * Another goal is to enable current researchers to compare their     \n        codes with each other, in hopes of identifying the most          \n        effective algorithmic innovations that have been proposed.       \n                                                                         \n    * The final goal is to publish proceedings containing results        \n        presented at the Challenge workshop, and a book containing       \n        the best of the proceedings papers.                              \n                                                                         \nProblems Addressed                                                       \n                                                                         \nThe precise problem formulations need to be established in the course    \nof the Challenge. The descriptions below serve as a starting point.      \n                                                                         \n    * Graph partitioning:                                                \n                                                                         \n      The most common formulation of the graph partitioning problem      \n      for an undirected graph G = (V,E) asks for a division of V into    \n      k pairwise disjoint subsets (partitions) such that all             \n      partitions are of approximately equal size and the edge-cut,       \n      i.e., the total number of edges having their incident nodes in     \n      different subdomains, is minimized. The problem is known to be     \n      NP-hard.                                                           \n                                                                         \n    * Graph clustering:                                                  \n                                                                         \n      Clustering is an important tool for investigating the              \n      structural properties of data. Generally speaking, clustering      \n      refers to the grouping of objects such that objects in the same    \n      cluster are more similar to each other than to objects of          \n      different clusters. The similarity measure depends on the          \n      underlying application. Clustering graphs usually refers to the    \n      identification of vertex subsets (clusters) that have              \n      significantly more internal edges (to vertices of the same         \n      cluster) than external ones (to vertices of another cluster).      \n                                                                         \nThere are 10 data sets in the DIMACS10 collection:                       \n                                                                         \nKronecker:  synthetic graphs from the Graph500 benchmark                 \ndyn-frames: frames from a 2D dynamic simulation                          \nDelaunay:   Delaunay triangulations of random points in the plane        \ncoauthor:   citation and co-author networks                              \nstreets:    real-world street networks                                   \nWalshaw:    Chris Walshaw's graph partitioning archive                   \nmatrix:     graphs from the UF collection (not added here)               \nrandom:     random geometric graphs (random points in the unit square)   \nclustering: real-world graphs commonly used as benchmarks                \nnumerical:  graphs from numerical simulation                             \n                                                                         \nSome of the graphs already exist in the UF Collection.  In some cases,   \nthe original graph is unsymmetric, with values, whereas the DIMACS       \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate     \npatterns to the UF Collection, a MATLAB script is provided at            \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads         \neach matrix from the UF Collection via UFget, and then performs whatever \noperation is required to convert the matrix to the DIMACS graph problem. \nAlso posted at that page is a MATLAB code (metis_graph) for reading the  \nDIMACS *.graph files into MATLAB.                                        \n                                                                         \n                                                                         \nnumerical: graphs from numerical simulations                             \n                                                                         \nFor the graphs adaptive and venturiLevel3, please refer to the preprint: \n                                                                         \nHartwig Anzt, Werner Augustin, Martin Baumann, Hendryk Bockelmann,       \nThomas Gengenbach, Tobias Hahn, Vincent Heuveline, Eva Ketelaer,         \nDimitar Lukarski, Andrea Otzen, Sebastian Ritterbusch, Bjo\"rn Rocker,    \nStaffan Ronnås, Michael Schick, Chandramowli Subramanian, Jan-Philipp    \nWeiss, and Florian Wilhelm.  Hiflow3 - a flexible and hardware-aware     \nparallel Finite element package. In Parallel/High-Performance Object-    \nOriented Scientific Computing (POOSC'10).                                \n                                                                         \nFor the graphs channel-500x100x100-b050 and packing-500x100x100-b050,    \nplease refer to:                                                         \n                                                                         \nMarkus Wittmann, Thomas Zeiser. Technical Note: Data Structures of       \nILBDC Lattice Boltzmann Solver.                                          \nhttp://www.cc.gatech.edu/dimacs10/archive/numerical-overview-Erlangen.pdf\n
2498`DIMACS10`venturiLevel3`4026819`4026819`16108474`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`H. Antz et al.`H. Meyerhenke`2011`undirected graph`\n10th DIMACS Implementation Challenge:                                    \n                                                                         \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                            \n                                                                         \nAs stated on their main website (                                        \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation      \nChallenges address questions of determining realistic algorithm          \nperformance where worst case analysis is overly pessimistic and          \nprobabilistic models are too unrealistic: experimentation can provide    \nguides to realistic algorithm performance where analysis fails.\"         \n                                                                         \nFor the 10th DIMACS Implementation Challenge, the two related            \nproblems of graph partitioning and graph clustering were chosen.         \nGraph partitioning and graph clustering are among the aforementioned     \nquestions or problem areas where theoretical and practical results       \ndeviate significantly from each other, so that experimental outcomes     \nare of particular interest.                                              \n                                                                         \nProblem Motivation                                                       \n                                                                         \nGraph partitioning and graph clustering are ubiquitous subtasks in       \nmany application areas. Generally speaking, both techniques aim at       \nthe identification of vertex subsets with many internal and few          \nexternal edges. To name only a few, problems addressed by graph          \npartitioning and graph clustering algorithms are:                        \n                                                                         \n    * What are the communities within an (online) social network?        \n    * How do I speed up a numerical simulation by mapping it             \n        efficiently onto a parallel computer?                            \n    * How must components be organized on a computer chip such that      \n        they can communicate efficiently with each other?                \n    * What are the segments of a digital image?                          \n    * Which functions are certain genes (most likely) responsible        \n        for?                                                             \n                                                                         \nChallenge Goals                                                          \n                                                                         \n    * One goal of this Challenge is to create a reproducible picture     \n        of the state-of-the-art in the area of graph partitioning        \n        (GP) and graph clustering (GC) algorithms. To this end we        \n        are identifying a standard set of benchmark instances and        \n        generators.                                                      \n                                                                         \n    * Moreover, after initiating a discussion with the community, we     \n        would like to establish the most appropriate problem             \n        formulations and objective functions for a variety of            \n        applications.                                                    \n                                                                         \n    * Another goal is to enable current researchers to compare their     \n        codes with each other, in hopes of identifying the most          \n        effective algorithmic innovations that have been proposed.       \n                                                                         \n    * The final goal is to publish proceedings containing results        \n        presented at the Challenge workshop, and a book containing       \n        the best of the proceedings papers.                              \n                                                                         \nProblems Addressed                                                       \n                                                                         \nThe precise problem formulations need to be established in the course    \nof the Challenge. The descriptions below serve as a starting point.      \n                                                                         \n    * Graph partitioning:                                                \n                                                                         \n      The most common formulation of the graph partitioning problem      \n      for an undirected graph G = (V,E) asks for a division of V into    \n      k pairwise disjoint subsets (partitions) such that all             \n      partitions are of approximately equal size and the edge-cut,       \n      i.e., the total number of edges having their incident nodes in     \n      different subdomains, is minimized. The problem is known to be     \n      NP-hard.                                                           \n                                                                         \n    * Graph clustering:                                                  \n                                                                         \n      Clustering is an important tool for investigating the              \n      structural properties of data. Generally speaking, clustering      \n      refers to the grouping of objects such that objects in the same    \n      cluster are more similar to each other than to objects of          \n      different clusters. The similarity measure depends on the          \n      underlying application. Clustering graphs usually refers to the    \n      identification of vertex subsets (clusters) that have              \n      significantly more internal edges (to vertices of the same         \n      cluster) than external ones (to vertices of another cluster).      \n                                                                         \nThere are 10 data sets in the DIMACS10 collection:                       \n                                                                         \nKronecker:  synthetic graphs from the Graph500 benchmark                 \ndyn-frames: frames from a 2D dynamic simulation                          \nDelaunay:   Delaunay triangulations of random points in the plane        \ncoauthor:   citation and co-author networks                              \nstreets:    real-world street networks                                   \nWalshaw:    Chris Walshaw's graph partitioning archive                   \nmatrix:     graphs from the UF collection (not added here)               \nrandom:     random geometric graphs (random points in the unit square)   \nclustering: real-world graphs commonly used as benchmarks                \nnumerical:  graphs from numerical simulation                             \n                                                                         \nSome of the graphs already exist in the UF Collection.  In some cases,   \nthe original graph is unsymmetric, with values, whereas the DIMACS       \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate     \npatterns to the UF Collection, a MATLAB script is provided at            \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads         \neach matrix from the UF Collection via UFget, and then performs whatever \noperation is required to convert the matrix to the DIMACS graph problem. \nAlso posted at that page is a MATLAB code (metis_graph) for reading the  \nDIMACS *.graph files into MATLAB.                                        \n                                                                         \n                                                                         \nnumerical: graphs from numerical simulations                             \n                                                                         \nFor the graphs adaptive and venturiLevel3, please refer to the preprint: \n                                                                         \nHartwig Anzt, Werner Augustin, Martin Baumann, Hendryk Bockelmann,       \nThomas Gengenbach, Tobias Hahn, Vincent Heuveline, Eva Ketelaer,         \nDimitar Lukarski, Andrea Otzen, Sebastian Ritterbusch, Bjo\"rn Rocker,    \nStaffan Ronnås, Michael Schick, Chandramowli Subramanian, Jan-Philipp    \nWeiss, and Florian Wilhelm.  Hiflow3 - a flexible and hardware-aware     \nparallel Finite element package. In Parallel/High-Performance Object-    \nOriented Scientific Computing (POOSC'10).                                \n                                                                         \nFor the graphs channel-500x100x100-b050 and packing-500x100x100-b050,    \nplease refer to:                                                         \n                                                                         \nMarkus Wittmann, Thomas Zeiser. Technical Note: Data Structures of       \nILBDC Lattice Boltzmann Solver.                                          \nhttp://www.cc.gatech.edu/dimacs10/archive/numerical-overview-Erlangen.pdf\n
2499`DIMACS10`rgg_n_2_15_s0`32768`32768`320480`unknown`unknown`unknown`6`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2500`DIMACS10`rgg_n_2_16_s0`65536`65536`684254`unknown`unknown`unknown`5`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2501`DIMACS10`rgg_n_2_17_s0`131072`131072`1457506`unknown`unknown`unknown`4`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2502`DIMACS10`rgg_n_2_18_s0`262144`262144`3094566`unknown`unknown`unknown`4`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2503`DIMACS10`rgg_n_2_19_s0`524288`524288`6539532`unknown`unknown`unknown`6`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2504`DIMACS10`rgg_n_2_20_s0`1048576`1048576`13783240`unknown`unknown`unknown`3`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2505`DIMACS10`rgg_n_2_21_s0`2097152`2097152`28975990`unknown`unknown`unknown`8`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2506`DIMACS10`rgg_n_2_22_s0`4194304`4194304`60718396`unknown`unknown`unknown`5`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2507`DIMACS10`rgg_n_2_23_s0`8388608`8388608`127002786`unknown`unknown`unknown`5`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2508`DIMACS10`rgg_n_2_24_s0`16777216`16777216`265114400`unknown`unknown`unknown`2`0`symmetric`symmetric`binary`symmetric`no`no`M. Holtgrewe, P. Sanders, C. Schulz`C. Schulz`2011`undirected random graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nrandom:  Random Geometric Graphs                                        \n                                                                        \nrggX is a random geometric graph with 2^X vertices. Each vertex is a    \nrandom point in the unit square and edges connect vertices whose        \nEuclidean distance is below 0.55 (ln n)/n. This threshold was choosen   \nin order to ensure that the graph is almost connected.                  \n                                                                        \nNote:  the UF Collection is a collection of matrices primarily from     \nreal applications.  The only random matrices I add to the collection    \nare those used in established benchmarks (such as DIMACS10).            \n                                                                        \nEngineering a scalable high quality graph partitioner,                  \nM. Holtgrewe, P. Sanders, C. Schulz, IPDPS 2010.                        \nhttp://dx.doi.org/10.1109/IPDPS.2010.5470485                            \n
2509`DIMACS10`asia_osm`11950757`11950757`25423206`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2510`DIMACS10`belgium_osm`1441295`1441295`3099940`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2511`DIMACS10`europe_osm`50912018`50912018`108109320`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2512`DIMACS10`germany_osm`11548845`11548845`24738362`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2513`DIMACS10`great-britain_osm`7733822`7733822`16313034`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2514`DIMACS10`italy_osm`6686493`6686493`14027956`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2515`DIMACS10`luxembourg_osm`114599`114599`239332`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2516`DIMACS10`netherlands_osm`2216688`2216688`4882476`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`Geofabrik GmbH`M. Kobitzsh`2010`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nStreet Networks                                                         \n                                                                        \nThe graphs Asia, Belgium, Europe, Germany, Great-Britain, Italy,        \nLuxemburg and Netherlands are (roughly speaking) undirected and         \nunweighted versions of the largest strongly connected component         \nof the corresponding Open Street Map road networks. The Open            \nStreet Map road networks have been taken from                           \nhttp://download.geofabrik.de and have been converted for DIMACS10       \nby Moritz Kobitzsch (kobitzsch at kit.edu) as follows:                  \n                                                                        \nFirst, we took the corresponding graph and extracted all routeable      \nstreets. Routable streets are objects in this file that are tagged      \nusing one of the following tags: motorway, motorway_link, trunk         \ntrunk_link, primary, primary_link, secondary, secondary_link,           \ntertiary, tertiary_link, residential, unclassified, road,               \nliving_street, and service.  Next, we now compute the largest           \nstrongly connected component of this extracted open street map graph.   \nSelf-edges and parallel edges are removed afterwards.                   \nThe DIMACS 10 graph is now the undirected and unweighted version        \nof the constructed graph, i.e.  if there is an edge (u,v) but the       \nreverse edge (v,u) is missing, we insert the reverse edge into the      \ngraph.  The XY coordinates of each node in the graph are preserved.     \n                                                                        \n
2517`DIMACS10`144`144649`144649`2148786`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`V. Kumar`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2518`DIMACS10`598a`110971`110971`1483868`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`V. Kumar`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2519`DIMACS10`auto`448695`448695`6629222`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`V. Kumar`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2520`DIMACS10`cs4`22499`22499`87716`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2521`DIMACS10`cti`16840`16840`96464`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2522`DIMACS10`data`2851`2851`30186`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2523`DIMACS10`fe_4elt2`11143`11143`65636`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`F. Pellegrini`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2524`DIMACS10`fe_body`45087`45087`327468`unknown`unknown`unknown`351`0`symmetric`symmetric`binary`symmetric`no`no`F. Pellegrini`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2525`DIMACS10`fe_ocean`143437`143437`819186`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`F. Pellegrini`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2526`DIMACS10`fe_rotor`99617`99617`1324862`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`F. Pellegrini`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2527`DIMACS10`fe_sphere`16386`16386`98304`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`F. Pellegrini`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2528`DIMACS10`fe_tooth`78136`78136`905182`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`F. Pellegrini`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2529`DIMACS10`m14b`214765`214765`3358036`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`V. Kumar`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2530`DIMACS10`t60k`60005`60005`178880`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2531`DIMACS10`uk`4824`4824`13674`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2532`DIMACS10`wing`62032`62032`243088`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2533`DIMACS10`wing_nodal`10937`10937`150976`unknown`unknown`unknown`1`0`symmetric`symmetric`binary`symmetric`no`no`C. Walshaw`C. Walshaw`2000`undirected graph`\n10th DIMACS Implementation Challenge:                                   \n                                                                        \nhttp://www.cc.gatech.edu/dimacs10/index.shtml                           \n                                                                        \nAs stated on their main website (                                       \nhttp://dimacs.rutgers.edu/Challenges/ ), the \"DIMACS Implementation     \nChallenges address questions of determining realistic algorithm         \nperformance where worst case analysis is overly pessimistic and         \nprobabilistic models are too unrealistic: experimentation can provide   \nguides to realistic algorithm performance where analysis fails.\"        \n                                                                        \nFor the 10th DIMACS Implementation Challenge, the two related           \nproblems of graph partitioning and graph clustering were chosen.        \nGraph partitioning and graph clustering are among the aforementioned    \nquestions or problem areas where theoretical and practical results      \ndeviate significantly from each other, so that experimental outcomes    \nare of particular interest.                                             \n                                                                        \nProblem Motivation                                                      \n                                                                        \nGraph partitioning and graph clustering are ubiquitous subtasks in      \nmany application areas. Generally speaking, both techniques aim at      \nthe identification of vertex subsets with many internal and few         \nexternal edges. To name only a few, problems addressed by graph         \npartitioning and graph clustering algorithms are:                       \n                                                                        \n    * What are the communities within an (online) social network?       \n    * How do I speed up a numerical simulation by mapping it            \n        efficiently onto a parallel computer?                           \n    * How must components be organized on a computer chip such that     \n        they can communicate efficiently with each other?               \n    * What are the segments of a digital image?                         \n    * Which functions are certain genes (most likely) responsible       \n        for?                                                            \n                                                                        \nChallenge Goals                                                         \n                                                                        \n    * One goal of this Challenge is to create a reproducible picture    \n        of the state-of-the-art in the area of graph partitioning       \n        (GP) and graph clustering (GC) algorithms. To this end we       \n        are identifying a standard set of benchmark instances and       \n        generators.                                                     \n                                                                        \n    * Moreover, after initiating a discussion with the community, we    \n        would like to establish the most appropriate problem            \n        formulations and objective functions for a variety of           \n        applications.                                                   \n                                                                        \n    * Another goal is to enable current researchers to compare their    \n        codes with each other, in hopes of identifying the most         \n        effective algorithmic innovations that have been proposed.      \n                                                                        \n    * The final goal is to publish proceedings containing results       \n        presented at the Challenge workshop, and a book containing      \n        the best of the proceedings papers.                             \n                                                                        \nProblems Addressed                                                      \n                                                                        \nThe precise problem formulations need to be established in the course   \nof the Challenge. The descriptions below serve as a starting point.     \n                                                                        \n    * Graph partitioning:                                               \n                                                                        \n      The most common formulation of the graph partitioning problem     \n      for an undirected graph G = (V,E) asks for a division of V into   \n      k pairwise disjoint subsets (partitions) such that all            \n      partitions are of approximately equal size and the edge-cut,      \n      i.e., the total number of edges having their incident nodes in    \n      different subdomains, is minimized. The problem is known to be    \n      NP-hard.                                                          \n                                                                        \n    * Graph clustering:                                                 \n                                                                        \n      Clustering is an important tool for investigating the             \n      structural properties of data. Generally speaking, clustering     \n      refers to the grouping of objects such that objects in the same   \n      cluster are more similar to each other than to objects of         \n      different clusters. The similarity measure depends on the         \n      underlying application. Clustering graphs usually refers to the   \n      identification of vertex subsets (clusters) that have             \n      significantly more internal edges (to vertices of the same        \n      cluster) than external ones (to vertices of another cluster).     \n                                                                        \nThere are 10 data sets in the DIMACS10 collection:                      \n                                                                        \nKronecker:  synthetic graphs from the Graph500 benchmark                \ndyn-frames: frames from a 2D dynamic simulation                         \nDelaunay:   Delaunay triangulations of random points in the plane       \ncoauthor:   citation and co-author networks                             \nstreets:    real-world street networks                                  \nWalshaw:    Chris Walshaw's graph partitioning archive                  \nmatrix:     graphs from the UF collection (not added here)              \nrandom:     random geometric graphs (random points in the unit square)  \nclustering: real-world graphs commonly used as benchmarks               \nnumerical:  graphs from numerical simulation                            \n                                                                        \nSome of the graphs already exist in the UF Collection.  In some cases,  \nthe original graph is unsymmetric, with values, whereas the DIMACS      \ngraph is the symmetrized pattern of A+A'.  Rather than add duplicate    \npatterns to the UF Collection, a MATLAB script is provided at           \nhttp://www.cise.ufl.edu/research/sparse/dimacs10 which downloads        \neach matrix from the UF Collection via UFget, and then performs whatever\noperation is required to convert the matrix to the DIMACS graph problem.\nAlso posted at that page is a MATLAB code (metis_graph) for reading the \nDIMACS *.graph files into MATLAB.                                       \n                                                                        \n                                                                        \nWalshaw:  Chris Walshaw's graph partitioning archive                    \n                                                                        \nChris Walshaw's graph partitioning archive contains 34 graphs that      \nhave been very popular as benchmarks for graph partitioning algorithms  \n( http://staffweb.cms.gre.ac.uk/~wc06/partition/ ).                     \n                                                                        \n17 of them are already in the UF Collection.  Only the 17 new graphs    \nnot yet in the collection are added here in the DIMACS10 set.           \n                                                                        \nDIMACS10 graph:                 new?   UF matrix:                       \n---------------                 ----   -------------                    \nwalshaw/144                      *     DIMACS10/144                     \nwalshaw/3elt                           AG-Monien/3elt                   \nwalshaw/4elt                           Pothen/barth5                    \nwalshaw/598a                     *     DIMACS10/598a                    \nwalshaw/add20                          Hamm/add20                       \nwalshaw/add32                          Hamm/add32                       \nwalshaw/auto                     *     DIMACS10/auto                    \nwalshaw/bcsstk29                       HB/bcsstk29                      \nwalshaw/bcsstk30                       HB/bcsstk30                      \nwalshaw/bcsstk31                       HB/bcsstk31                      \nwalshaw/bcsstk32                       HB/bcsstk32                      \nwalshaw/bcsstk33                       HB/bcsstk33                      \nwalshaw/brack2                         AG-Monien/brack2                 \nwalshaw/crack                          AG-Monient/crack                 \nwalshaw/cs4                      *     DIMACS10/cs4                     \nwalshaw/cti                      *     DIMACS10/cti                     \nwalshaw/data                     *     DIMACS10/data                    \nwalshaw/fe_4elt2                 *     DIMACS10/fe_4elt2                \nwalshaw/fe_body                  *     DIMACS10/fe_body                 \nwalshaw/fe_ocean                 *     DIMACS10/fe_ocean                \nwalshaw/fe_pwt                         Pothen/pwt                       \nwalshaw/fe_rotor                 *     DIMACS10/fe_rotor                \nwalshaw/fe_sphere                *     DIMACS10/fe_sphere               \nwalshaw/fe_tooth                 *     DIMACS10/fe_tooth                \nwalshaw/finan512                       Mulvey/finan512                  \nwalshaw/m14b                     *     DIMACS10/m14b                    \nwalshaw/memplus                        Hamm/memplus                     \nwalshaw/t60k                     *     DIMACS10/t60k                    \nwalshaw/uk                       *     DIMACS10/uk                      \nwalshaw/vibrobox                       Cote/vibrobox                    \nwalshaw/wave                           AG-Monien/wave                   \nwalshaw/whitaker3                      AG-Monien/whitaker3              \nwalshaw/wing                     *     DIMACS10/wing                    \nwalshaw/wing_nodal               *     DIMACS10/wing_nodal              \n
2534`IPSO`HTC_336_4438`226340`226340`783496`yes`226340`29588`14796`121026`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2535`IPSO`HTC_336_9129`226340`226340`762969`yes`226340`29588`14796`120453`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2536`IPSO`OPF_10000`43887`43887`426898`yes`43887`1`1`40813`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2537`IPSO`OPF_3754`15435`15435`141478`yes`15435`1`1`16795`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2538`IPSO`OPF_6000`29902`29902`274697`yes`29902`1`1`27721`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2539`IPSO`TSC_OPF_1047`8140`8140`2012833`yes`8140`2`2`4069`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2540`IPSO`TSC_OPF_300`9774`9774`820783`yes`9774`2`2`21`symmetric`symmetric`real`symmetric`no`no`L. Peijie`J. Hogg`2011`power network problem`\nThree different kinds of optimization methods (OPF, TSCOPF, HTC)\napplied to power system simulation.  All matrices are symmetric \nindefinite.  From Li Peijie, Institute of Power Systems,        \nGuangxi University (beyondpeijie at gxu.edu.cn).  Collected by  \nJonathan Hogg, Rutherford Appleton Laboratory, Oxfordshire, UK. \n
2541`Janna`Serena`1391349`1391349`64131971`yes`1391349`9229`9229`399730`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`structural problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                    \n                                                                   \nSymmetric Positive Definite Matrix                                 \n# equations:   1391349                                           \n# non-zeroes: 64531701                                           \nProblem description: structural problem                            \n                                                                   \nThe matrix Serena is obtained from a structural problem            \ndiscretizing a gas reservoir with tetrahedral Finite Elements.     \nThe medium is strongly heterogeneous and characterized by a        \ncomplex geometry consisting of alternating sequences of thin       \nclay and sand layers.  Some further information may be found       \nin the paper:                                                      \n                                                                   \nM. Ferronato, G. Gambolati, C. Janna, P. Teatini. \"Geomechanical   \nissues of anthropogenic CO2 sequestration in exploited gas fields\",\nEnergy Conversion and Management, 51, pp. 1918-1928, 2010.         \n
2542`Janna`Emilia_923`923136`923136`40373538`yes`923136`14425`14425`631668`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`structural problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                 \n                                                                \nSymmetric Positive Definite Matrix                              \n# equations:  923136                                            \n# non-zeroes: 41005206                                          \nProblem description: Geomechanical problem                      \n                                                                \nThe matrix Emilia_923 is obtained from a structural problem     \ndiscretizing a gas reservoir with tetrahedral Finite Elements.  \nDue to the complex geometry of the geological formation it was  \nnot possible to obtain a computational grid characterized by    \nregularly shaped elements.  The problem arises from a 3D        \ndiscretization with three displacement unknowns associated to   \neach node of the grid.  Some further information may be found in\nthe following papers:                                           \n                                                                \n1) M. Ferronato, G. Gambolati, C. Janna, P. Teatini.            \n\"Geomechanical issues of anthropogenic CO2 sequestration in     \nexploited gas fields\", Energy Conversion and Management, 51, pp.\n1918-1928, 2010.                                                \n                                                                \n2) C. Janna, M. Ferronato. \"Adaptive pattern research for block \nFSAI preconditionig\". SIAM Journal on Scientific Computing, to  \nappear.                                                         \n
2543`Janna`Fault_639`638802`638802`27245944`yes`638802`21880`21880`1368620`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`structural problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                 \n                                                                \nSymmetric Positive Definite Matrix                              \n# equations:  638802                                            \n# non-zeroes: 28614564                                          \nProblem description: contact mechanics                          \n                                                                \nThe matrix Fault_639 is obtained from a structural problem      \ndiscretizing a faulted gas reservoir with tetrahedral Finite    \nElements and triangular Interface Elements.  The Interface      \nElements are used with a Penalty formulation to simulate the    \nfaults behaviour.  The problem arises from a 3D discretization  \nwith three displacement unknowns associated to each node of the \ngrid.  Some further information may be found in the following   \npapers:                                                         \n                                                                \n1) M. Ferronato, G. Gambolati, C. Janna, P. Teatini. \"Numerical \nmodelling of regional faults in land subsidence prediction above\ngas/oil reservoirs\", International Journal for Numerical and    \nAnalytical Methods in Geomechanics, 32, pp. 633-657, 2008.      \n                                                                \n2) M. Ferronato, C. Janna, G. Gambolati. \"Mixed constraint      \npreconditioning in computational contact mechanics\", Computer   \nMethods in Applied Mechanics and Engineering, 197, pp.          \n3922-3931, 2008.                                                \n                                                                \n3) C. Janna, M. Ferronato, G. Gambolati. \"Multilevel incomplete \nfactorizations for the iterative solution of non-linear FE      \nproblems\". International Journal for Numerical Methods in       \nEngineering, 80, pp. 651-670, 2009.                             \n                                                                \n4) C. Janna, M. Ferronato, G. Gambolati. \"A Block FSAI-ILU      \nparallel preconditioner for symmetric positive definite linear  \nsystems\". SIAM Journal on Scientific Computing, 32, pp.         \n2468-2484, 2010.                                                \n
2544`Janna`Flan_1565`1564794`1564794`114165372`yes`1564794`1`1`3240672`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`structural problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                 \n                                                                \nSymmetric Positive Definite Matrix                              \n# equations:    1564794                                         \n# non-zeroes: 117406044                                         \nProblem description: Structural problem                         \n                                                                \nThe matrix Flan_1565 is obtained from a 3D mechanical problem   \ndiscretizing a steel flange with hexahedral Finite Elements. Due\nto the regular shape of the mechanical piece, the computational \ngrid is a structured mesh with regularly shaped elements. Three \ndisplacement unknowns are associated to each node of the grid.  \nSome further information may be found in the following papers:  \n                                                                \n1) C. Janna, A. Comerlati, G. Gambolati. \"A comparison of       \nprojective and direct solvers for finite elements in            \nelastostatics\". Advances in Engineering Software, 40, pp.       \n675-685, 2009.                                                  \n                                                                \n2) C. Janna, M. Ferronato, G. Gambolati. \"A Block FSAI-ILU      \nparallel preconditioner for symmetric positive definite linear  \nsystems\". SIAM Journal on Scientific Computing, 32, pp.         \n2468-2484, 2010.                                                \n
2545`Janna`Geo_1438`1437960`1437960`60236322`yes`1437960`66481`66481`2920368`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`structural problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                 \n                                                                \nSymmetric Positive Definite Matrix                              \n# equations:   1437960                                          \n# non-zeroes: 63156690                                          \nProblem description: Geomechanical problem                      \n                                                                \nThe matrix Geo_1438 is obtained from a geomechanical problem    \ndiscretizing a region of the earth crust subject to underground \ndeformation. The computational domain is a box with an areal    \nextent of 50 x 50 km and 10 km deep consisting of regularly     \nshaped tetrahedral Finite Elements.  The problem arises from a  \n3D discretization with three displacement unknowns associated to\neach node of the grid.  This matrix has been used as a test case\nin the following paper:                                         \n                                                                \n1) C. Janna, M. Ferronato, G. Gambolati. \"A Block FSAI-ILU      \nparallel preconditioner for symmetric positive definite linear  \nsystems\". SIAM Journal on Scientific Computing, 32, pp.         \n2468-2484, 2010.                                                \n
2546`Janna`Hook_1498`1498023`1498023`59374451`yes`1498023`30001`30001`1542994`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`structural problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                \n                                                               \nSymmetric Positive Definite Matrix                             \n# equations:   1498023                                         \n# non-zeroes: 60917445                                         \nProblem description: Structural problem                        \n                                                               \nThe matrix Hook_1498 is obtained from a 3D mechanical problem  \ndiscretizing a steel hook with tetrahedral Finite Elements. The\ncomputational grid consists of regularly shaped elements with  \nthree displacement unknowns associated to each node.           \n
2547`Janna`StocF-1465`1465137`1465137`21005389`yes`1465137`29105`29105`0`symmetric`symmetric`real`symmetric`yes`yes`C. Janna, M. Ferronato`T. Davis`2011`computational fluid dynamics problem`\nAuthors: Carlo Janna and Massimiliano Ferronato                 \n                                                                \nSymmetric Positive Definite Matrix                              \n# equations:   1465137                                          \n# non-zeroes: 21005389                                          \nProblem description: Flow in porous medium with stochastic      \npermeabilies                                                    \n                                                                \nThe matrix StocF_1465 is obtained from a fluid-dynamical problem\nof flow in porous medium.  The computational grid consists of   \ntetrahedral Finite Elements discretizing an underground aquifer \nwith stochastic permeabilties.  Some further information may be \nfound in the following papers:                                  \n                                                                \n1) C. Janna, M. Ferronato. \"Adaptive pattern research for Block \nFSAI preconditioning\".  SIAM Journal on Scientific Computing, to\nappear.                                                         \n                                                                \n2) M. Ferronato, C. Janna, G. Pini. \"Shifted FSAI               \npreconditioners for the efficient parallel solution of          \nnon-linear groundwater flow models\". International Journal for  \nNumerical Methods in Engineering, to appear.                    \n)
